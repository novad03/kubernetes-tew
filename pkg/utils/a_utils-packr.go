// Code generated by github.com/gobuffalo/packr. DO NOT EDIT.

package utils

import "github.com/gobuffalo/packr"

// You can use the "packr clean" command to clean up this,
// and any other packr generated files.
func init() {
	packr.PackJSONBytes("../../templates", "ceph/ceph.conf", "\"W2dsb2JhbF0KZnNpZCA9IHt7LkNsdXN0ZXJJRH19CgphdXRoIGNsdXN0ZXIgcmVxdWlyZWQgPSBjZXBoeAphdXRoIHNlcnZpY2UgcmVxdWlyZWQgPSBjZXBoeAphdXRoIGNsaWVudCByZXF1aXJlZCA9IGNlcGh4CgpwdWJsaWMgbmV0d29yayA9IHt7LlB1YmxpY05ldHdvcmt9fQpjbHVzdGVyIG5ldHdvcmsgPSB7ey5DbHVzdGVyTmV0d29ya319Cgpvc2Qgb2JqZWN0c3RvcmUgPSBmaWxlc3RvcmUKb3NkIGpvdXJuYWwgc2l6ZSA9IDEwMApvc2QgbWF4IG9iamVjdCBuYW1lIGxlbiA9IDI1Ngpvc2QgbWF4IG9iamVjdCBuYW1lc3BhY2UgbGVuID0gNjQKb3NkIHBnIGJpdHMgPSAxMQpvc2QgcGdwIGJpdHMgPSAxMQpvc2QgcG9vbCBkZWZhdWx0IHNpemUgPSB7e2xlbiAuU3RvcmFnZU5vZGVzfX0Kb3NkIHBvb2wgZGVmYXVsdCBtaW4gc2l6ZSA9IDEKb3NkIHBvb2wgZGVmYXVsdCBwZyBudW0gPSAxMDAKb3NkIHBvb2wgZGVmYXVsdCBwZ3AgbnVtID0gMTAwCgpyYmRfZGVmYXVsdF9mZWF0dXJlcyA9IDMKCmZhdGFsIHNpZ25hbCBoYW5kbGVycyA9IGZhbHNlCgptb25fbWF4X3BnX3Blcl9vc2QgPSAxMDAwCm1vbl9hbGxvd19wb29sX2RlbGV0ZSA9IHRydWUKbW9uX2Nsb2NrX2RyaWZ0X2FsbG93ZWQgPSAxCgpsb2cgZmlsZSA9IC9kZXYvbnVsbAoKW21vbl0Ka2V5cmluZyA9IHt7JC5Nb25LZXlyaW5nVGVtcGxhdGV9fQptb24gZGF0YSA9IHt7JC5Nb25EYXRhVGVtcGxhdGV9fQoKW29zZF0Ka2V5cmluZyA9IHt7JC5Pc2RLZXlyaW5nVGVtcGxhdGV9fQpvc2QgZGF0YSA9IHt7JC5Pc2REYXRhVGVtcGxhdGV9fQpvc2Qgam91cm5hbCA9IHt7JC5Pc2RKb3VybmFsVGVtcGxhdGV9fQoKe3stIHJhbmdlICRpbmRleCwgJG5vZGUgOj0gLlN0b3JhZ2VOb2Rlc319CgpbbW9uLnt7JG5vZGUuTmFtZX19XQpob3N0ID0ge3skbm9kZS5OYW1lfX0KbW9uIGFkZHIgPSB7eyRub2RlLklQfX06Njc4OQp7ey0gZW5kfX0KCnt7LSByYW5nZSAkaW5kZXgsICRub2RlIDo9IC5TdG9yYWdlTm9kZXN9fQoKW21kcy57eyRub2RlLk5hbWV9fV0KaG9zdCA9IHt7JG5vZGUuTmFtZX19Cnt7LSBlbmR9fQoKe3stIHJhbmdlICRpbmRleCwgJG5vZGUgOj0gLlN0b3JhZ2VOb2Rlc319Cgpbb2RzLnt7JG5vZGUuU3RvcmFnZUluZGV4fX1dCmhvc3QgPSB7eyRub2RlLk5hbWV9fQp7ey0gZW5kfX0K\"")
	packr.PackJSONBytes("../../templates", "ceph/client-admin.keyring", "\"W2NsaWVudC5hZG1pbl0KICAgICAgICBrZXkgPSB7ey5LZXkgfCB1bmVzY2FwZX19CiAgICAgICAgYXVpZCA9IDAKICAgICAgICBjYXBzIG1kcyA9ICJhbGxvdyIKICAgICAgICBjYXBzIG1nciA9ICJhbGxvdyAqIgogICAgICAgIGNhcHMgbW9uID0gImFsbG93ICoiCiAgICAgICAgY2FwcyBvc2QgPSAiYWxsb3cgKiIK\"")
	packr.PackJSONBytes("../../templates", "ceph/client.keyring", "\"W2NsaWVudC57ey5OYW1lfX1dCiAgICAgICAga2V5ID0ge3suS2V5IHwgdW5lc2NhcGV9fQogICAgICAgIGNhcHMgbW9uID0gImFsbG93IHByb2ZpbGUge3suTmFtZX19Igo=\"")
	packr.PackJSONBytes("../../templates", "ceph/monitor.keyring", "\"W21vbi5dCiAgICAgICAga2V5ID0ge3suTW9uaXRvcktleSB8IHVuZXNjYXBlfX0KICAgICAgICBjYXBzIG1vbiA9ICJhbGxvdyAqIgpbY2xpZW50LmFkbWluXQogICAgICAgIGtleSA9IHt7LkNsaWVudEFkbWluS2V5IHwgdW5lc2NhcGV9fQogICAgICAgIGF1aWQgPSAwCiAgICAgICAgY2FwcyBtZHMgPSAiYWxsb3ciCiAgICAgICAgY2FwcyBtZ3IgPSAiYWxsb3cgKiIKICAgICAgICBjYXBzIG1vbiA9ICJhbGxvdyAqIgogICAgICAgIGNhcHMgb3NkID0gImFsbG93ICoiCltjbGllbnQuYm9vdHN0cmFwLW1kc10KICAgICAgICBrZXkgPSB7ey5DbGllbnRCb290c3RyYXBNZXRhZGF0YVNlcnZlcktleSB8IHVuZXNjYXBlfX0KICAgICAgICBjYXBzIG1vbiA9ICJhbGxvdyBwcm9maWxlIGJvb3RzdHJhcC1tZHMiCltjbGllbnQuYm9vdHN0cmFwLW9zZF0KICAgICAgICBrZXkgPSB7ey5DbGllbnRCb290c3RyYXBPYmplY3RTdG9yYWdlS2V5IHwgdW5lc2NhcGV9fQogICAgICAgIGNhcHMgbW9uID0gImFsbG93IHByb2ZpbGUgYm9vdHN0cmFwLW9zZCIKW2NsaWVudC5ib290c3RyYXAtcmJkXQogICAgICAgIGtleSA9IHt7LkNsaWVudEJvb3RzdHJhcFJhZG9zQmxvY2tEZXZpY2VLZXkgfCB1bmVzY2FwZX19CiAgICAgICAgY2FwcyBtb24gPSAiYWxsb3cgcHJvZmlsZSBib290c3RyYXAtcmJkIgpbY2xpZW50LmJvb3RzdHJhcC1yZ3ddCiAgICAgICAga2V5ID0ge3suQ2xpZW50Qm9vdHN0cmFwUmFkb3NHYXRld2F5S2V5IHwgdW5lc2NhcGV9fQogICAgICAgIGNhcHMgbW9uID0gImFsbG93IHByb2ZpbGUgYm9vdHN0cmFwLXJndyIKW2NsaWVudC5rOHMtdGV3XQogICAgICAgIGtleSA9IHt7LkNsaWVudEs4U1RFV0tleSB8IHVuZXNjYXBlfX0KICAgICAgICBjYXBzIG1vbiA9ICJhbGxvdyByIgogICAgICAgIGNhcHMgb3NkID0gImFsbG93IHJ3eCBwb29sPXt7LkNlcGhQb29sTmFtZX19Igo=\"")
	packr.PackJSONBytes("../../templates", "k8s/config-map.yaml", "\"LS0tCmFwaVZlcnNpb246IHYxCmtpbmQ6IE5hbWVzcGFjZQptZXRhZGF0YToKICBuYW1lOiB7ey5OYW1lc3BhY2V9fQoKLS0tCmFwaVZlcnNpb246IHYxCmtpbmQ6IENvbmZpZ01hcAptZXRhZGF0YToKICBuYW1lc3BhY2U6IHt7Lk5hbWVzcGFjZX19CiAgbmFtZToge3suTmFtZX19CmRhdGE6CiAge3tyYW5nZSAka2V5LCAkdmFsdWUgOj0gLkRhdGEgLX19CiAge3ska2V5fX06IHwKe3sgJHZhbHVlIHwgZmlsZX19CiAge3tlbmR9fQo=\"")
	packr.PackJSONBytes("../../templates", "k8s/credentials.yaml", "\"LS0tCmFwaVZlcnNpb246IHYxCmtpbmQ6IE5hbWVzcGFjZQptZXRhZGF0YToKICBuYW1lOiB7ey5OYW1lc3BhY2V9fQoKLS0tCmFwaVZlcnNpb246IHYxCmtpbmQ6IFNlY3JldAptZXRhZGF0YToKICBuYW1lc3BhY2U6IHt7Lk5hbWVzcGFjZX19CiAgbmFtZToge3suU2VjcmV0TmFtZX19CnR5cGU6IE9wYXF1ZQpkYXRhOgogIHt7cmFuZ2UgJGtleSwgJHZhbHVlIDo9IC5EYXRhIC19fQogIHt7JGtleX19OiAie3sgJHZhbHVlIHwgYmFzZTY0IH19IgogIHt7ZW5kfX0K\"")
	packr.PackJSONBytes("../../templates", "k8s/cri/containerd.toml", "\"dmVyc2lvbiA9IDIKcm9vdCA9ICJ7ey5Db250YWluZXJkUm9vdERpcmVjdG9yeX19IgpzdGF0ZSA9ICJ7ey5Db250YWluZXJkU3RhdGVEaXJlY3Rvcnl9fSIKcGx1Z2luX2RpciA9ICIiCmRpc2FibGVkX3BsdWdpbnMgPSBbXQpyZXF1aXJlZF9wbHVnaW5zID0gW10Kb29tX3Njb3JlID0gMAoKW2dycGNdCiAgYWRkcmVzcyA9ICJ7ey5Db250YWluZXJkU29ja319IgogIHRjcF9hZGRyZXNzID0gIiIKICB0Y3BfdGxzX2NlcnQgPSAiIgogIHRjcF90bHNfa2V5ID0gIiIKICB1aWQgPSAwCiAgZ2lkID0gMAogIG1heF9yZWN2X21lc3NhZ2Vfc2l6ZSA9IDE2Nzc3MjE2CiAgbWF4X3NlbmRfbWVzc2FnZV9zaXplID0gMTY3NzcyMTYKClt0dHJwY10KICBhZGRyZXNzID0gIiIKICB1aWQgPSAwCiAgZ2lkID0gMAoKW2RlYnVnXQogIGFkZHJlc3MgPSAiIgogIHVpZCA9IDAKICBnaWQgPSAwCiAgbGV2ZWwgPSAiIgoKW21ldHJpY3NdCiAgYWRkcmVzcyA9ICIiCiAgZ3JwY19oaXN0b2dyYW0gPSBmYWxzZQoKW2Nncm91cF0KICBwYXRoID0gIiIKClt0aW1lb3V0c10KICAiaW8uY29udGFpbmVyZC50aW1lb3V0LnNoaW0uY2xlYW51cCIgPSAiNXMiCiAgImlvLmNvbnRhaW5lcmQudGltZW91dC5zaGltLmxvYWQiID0gIjVzIgogICJpby5jb250YWluZXJkLnRpbWVvdXQuc2hpbS5zaHV0ZG93biIgPSAiM3MiCiAgImlvLmNvbnRhaW5lcmQudGltZW91dC50YXNrLnN0YXRlIiA9ICIycyIKCltwbHVnaW5zXQogIFtwbHVnaW5zLiJpby5jb250YWluZXJkLmdjLnYxLnNjaGVkdWxlciJdCiAgICBwYXVzZV90aHJlc2hvbGQgPSAwLjAyCiAgICBkZWxldGlvbl90aHJlc2hvbGQgPSAwCiAgICBtdXRhdGlvbl90aHJlc2hvbGQgPSAxMDAKICAgIHNjaGVkdWxlX2RlbGF5ID0gIjBzIgogICAgc3RhcnR1cF9kZWxheSA9ICIxMDBtcyIKICBbcGx1Z2lucy4iaW8uY29udGFpbmVyZC5ncnBjLnYxLmNyaSJdCiAgICBkaXNhYmxlX3RjcF9zZXJ2aWNlID0gdHJ1ZQogICAgc3RyZWFtX3NlcnZlcl9hZGRyZXNzID0gInt7LklQfX0iCiAgICBzdHJlYW1fc2VydmVyX3BvcnQgPSAiMCIKICAgIHN0cmVhbV9pZGxlX3RpbWVvdXQgPSAiNGgwbTBzIgogICAgZW5hYmxlX3NlbGludXggPSBmYWxzZQogICAgc2FuZGJveF9pbWFnZSA9ICJ7ey5QYXVzZUltYWdlfX0iCiAgICBzdGF0c19jb2xsZWN0X3BlcmlvZCA9IDEwCiAgICBzeXN0ZW1kX2Nncm91cCA9IGZhbHNlCiAgICBlbmFibGVfdGxzX3N0cmVhbWluZyA9IGZhbHNlCiAgICBtYXhfY29udGFpbmVyX2xvZ19saW5lX3NpemUgPSAxNjM4NAogICAgZGlzYWJsZV9jZ3JvdXAgPSBmYWxzZQogICAgZGlzYWJsZV9hcHBhcm1vciA9IGZhbHNlCiAgICByZXN0cmljdF9vb21fc2NvcmVfYWRqID0gZmFsc2UKICAgIG1heF9jb25jdXJyZW50X2Rvd25sb2FkcyA9IDMKICAgIGRpc2FibGVfcHJvY19tb3VudCA9IGZhbHNlCiAgICBbcGx1Z2lucy4iaW8uY29udGFpbmVyZC5ncnBjLnYxLmNyaSIuY29udGFpbmVyZF0KICAgICAgc25hcHNob3R0ZXIgPSAib3ZlcmxheWZzIgogICAgICBkZWZhdWx0X3J1bnRpbWVfbmFtZSA9ICJydW5jIgogICAgICBub19waXZvdCA9IGZhbHNlCiAgICAgIFtwbHVnaW5zLiJpby5jb250YWluZXJkLmdycGMudjEuY3JpIi5jb250YWluZXJkLnJ1bnRpbWVzXQogICAgICAgIFtwbHVnaW5zLiJpby5jb250YWluZXJkLmdycGMudjEuY3JpIi5jb250YWluZXJkLnJ1bnRpbWVzLnJ1bmNdCiAgICAgICAgICBydW50aW1lX3R5cGUgPSAiaW8uY29udGFpbmVyZC5ydW5jLnYyIgogICAgICAgICAgcnVudGltZV9lbmdpbmUgPSAiIgogICAgICAgICAgcnVudGltZV9yb290ID0gIiIKICAgICAgICAgIHByaXZpbGVnZWRfd2l0aG91dF9ob3N0X2RldmljZXMgPSBmYWxzZQogICAgICAgICAgW3BsdWdpbnMuImlvLmNvbnRhaW5lcmQuZ3JwYy52MS5jcmkiLmNvbnRhaW5lcmQucnVudGltZXMucnVuYy5vcHRpb25zXQoJCSAgICBCaW5hcnlOYW1lID0gInt7LkNSSUJpbmFyaWVzRGlyZWN0b3J5fX0vcnVuYyIKICAgIFtwbHVnaW5zLiJpby5jb250YWluZXJkLmdycGMudjEuY3JpIi5jbmldCiAgICAgIGJpbl9kaXIgPSAie3suQ05JQmluYXJpZXNEaXJlY3Rvcnl9fSIKICAgICAgY29uZl9kaXIgPSAie3suQ05JQ29uZmlnRGlyZWN0b3J5fX0iCiAgICAgIG1heF9jb25mX251bSA9IDEKICAgICAgY29uZl90ZW1wbGF0ZSA9ICIiCiAgICBbcGx1Z2lucy4iaW8uY29udGFpbmVyZC5ncnBjLnYxLmNyaSIucmVnaXN0cnldCiAgICAgIFtwbHVnaW5zLiJpby5jb250YWluZXJkLmdycGMudjEuY3JpIi5yZWdpc3RyeS5taXJyb3JzXQogICAgICAgIFtwbHVnaW5zLiJpby5jb250YWluZXJkLmdycGMudjEuY3JpIi5yZWdpc3RyeS5taXJyb3JzLiJkb2NrZXIuaW8iXQogICAgICAgICAgZW5kcG9pbnQgPSBbImh0dHBzOi8vcmVnaXN0cnktMS5kb2NrZXIuaW8iXQogICAgW3BsdWdpbnMuImlvLmNvbnRhaW5lcmQuZ3JwYy52MS5jcmkiLng1MDlfa2V5X3BhaXJfc3RyZWFtaW5nXQogICAgICB0bHNfY2VydF9maWxlID0gIiIKICAgICAgdGxzX2tleV9maWxlID0gIiIKICBbcGx1Z2lucy4iaW8uY29udGFpbmVyZC5pbnRlcm5hbC52MS5vcHQiXQogICAgcGF0aCA9ICIvb3B0L2NvbnRhaW5lcmQiCiAgW3BsdWdpbnMuImlvLmNvbnRhaW5lcmQuaW50ZXJuYWwudjEucmVzdGFydCJdCiAgICBpbnRlcnZhbCA9ICIxMHMiCiAgW3BsdWdpbnMuImlvLmNvbnRhaW5lcmQubWV0YWRhdGEudjEuYm9sdCJdCiAgICBjb250ZW50X3NoYXJpbmdfcG9saWN5ID0gInNoYXJlZCIKICBbcGx1Z2lucy4iaW8uY29udGFpbmVyZC5tb25pdG9yLnYxLmNncm91cHMiXQogICAgbm9fcHJvbWV0aGV1cyA9IGZhbHNlCiAgW3BsdWdpbnMuImlvLmNvbnRhaW5lcmQucnVudGltZS52MS5saW51eCJdCiAgICBzaGltID0gInt7LkNSSUJpbmFyaWVzRGlyZWN0b3J5fX0vY29udGFpbmVyZC1zaGltIgogICAgcnVudGltZSA9ICJ7ey5DUklCaW5hcmllc0RpcmVjdG9yeX19L3J1bmMiCiAgICBydW50aW1lX3Jvb3QgPSAiIgogICAgbm9fc2hpbSA9IGZhbHNlCiAgICBzaGltX2RlYnVnID0gZmFsc2UKICBbcGx1Z2lucy4iaW8uY29udGFpbmVyZC5ydW50aW1lLnYyLnRhc2siXQogICAgcGxhdGZvcm1zID0gWyJsaW51eC9hbWQ2NCJdCiAgW3BsdWdpbnMuImlvLmNvbnRhaW5lcmQuc2VydmljZS52MS5kaWZmLXNlcnZpY2UiXQogICAgZGVmYXVsdCA9IFsid2Fsa2luZyJdCiAgW3BsdWdpbnMuImlvLmNvbnRhaW5lcmQuc25hcHNob3R0ZXIudjEuZGV2bWFwcGVyIl0KICAgIHJvb3RfcGF0aCA9ICIiCiAgICBwb29sX25hbWUgPSAiIgogICAgYmFzZV9pbWFnZV9zaXplID0gIiIK\"")
	packr.PackJSONBytes("../../templates", "k8s/encryption-config.yaml", "\"YXBpVmVyc2lvbjogdjEKa2luZDogRW5jcnlwdGlvbkNvbmZpZwpyZXNvdXJjZXM6CiAgLSByZXNvdXJjZXM6CiAgICAgIC0gc2VjcmV0cwogICAgcHJvdmlkZXJzOgogICAgICAtIGFlc2NiYzoKICAgICAgICAgIGtleXM6CiAgICAgICAgICAgIC0gbmFtZToga2V5MQogICAgICAgICAgICAgIHNlY3JldDoge3suRW5jcnlwdGlvbktleSB8IHVuZXNjYXBlfX0KICAgICAgLSBpZGVudGl0eToge30K\"")
	packr.PackJSONBytes("../../templates", "k8s/kube-proxy-configuration.yaml", "\"YXBpVmVyc2lvbjoga3ViZXByb3h5LmNvbmZpZy5rOHMuaW8vdjFhbHBoYTEKa2luZDogS3ViZVByb3h5Q29uZmlndXJhdGlvbgpjbGllbnRDb25uZWN0aW9uOgogIGt1YmVjb25maWc6ICJ7ey5LdWJlQ29uZmlnfX0iCmNsdXN0ZXJDSURSOiAie3suQ2x1c3RlckNJRFJ9fSIKbW9kZTogImlwdGFibGVzIgptZXRyaWNzQmluZEFkZHJlc3M6ICIwLjAuMC4wOjEwMjQ5Igo=\"")
	packr.PackJSONBytes("../../templates", "k8s/kube-scheduler-configuration.yaml", "\"YXBpVmVyc2lvbjoga3ViZXNjaGVkdWxlci5jb25maWcuazhzLmlvL3YxYWxwaGEyCmtpbmQ6IEt1YmVTY2hlZHVsZXJDb25maWd1cmF0aW9uCmNsaWVudENvbm5lY3Rpb246CiAga3ViZWNvbmZpZzogInt7Lkt1YmVDb25maWd9fSIKbGVhZGVyRWxlY3Rpb246CiAgbGVhZGVyRWxlY3Q6IHRydWUK\"")
	packr.PackJSONBytes("../../templates", "k8s/kubeconfig.yaml", "\"YXBpVmVyc2lvbjogdjEKa2luZDogQ29uZmlnCmNsdXN0ZXJzOgotIGNsdXN0ZXI6CiAgICBjZXJ0aWZpY2F0ZS1hdXRob3JpdHktZGF0YToge3suQ0FEYXRhfX0KICAgIHNlcnZlcjogaHR0cHM6Ly97ey5BUElTZXJ2ZXJ9fQogIG5hbWU6IGt1YmVybmV0ZXMtdGhlLWVhc2llci13YXkKdXNlcnM6Ci0gbmFtZToge3suTmFtZX19CiAgdXNlcjoKICAgIGNsaWVudC1jZXJ0aWZpY2F0ZS1kYXRhOiB7ey5DZXJ0aWZpY2F0ZURhdGF9fQogICAgY2xpZW50LWtleS1kYXRhOiB7ey5LZXlEYXRhfX0KY29udGV4dHM6Ci0gY29udGV4dDoKICAgIGNsdXN0ZXI6IGt1YmVybmV0ZXMtdGhlLWVhc2llci13YXkKICAgIHVzZXI6IHt7LlVzZXJ9fQogIG5hbWU6IGRlZmF1bHQKY3VycmVudC1jb250ZXh0OiBkZWZhdWx0Cg==\"")
	packr.PackJSONBytes("../../templates", "k8s/kubelet-configuration.yaml", "\"YXBpVmVyc2lvbjoga3ViZWxldC5jb25maWcuazhzLmlvL3YxYmV0YTEKa2luZDogS3ViZWxldENvbmZpZ3VyYXRpb24KYXV0aGVudGljYXRpb246CiAgYW5vbnltb3VzOgogICAgZW5hYmxlZDogZmFsc2UKICB3ZWJob29rOgogICAgZW5hYmxlZDogdHJ1ZQogIHg1MDk6CiAgICBjbGllbnRDQUZpbGU6ICJ7ey5DQX19IgphdXRob3JpemF0aW9uOgogIG1vZGU6IFdlYmhvb2sKY2x1c3RlckRvbWFpbjogImNsdXN0ZXIubG9jYWwiCmNsdXN0ZXJETlM6CiAgLSAie3suQ2x1c3RlckROU0lQfX0iCnBvZENJRFI6ICJ7ey5QT0RDSURSfX0iCnJ1bnRpbWVSZXF1ZXN0VGltZW91dDogIjE1bSIKdGxzQ2VydEZpbGU6ICJ7ey5DZXJ0aWZpY2F0ZUZpbGVuYW1lfX0iCnRsc1ByaXZhdGVLZXlGaWxlOiAie3suS2V5RmlsZW5hbWV9fSIKc3RhdGljUG9kUGF0aDogInt7LlN0YXRpY1BvZFBhdGh9fSIKZmFpbFN3YXBPbjogZmFsc2UKZmVhdHVyZUdhdGVzOiAKICBWb2x1bWVTbmFwc2hvdERhdGFTb3VyY2U6IHRydWUKcmVzb2x2Q29uZjogInt7LlJlc29sdkNvbmZ9fSIKcmVhZE9ubHlQb3J0OiAxMDI1NQptYXhQb2RzOiB7ey5NYXhQb2RzfX0K\"")
	packr.PackJSONBytes("../../templates", "k8s/lb/gobetween.toml", "\"W3NlcnZlcnMua3ViZS1hcGlzZXJ2ZXJdCmJpbmQgPSAiMC4wLjAuMDp7eyAuTG9hZEJhbGFuY2VyUG9ydCB9fSIKcHJvdG9jb2wgPSAidGNwIiAKYmFsYW5jZSA9ICJyb3VuZHJvYmluIgoKbWF4X2Nvbm5lY3Rpb25zID0gMTAwMDAKY2xpZW50X2lkbGVfdGltZW91dCA9ICIxMG0iCmJhY2tlbmRfaWRsZV90aW1lb3V0ID0gIjEwbSIKYmFja2VuZF9jb25uZWN0aW9uX3RpbWVvdXQgPSAiMnMiCgpbc2VydmVycy5rdWJlLWFwaXNlcnZlci5kaXNjb3ZlcnldCmtpbmQgPSAic3RhdGljIgpzdGF0aWNfbGlzdCA9IFsge3sgLkt1YmVBUElTZXJ2ZXJzIHwgcXVvdGVkX3N0cmluZ19saXN0IH19IF0K\"")
	packr.PackJSONBytes("../../templates", "k8s/manifests/etcd.yaml", "\"YXBpVmVyc2lvbjogdjEKa2luZDogUG9kCm1ldGFkYXRhOgogIG5hbWVzcGFjZToga3ViZS1zeXN0ZW0KICBuYW1lOiBldGNkCnNwZWM6CiAgaG9zdE5ldHdvcms6IHRydWUKICBpbml0Q29udGFpbmVyczoKICAtIG5hbWU6IHNldHVwCiAgICBpbWFnZToge3suRXRjZEltYWdlfX0KICAgIGNvbW1hbmQ6CiAgICAtIGNobW9kIAogICAgLSBnby1yd3gKICAgIC0ge3suRXRjZERhdGFEaXJlY3Rvcnl9fQogICAgdm9sdW1lTW91bnRzOgogICAgLSBuYW1lOiBldGNkLWRhdGEtZGlyZWN0b3J5CiAgICAgIG1vdW50UGF0aDoge3suRXRjZERhdGFEaXJlY3Rvcnl9fQogIGNvbnRhaW5lcnM6CiAgLSBuYW1lOiBldGNkCiAgICBpbWFnZToge3suRXRjZEltYWdlfX0KICAgIGNvbW1hbmQ6CiAgICAtIGV0Y2QKICAgIC0gLS1hZHZlcnRpc2UtY2xpZW50LXVybHM9aHR0cHM6Ly97ey5Ob2RlSVB9fToyMzc5CiAgICAtIC0tY2VydC1maWxlPXt7LlBlbUt1YmVybmV0ZXN9fQogICAgLSAtLWNsaWVudC1jZXJ0LWF1dGgKICAgIC0gLS1kYXRhLWRpcj17ey5FdGNkRGF0YURpcmVjdG9yeX19CiAgICAtIC0taW5pdGlhbC1hZHZlcnRpc2UtcGVlci11cmxzPWh0dHBzOi8ve3suTm9kZUlQfX06MjM4MAogICAgLSAtLWluaXRpYWwtY2x1c3Rlcj17ey5FdGNkQ2x1c3Rlcn19CiAgICAtIC0taW5pdGlhbC1jbHVzdGVyLXN0YXRlPW5ldwogICAgLSAtLWluaXRpYWwtY2x1c3Rlci10b2tlbj1ldGNkLWNsdXN0ZXIKICAgIC0gLS1rZXktZmlsZT17ey5QZW1LdWJlcm5ldGVzS2V5fX0KICAgIC0gLS1saXN0ZW4tY2xpZW50LXVybHM9aHR0cHM6Ly97ey5Ob2RlSVB9fToyMzc5CiAgICAtIC0tbGlzdGVuLXBlZXItdXJscz1odHRwczovL3t7Lk5vZGVJUH19OjIzODAKICAgIC0gLS1uYW1lPXt7Lk5hbWV9fQogICAgLSAtLXBlZXItY2VydC1maWxlPXt7LlBlbUt1YmVybmV0ZXN9fQogICAgLSAtLXBlZXItY2xpZW50LWNlcnQtYXV0aAogICAgLSAtLXBlZXIta2V5LWZpbGU9e3suUGVtS3ViZXJuZXRlc0tleX19CiAgICAtIC0tcGVlci10cnVzdGVkLWNhLWZpbGU9e3suUGVtQ0F9fQogICAgLSAtLXRydXN0ZWQtY2EtZmlsZT17ey5QZW1DQX19CiAgICByZWFkaW5lc3NQcm9iZToKICAgICAgZXhlYzoKICAgICAgICBjb21tYW5kOgogICAgICAgIC0gL2Jpbi9zaAogICAgICAgIC0gLWVjCiAgICAgICAgLSBFVENEQ1RMX0FQST0zIGV0Y2RjdGwgCiAgICAgICAgICAtLWVuZHBvaW50cz1odHRwczovL3t7Lk5vZGVJUH19OjIzNzkgCiAgICAgICAgICAtLWNhY2VydD17ey5QZW1DQX19CiAgICAgICAgICAtLWNlcnQ9e3suUGVtS3ViZXJuZXRlc319CiAgICAgICAgICAtLWtleT17ey5QZW1LdWJlcm5ldGVzS2V5fX0KICAgICAgICAgIGVuZHBvaW50IGhlYWx0aAogICAgICBpbml0aWFsRGVsYXlTZWNvbmRzOiAxCiAgICAgIHRpbWVvdXRTZWNvbmRzOiA1CiAgICAgIGZhaWx1cmVUaHJlc2hvbGQ6IDUKICAgIGxpdmVuZXNzUHJvYmU6CiAgICAgIGV4ZWM6CiAgICAgICAgY29tbWFuZDoKICAgICAgICAtIC9iaW4vc2gKICAgICAgICAtIC1lYwogICAgICAgIC0gRVRDRENUTF9BUEk9MyBldGNkY3RsIAogICAgICAgICAgLS1lbmRwb2ludHM9aHR0cHM6Ly97ey5Ob2RlSVB9fToyMzc5IAogICAgICAgICAgLS1jYWNlcnQ9e3suUGVtQ0F9fQogICAgICAgICAgLS1jZXJ0PXt7LlBlbUt1YmVybmV0ZXN9fQogICAgICAgICAgLS1rZXk9e3suUGVtS3ViZXJuZXRlc0tleX19CiAgICAgICAgICBlbmRwb2ludCBoZWFsdGgKICAgICAgaW5pdGlhbERlbGF5U2Vjb25kczogMTAKICAgICAgdGltZW91dFNlY29uZHM6IDEwCiAgICAgIGZhaWx1cmVUaHJlc2hvbGQ6IDUKICAgIHZvbHVtZU1vdW50czoKICAgIC0gbmFtZTogZXRjZC1kYXRhLWRpcmVjdG9yeQogICAgICBtb3VudFBhdGg6IHt7LkV0Y2REYXRhRGlyZWN0b3J5fX0KICAgIC0gbmFtZTogcGVtLWNhCiAgICAgIG1vdW50UGF0aDoge3suUGVtQ0F9fQogICAgICByZWFkT25seTogdHJ1ZQogICAgLSBuYW1lOiBwZW0ta3ViZXJuZXRlcwogICAgICBtb3VudFBhdGg6IHt7LlBlbUt1YmVybmV0ZXN9fQogICAgICByZWFkT25seTogdHJ1ZQogICAgLSBuYW1lOiBwZW0ta3ViZXJuZXRlcy1rZXkKICAgICAgbW91bnRQYXRoOiB7ey5QZW1LdWJlcm5ldGVzS2V5fX0KICAgICAgcmVhZE9ubHk6IHRydWUKICB2b2x1bWVzOgogIC0gbmFtZTogZXRjZC1kYXRhLWRpcmVjdG9yeQogICAgaG9zdFBhdGg6CiAgICAgIHR5cGU6IERpcmVjdG9yeU9yQ3JlYXRlCiAgICAgIHBhdGg6IHt7LkV0Y2REYXRhRGlyZWN0b3J5fX0KICAtIG5hbWU6IHBlbS1jYQogICAgaG9zdFBhdGg6CiAgICAgIHR5cGU6IEZpbGUKICAgICAgcGF0aDoge3suUGVtQ0F9fQogIC0gbmFtZTogcGVtLWt1YmVybmV0ZXMKICAgIGhvc3RQYXRoOgogICAgICB0eXBlOiBGaWxlCiAgICAgIHBhdGg6IHt7LlBlbUt1YmVybmV0ZXN9fQogIC0gbmFtZTogcGVtLWt1YmVybmV0ZXMta2V5CiAgICBob3N0UGF0aDoKICAgICAgdHlwZTogRmlsZQogICAgICBwYXRoOiB7ey5QZW1LdWJlcm5ldGVzS2V5fX0K\"")
	packr.PackJSONBytes("../../templates", "k8s/manifests/gobetween.yaml", "\"YXBpVmVyc2lvbjogdjEKa2luZDogUG9kCm1ldGFkYXRhOgogIG5hbWVzcGFjZToga3ViZS1zeXN0ZW0KICBuYW1lOiBnb2JldHdlZW4Kc3BlYzoKICBob3N0TmV0d29yazogdHJ1ZQogIGNvbnRhaW5lcnM6CiAgLSBuYW1lOiBnb2JldHdlZW4KICAgIGltYWdlOiB7ey5Hb2JldHdlZW5JbWFnZX19CiAgICBjb21tYW5kOgogICAgLSAvZ29iZXR3ZWVuCiAgICAtIC1jCiAgICAtIHt7LkNvbmZpZ319CiAgICByZXNvdXJjZXM6CiAgICAgIHJlcXVlc3RzOgogICAgICAgIGNwdTogMTAwbQogICAgdm9sdW1lTW91bnRzOgogICAgLSBuYW1lOiBjb25maWcKICAgICAgbW91bnRQYXRoOiB7ey5Db25maWd9fQogICAgICByZWFkT25seTogdHJ1ZQogIHZvbHVtZXM6CiAgLSBuYW1lOiBjb25maWcKICAgIGhvc3RQYXRoOgogICAgICB0eXBlOiBGaWxlCiAgICAgIHBhdGg6IHt7LkNvbmZpZ319Cg==\"")
	packr.PackJSONBytes("../../templates", "k8s/manifests/kube-apiserver.yaml", "\"YXBpVmVyc2lvbjogdjEKa2luZDogUG9kCm1ldGFkYXRhOgogIG5hbWVzcGFjZToga3ViZS1zeXN0ZW0KICBuYW1lOiBrdWJlLWFwaXNlcnZlcgpzcGVjOgogIGhvc3ROZXR3b3JrOiB0cnVlCiAgY29udGFpbmVyczoKICAtIG5hbWU6IGt1YmUtYXBpc2VydmVyCiAgICBpbWFnZToge3suS3ViZXJuZXRlc0ltYWdlfX0KICAgIGNvbW1hbmQ6CiAgICAtIGt1YmUtYXBpc2VydmVyCiAgICAtIC0tYWR2ZXJ0aXNlLWFkZHJlc3M9e3suTm9kZUlQfX0KICAgIC0gLS1hbGxvdy1wcml2aWxlZ2VkPXRydWUKICAgIC0gLS1hcGlzZXJ2ZXItY291bnQ9e3suQ29udHJvbGxlcnNDb3VudH19CiAgICAtIC0tYXVkaXQtbG9nLW1heGFnZT0zMAogICAgLSAtLWF1ZGl0LWxvZy1tYXhiYWNrdXA9MwogICAgLSAtLWF1ZGl0LWxvZy1tYXhzaXplPTEwMAogICAgLSAtLWF1ZGl0LWxvZy1wYXRoPXt7LkF1ZGl0TG9nfX0KICAgIC0gLS1hdXRob3JpemF0aW9uLW1vZGU9Tm9kZSxSQkFDCiAgICAtIC0tYmluZC1hZGRyZXNzPTAuMC4wLjAKICAgIC0gLS1jbGllbnQtY2EtZmlsZT17ey5QZW1DQX19CiAgICAtIC0tZW5hYmxlLWFkbWlzc2lvbi1wbHVnaW5zPU5hbWVzcGFjZUxpZmVjeWNsZSxOb2RlUmVzdHJpY3Rpb24sTGltaXRSYW5nZXIsU2VydmljZUFjY291bnQsRGVmYXVsdFN0b3JhZ2VDbGFzcyxSZXNvdXJjZVF1b3RhCiAgICAtIC0tZW5hYmxlLWFnZ3JlZ2F0b3Itcm91dGluZz10cnVlCiAgICAtIC0tZW5hYmxlLXN3YWdnZXItdWk9dHJ1ZQogICAgLSAtLWV0Y2QtY2FmaWxlPXt7LlBlbUNBfX0KICAgIC0gLS1ldGNkLWNlcnRmaWxlPXt7LlBlbUt1YmVybmV0ZXN9fQogICAgLSAtLWV0Y2Qta2V5ZmlsZT17ey5QZW1LdWJlcm5ldGVzS2V5fX0KICAgIC0gLS1ldGNkLXNlcnZlcnM9e3suRXRjZFNlcnZlcnN9fQogICAgLSAtLWV2ZW50LXR0bD0xaAogICAgLSAtLWVuY3J5cHRpb24tcHJvdmlkZXItY29uZmlnPXt7LkVuY3J5cHRpb25Db25maWd9fQogICAgLSAtLWZlYXR1cmUtZ2F0ZXM9Q1NJQmxvY2tWb2x1bWU9dHJ1ZSxCbG9ja1ZvbHVtZT10cnVlLFZvbHVtZVNuYXBzaG90RGF0YVNvdXJjZT10cnVlCiAgICAtIC0ta3ViZWxldC1jZXJ0aWZpY2F0ZS1hdXRob3JpdHk9e3suUGVtQ0F9fQogICAgLSAtLWt1YmVsZXQtY2xpZW50LWNlcnRpZmljYXRlPXt7LlBlbUt1YmVybmV0ZXN9fQogICAgLSAtLWt1YmVsZXQtY2xpZW50LWtleT17ey5QZW1LdWJlcm5ldGVzS2V5fX0KICAgIC0gLS1rdWJlbGV0LWh0dHBzPXRydWUKICAgIC0gLS1wcm94eS1jbGllbnQtY2VydC1maWxlPXt7LlBlbUFnZ3JlZ2F0b3J9fQogICAgLSAtLXByb3h5LWNsaWVudC1rZXktZmlsZT17ey5QZW1BZ2dyZWdhdG9yS2V5fX0KICAgIC0gLS1yZXF1ZXN0aGVhZGVyLWFsbG93ZWQtbmFtZXM9YWdncmVnYXRvcixhZG1pbixzeXN0ZW06a3ViZS1jb250cm9sbGVyLW1hbmFnZXIsc3lzdGVtOmt1YmUtY29udHJvbGxlci1tYW5hZ2VyLHN5c3RlbTprdWJlLXNjaGVkdWxlcixzeXN0ZW06bm9kZTpzaW5nbGUtbm9kZQogICAgLSAtLXJlcXVlc3RoZWFkZXItY2xpZW50LWNhLWZpbGU9e3suUGVtQ0F9fQogICAgLSAtLXJlcXVlc3RoZWFkZXItZXh0cmEtaGVhZGVycy1wcmVmaXg9WC1SZW1vdGUtRXh0cmEtCiAgICAtIC0tcmVxdWVzdGhlYWRlci1ncm91cC1oZWFkZXJzPVgtUmVtb3RlLUdyb3VwCiAgICAtIC0tcmVxdWVzdGhlYWRlci11c2VybmFtZS1oZWFkZXJzPVgtUmVtb3RlLVVzZXIKICAgIC0gLS1ydW50aW1lLWNvbmZpZz1hcGkvYWxsPXRydWUKICAgIC0gLS1zZWN1cmUtcG9ydD17ey5BUElTZXJ2ZXJQb3J0fX0KICAgIC0gLS1zZXJ2aWNlLWFjY291bnQta2V5LWZpbGU9e3suUGVtU2VydmljZUFjY291bnR9fQogICAgLSAtLXNlcnZpY2UtY2x1c3Rlci1pcC1yYW5nZT17ey5DbHVzdGVySVBSYW5nZX19CiAgICAtIC0tc2VydmljZS1ub2RlLXBvcnQtcmFuZ2U9MzAwMDAtMzI3NjcKICAgIC0gLS10bHMtY2VydC1maWxlPXt7LlBlbUt1YmVybmV0ZXN9fQogICAgLSAtLXRscy1wcml2YXRlLWtleS1maWxlPXt7LlBlbUt1YmVybmV0ZXNLZXl9fQogICAgbGl2ZW5lc3NQcm9iZToKICAgICAgZmFpbHVyZVRocmVzaG9sZDogOAogICAgICBodHRwR2V0OgogICAgICAgIHNjaGVtZTogSFRUUFMKICAgICAgICBob3N0OiB7ey5Ob2RlSVB9fQogICAgICAgIHBvcnQ6IDY0NDMKICAgICAgICBwYXRoOiAvaGVhbHRoegogICAgICBpbml0aWFsRGVsYXlTZWNvbmRzOiAxNQogICAgICB0aW1lb3V0U2Vjb25kczogMTUKICAgIHJlc291cmNlczoKICAgICAgcmVxdWVzdHM6CiAgICAgICAgY3B1OiAyNTBtCiAgICB2b2x1bWVNb3VudHM6CiAgICAtIG5hbWU6IHBlbS1jYQogICAgICBtb3VudFBhdGg6IHt7LlBlbUNBfX0KICAgICAgcmVhZE9ubHk6IHRydWUKICAgIC0gbmFtZTogcGVtLWt1YmVybmV0ZXMKICAgICAgbW91bnRQYXRoOiB7ey5QZW1LdWJlcm5ldGVzfX0KICAgICAgcmVhZE9ubHk6IHRydWUKICAgIC0gbmFtZTogcGVtLWt1YmVybmV0ZXMta2V5CiAgICAgIG1vdW50UGF0aDoge3suUGVtS3ViZXJuZXRlc0tleX19CiAgICAgIHJlYWRPbmx5OiB0cnVlCiAgICAtIG5hbWU6IHBlbS1hZ2dyZWdhdG9yCiAgICAgIG1vdW50UGF0aDoge3suUGVtQWdncmVnYXRvcn19CiAgICAgIHJlYWRPbmx5OiB0cnVlCiAgICAtIG5hbWU6IHBlbS1hZ2dyZWdhdG9yLWtleQogICAgICBtb3VudFBhdGg6IHt7LlBlbUFnZ3JlZ2F0b3JLZXl9fQogICAgICByZWFkT25seTogdHJ1ZQogICAgLSBuYW1lOiBwZW0tc2VydmljZS1hY2NvdW50CiAgICAgIG1vdW50UGF0aDoge3suUGVtU2VydmljZUFjY291bnR9fQogICAgICByZWFkT25seTogdHJ1ZQogICAgLSBuYW1lOiBlbmNyeXB0aW9uLWNvbmZpZwogICAgICBtb3VudFBhdGg6IHt7LkVuY3J5cHRpb25Db25maWd9fQogICAgICByZWFkT25seTogdHJ1ZQogICAgLSBuYW1lOiBhdWRpdC1sb2cKICAgICAgbW91bnRQYXRoOiB7ey5BdWRpdExvZ319CiAgdm9sdW1lczoKICAtIG5hbWU6IHBlbS1jYQogICAgaG9zdFBhdGg6CiAgICAgIHR5cGU6IEZpbGUKICAgICAgcGF0aDoge3suUGVtQ0F9fQogIC0gbmFtZTogcGVtLWt1YmVybmV0ZXMKICAgIGhvc3RQYXRoOgogICAgICB0eXBlOiBGaWxlCiAgICAgIHBhdGg6IHt7LlBlbUt1YmVybmV0ZXN9fQogIC0gbmFtZTogcGVtLWt1YmVybmV0ZXMta2V5CiAgICBob3N0UGF0aDoKICAgICAgdHlwZTogRmlsZQogICAgICBwYXRoOiB7ey5QZW1LdWJlcm5ldGVzS2V5fX0KICAtIG5hbWU6IHBlbS1hZ2dyZWdhdG9yCiAgICBob3N0UGF0aDoKICAgICAgdHlwZTogRmlsZQogICAgICBwYXRoOiB7ey5QZW1BZ2dyZWdhdG9yfX0KICAtIG5hbWU6IHBlbS1hZ2dyZWdhdG9yLWtleQogICAgaG9zdFBhdGg6CiAgICAgIHR5cGU6IEZpbGUKICAgICAgcGF0aDoge3suUGVtQWdncmVnYXRvcktleX19CiAgLSBuYW1lOiBwZW0tc2VydmljZS1hY2NvdW50CiAgICBob3N0UGF0aDoKICAgICAgdHlwZTogRmlsZQogICAgICBwYXRoOiB7ey5QZW1TZXJ2aWNlQWNjb3VudH19CiAgLSBuYW1lOiBlbmNyeXB0aW9uLWNvbmZpZwogICAgaG9zdFBhdGg6CiAgICAgIHR5cGU6IEZpbGUKICAgICAgcGF0aDoge3suRW5jcnlwdGlvbkNvbmZpZ319CiAgLSBuYW1lOiBhdWRpdC1sb2cKICAgIGhvc3RQYXRoOgogICAgICB0eXBlOiBGaWxlT3JDcmVhdGUKICAgICAgcGF0aDoge3suQXVkaXRMb2d9fQo=\"")
	packr.PackJSONBytes("../../templates", "k8s/manifests/kube-controller-manager.yaml", "\"YXBpVmVyc2lvbjogdjEKa2luZDogUG9kCm1ldGFkYXRhOgogIG5hbWVzcGFjZToga3ViZS1zeXN0ZW0KICBuYW1lOiBrdWJlLWNvbnRyb2xsZXItbWFuYWdlcgpzcGVjOgogIGhvc3ROZXR3b3JrOiB0cnVlCiAgY29udGFpbmVyczoKICAtIG5hbWU6IGt1YmUtY29udHJvbGxlci1tYW5hZ2VyCiAgICBpbWFnZToge3suS3ViZXJuZXRlc0ltYWdlfX0KICAgIGNvbW1hbmQ6CiAgICAtIGt1YmUtY29udHJvbGxlci1tYW5hZ2VyCiAgICAtIC0tYmluZC1hZGRyZXNzPTAuMC4wLjAKICAgIC0gLS1hbGxvY2F0ZS1ub2RlLWNpZHJzPXRydWUKICAgIC0gLS1jbHVzdGVyLWNpZHI9e3suQ2x1c3RlckNJRFJ9fQogICAgLSAtLWNsdXN0ZXItbmFtZT1rdWJlcm5ldGVzCiAgICAtIC0tY2x1c3Rlci1zaWduaW5nLWNlcnQtZmlsZT17ey5QZW1DQX19CiAgICAtIC0tY2x1c3Rlci1zaWduaW5nLWtleS1maWxlPXt7LlBlbUNBS2V5fX0KICAgIC0gLS1rdWJlY29uZmlnPXt7Lkt1YmVjb25maWd9fQogICAgLSAtLWxlYWRlci1lbGVjdD10cnVlCiAgICAtIC0tcm9vdC1jYS1maWxlPXt7LlBlbUNBfX0KICAgIC0gLS1zZXJ2aWNlLWFjY291bnQtcHJpdmF0ZS1rZXktZmlsZT17ey5QZW1TZXJ2aWNlQWNjb3VudEtleX19CiAgICAtIC0tc2VydmljZS1jbHVzdGVyLWlwLXJhbmdlPXt7LkNsdXN0ZXJJUFJhbmdlfX0KICAgIC0gLS11c2Utc2VydmljZS1hY2NvdW50LWNyZWRlbnRpYWxzPXRydWUKICAgIGxpdmVuZXNzUHJvYmU6CiAgICAgIGZhaWx1cmVUaHJlc2hvbGQ6IDgKICAgICAgaHR0cEdldDoKICAgICAgICBzY2hlbWU6IEhUVFAKICAgICAgICBob3N0OiAxMjcuMC4wLjEKICAgICAgICBwb3J0OiAxMDI1MgogICAgICAgIHBhdGg6IC9oZWFsdGh6CiAgICAgIGluaXRpYWxEZWxheVNlY29uZHM6IDE1CiAgICAgIHRpbWVvdXRTZWNvbmRzOiAxNQogICAgcmVzb3VyY2VzOgogICAgICByZXF1ZXN0czoKICAgICAgICBjcHU6IDIwMG0KICAgIHZvbHVtZU1vdW50czoKICAgIC0gbmFtZTogcGVtLWNhCiAgICAgIG1vdW50UGF0aDoge3suUGVtQ0F9fQogICAgICByZWFkT25seTogdHJ1ZQogICAgLSBuYW1lOiBwZW0tY2Eta2V5CiAgICAgIG1vdW50UGF0aDoge3suUGVtQ0FLZXl9fQogICAgICByZWFkT25seTogdHJ1ZQogICAgLSBuYW1lOiBwZW0tc2VydmljZS1hY2NvdW50LWtleQogICAgICBtb3VudFBhdGg6IHt7LlBlbVNlcnZpY2VBY2NvdW50S2V5fX0KICAgICAgcmVhZE9ubHk6IHRydWUKICAgIC0gbmFtZToga3ViZWNvbmZpZwogICAgICBtb3VudFBhdGg6IHt7Lkt1YmVjb25maWd9fQogICAgICByZWFkT25seTogdHJ1ZQogIHZvbHVtZXM6CiAgLSBuYW1lOiBwZW0tY2EKICAgIGhvc3RQYXRoOgogICAgICB0eXBlOiBGaWxlCiAgICAgIHBhdGg6IHt7LlBlbUNBfX0KICAtIG5hbWU6IHBlbS1jYS1rZXkKICAgIGhvc3RQYXRoOgogICAgICB0eXBlOiBGaWxlCiAgICAgIHBhdGg6IHt7LlBlbUNBS2V5fX0KICAtIG5hbWU6IHBlbS1zZXJ2aWNlLWFjY291bnQta2V5CiAgICBob3N0UGF0aDoKICAgICAgdHlwZTogRmlsZQogICAgICBwYXRoOiB7ey5QZW1TZXJ2aWNlQWNjb3VudEtleX19CiAgLSBuYW1lOiBrdWJlY29uZmlnCiAgICBob3N0UGF0aDoKICAgICAgdHlwZTogRmlsZQogICAgICBwYXRoOiB7ey5LdWJlY29uZmlnfX0K\"")
	packr.PackJSONBytes("../../templates", "k8s/manifests/kube-proxy.yaml", "\"YXBpVmVyc2lvbjogdjEKa2luZDogUG9kCm1ldGFkYXRhOgogIG5hbWVzcGFjZToga3ViZS1zeXN0ZW0KICBuYW1lOiBrdWJlLXByb3h5CnNwZWM6CiAgaG9zdE5ldHdvcms6IHRydWUKICBjb250YWluZXJzOgogIC0gbmFtZToga3ViZS1wcm94eQogICAgaW1hZ2U6IHt7Lkt1YmVybmV0ZXNJbWFnZX19CiAgICBjb21tYW5kOgogICAgLSBrdWJlLXByb3h5CiAgICAtIC0tY29uZmlnPXt7Lkt1YmVQcm94eUNvbmZpZ319CiAgICBzZWN1cml0eUNvbnRleHQ6CiAgICAgICAgcHJpdmlsZWdlZDogdHJ1ZQogICAgbGl2ZW5lc3NQcm9iZToKICAgICAgZmFpbHVyZVRocmVzaG9sZDogOAogICAgICBodHRwR2V0OgogICAgICAgIHNjaGVtZTogSFRUUAogICAgICAgIGhvc3Q6IDEyNy4wLjAuMQogICAgICAgIHBvcnQ6IDEwMjQ5CiAgICAgICAgcGF0aDogL2hlYWx0aHoKICAgICAgaW5pdGlhbERlbGF5U2Vjb25kczogMTUKICAgICAgdGltZW91dFNlY29uZHM6IDE1CiAgICByZXNvdXJjZXM6CiAgICAgIHJlcXVlc3RzOgogICAgICAgIGNwdTogMjAwbQogICAgdm9sdW1lTW91bnRzOgogICAgLSBuYW1lOiBrdWJlLXByb3h5LWNvbmZpZwogICAgICBtb3VudFBhdGg6IHt7Lkt1YmVQcm94eUNvbmZpZ319CiAgICAgIHJlYWRPbmx5OiB0cnVlCiAgICAtIG5hbWU6IGt1YmUtcHJveHkta3ViZWNvbmZpZwogICAgICBtb3VudFBhdGg6IHt7Lkt1YmVQcm94eUt1YmVjb25maWd9fQogICAgICByZWFkT25seTogdHJ1ZQogICAgLSBuYW1lOiBsaWItbW9kdWxlcwogICAgICBtb3VudFBhdGg6IC9saWIvbW9kdWxlcwogICAgICByZWFkT25seTogdHJ1ZQogIHZvbHVtZXM6CiAgLSBuYW1lOiBrdWJlLXByb3h5LWNvbmZpZwogICAgaG9zdFBhdGg6CiAgICAgIHR5cGU6IEZpbGUKICAgICAgcGF0aDoge3suS3ViZVByb3h5Q29uZmlnfX0KICAtIG5hbWU6IGt1YmUtcHJveHkta3ViZWNvbmZpZwogICAgaG9zdFBhdGg6CiAgICAgIHR5cGU6IEZpbGUKICAgICAgcGF0aDoge3suS3ViZVByb3h5S3ViZWNvbmZpZ319CiAgLSBuYW1lOiBsaWItbW9kdWxlcwogICAgaG9zdFBhdGg6CiAgICAgIHR5cGU6IERpcmVjdG9yeQogICAgICBwYXRoOiAvbGliL21vZHVsZXMK\"")
	packr.PackJSONBytes("../../templates", "k8s/manifests/kube-scheduler.yaml", "\"YXBpVmVyc2lvbjogdjEKa2luZDogUG9kCm1ldGFkYXRhOgogIG5hbWVzcGFjZToga3ViZS1zeXN0ZW0KICBuYW1lOiBrdWJlLXNjaGVkdWxlcgpzcGVjOgogIGhvc3ROZXR3b3JrOiB0cnVlCiAgY29udGFpbmVyczoKICAtIG5hbWU6IGt1YmUtc2NoZWR1bGVyCiAgICBpbWFnZToge3suS3ViZXJuZXRlc0ltYWdlfX0KICAgIGNvbW1hbmQ6CiAgICAtIGt1YmUtc2NoZWR1bGVyCiAgICAtIC0tY29uZmlnPXt7Lkt1YmVTY2hlZHVsZXJDb25maWd9fQogICAgbGl2ZW5lc3NQcm9iZToKICAgICAgZmFpbHVyZVRocmVzaG9sZDogOAogICAgICBodHRwR2V0OgogICAgICAgIHNjaGVtZTogSFRUUAogICAgICAgIGhvc3Q6IDEyNy4wLjAuMQogICAgICAgIHBvcnQ6IDEwMjUxCiAgICAgICAgcGF0aDogL2hlYWx0aHoKICAgICAgaW5pdGlhbERlbGF5U2Vjb25kczogMTUKICAgICAgdGltZW91dFNlY29uZHM6IDE1CiAgICByZXNvdXJjZXM6CiAgICAgIHJlcXVlc3RzOgogICAgICAgIGNwdTogMTAwbQogICAgdm9sdW1lTW91bnRzOgogICAgLSBuYW1lOiBrdWJlLXNjaGVkdWxlci1jb25maWcKICAgICAgbW91bnRQYXRoOiB7ey5LdWJlU2NoZWR1bGVyQ29uZmlnfX0KICAgICAgcmVhZE9ubHk6IHRydWUKICAgIC0gbmFtZToga3ViZS1zY2hlZHVsZXIta3ViZWNvbmZpZwogICAgICBtb3VudFBhdGg6IHt7Lkt1YmVTY2hlZHVsZXJLdWJlY29uZmlnfX0KICAgICAgcmVhZE9ubHk6IHRydWUKICB2b2x1bWVzOgogIC0gbmFtZToga3ViZS1zY2hlZHVsZXItY29uZmlnCiAgICBob3N0UGF0aDoKICAgICAgdHlwZTogRmlsZQogICAgICBwYXRoOiB7ey5LdWJlU2NoZWR1bGVyQ29uZmlnfX0KICAtIG5hbWU6IGt1YmUtc2NoZWR1bGVyLWt1YmVjb25maWcKICAgIGhvc3RQYXRoOgogICAgICB0eXBlOiBGaWxlCiAgICAgIHBhdGg6IHt7Lkt1YmVTY2hlZHVsZXJLdWJlY29uZmlnfX0K\"")
	packr.PackJSONBytes("../../templates", "k8s/manifests/virtual-ip.yaml", "\"YXBpVmVyc2lvbjogdjEKa2luZDogUG9kCm1ldGFkYXRhOgogIG5hbWVzcGFjZToga3ViZS1zeXN0ZW0KICBuYW1lOiB7ey5UeXBlfX0tdmlydHVhbC1pcApzcGVjOgogIGhvc3ROZXR3b3JrOiB0cnVlCiAgY29udGFpbmVyczoKICAtIG5hbWU6IHZpcnR1YWwtaXAKICAgIGltYWdlOiB7ey5WaXJ0dWFsSVBJbWFnZX19CiAgICBjb21tYW5kOgogICAgLSAvdmlydHVhbC1pcAogICAgLSAtaWQgCiAgICAtIHt7LklEfX0KICAgIC0gLWJpbmQgCiAgICAtIHt7LkJpbmR9fQogICAgLSAtcGVlcnMgCiAgICAtIHt7LlBlZXJzfX0KICAgIC0gLWludGVyZmFjZSAKICAgIC0ge3suSW50ZXJmYWNlfX0KICAgIC0gLXZpcnR1YWwtaXAgCiAgICAtIHt7LlZpcnR1YWxJUH19CiAgICBzZWN1cml0eUNvbnRleHQ6CiAgICAgICAgcHJpdmlsZWdlZDogdHJ1ZQo=\"")
	packr.PackJSONBytes("../../templates", "k8s/service-account.yaml", "\"YXBpVmVyc2lvbjogdjEKa2luZDogU2VydmljZUFjY291bnQKbWV0YWRhdGE6CiAgbmFtZToge3suTmFtZX19CiAgbmFtZXNwYWNlOiB7ey5OYW1lc3BhY2V9fQotLS0KYXBpVmVyc2lvbjogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MQpraW5kOiBDbHVzdGVyUm9sZUJpbmRpbmcKbWV0YWRhdGE6CiAgbmFtZToge3suTmFtZX19CnJvbGVSZWY6CiAgYXBpR3JvdXA6IHJiYWMuYXV0aG9yaXphdGlvbi5rOHMuaW8KICBraW5kOiBDbHVzdGVyUm9sZQogIG5hbWU6IGNsdXN0ZXItYWRtaW4Kc3ViamVjdHM6Ci0ga2luZDogU2VydmljZUFjY291bnQKICBuYW1lOiB7ey5OYW1lfX0KICBuYW1lc3BhY2U6IHt7Lk5hbWVzcGFjZX19Cg==\"")
	packr.PackJSONBytes("../../templates", "k8s/setup/backup/velero.yaml", "\"\"")
	packr.PackJSONBytes("../../templates", "k8s/setup/dns/coredns.yaml", "\"YXBpVmVyc2lvbjogdjEKa2luZDogU2VydmljZUFjY291bnQKbWV0YWRhdGE6CiAgbmFtZTogY29yZWRucwogIG5hbWVzcGFjZToga3ViZS1zeXN0ZW0KLS0tCmFwaVZlcnNpb246IHJiYWMuYXV0aG9yaXphdGlvbi5rOHMuaW8vdjFiZXRhMQpraW5kOiBDbHVzdGVyUm9sZQptZXRhZGF0YToKICBsYWJlbHM6CiAgICBrdWJlcm5ldGVzLmlvL2Jvb3RzdHJhcHBpbmc6IHJiYWMtZGVmYXVsdHMKICBuYW1lOiBzeXN0ZW06Y29yZWRucwpydWxlczoKLSBhcGlHcm91cHM6CiAgLSAiIgogIHJlc291cmNlczoKICAtIGVuZHBvaW50cwogIC0gc2VydmljZXMKICAtIHBvZHMKICAtIG5hbWVzcGFjZXMKICB2ZXJiczoKICAtIGxpc3QKICAtIHdhdGNoCi0tLQphcGlWZXJzaW9uOiByYmFjLmF1dGhvcml6YXRpb24uazhzLmlvL3YxYmV0YTEKa2luZDogQ2x1c3RlclJvbGVCaW5kaW5nCm1ldGFkYXRhOgogIGFubm90YXRpb25zOgogICAgcmJhYy5hdXRob3JpemF0aW9uLmt1YmVybmV0ZXMuaW8vYXV0b3VwZGF0ZTogInRydWUiCiAgbGFiZWxzOgogICAga3ViZXJuZXRlcy5pby9ib290c3RyYXBwaW5nOiByYmFjLWRlZmF1bHRzCiAgbmFtZTogc3lzdGVtOmNvcmVkbnMKcm9sZVJlZjoKICBhcGlHcm91cDogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pbwogIGtpbmQ6IENsdXN0ZXJSb2xlCiAgbmFtZTogc3lzdGVtOmNvcmVkbnMKc3ViamVjdHM6Ci0ga2luZDogU2VydmljZUFjY291bnQKICBuYW1lOiBjb3JlZG5zCiAgbmFtZXNwYWNlOiBrdWJlLXN5c3RlbQotLS0KYXBpVmVyc2lvbjogdjEKa2luZDogQ29uZmlnTWFwCm1ldGFkYXRhOgogIG5hbWU6IGNvcmVkbnMKICBuYW1lc3BhY2U6IGt1YmUtc3lzdGVtCmRhdGE6CiAgQ29yZWZpbGU6IHwKICAgIC46NTMgewogICAgICAgIGVycm9ycwogICAgICAgIGhlYWx0aCB7CiAgICAgICAgICAgIGxhbWVkdWNrIDVzCiAgICAgICAgfQogICAgICAgIHJlYWR5CiAgICAgICAga3ViZXJuZXRlcyB7ey5DbHVzdGVyRG9tYWlufX0gaW4tYWRkci5hcnBhIGlwNi5hcnBhIHsKICAgICAgICAgIHBvZHMgaW5zZWN1cmUKICAgICAgICAgIGZhbGx0aHJvdWdoIGluLWFkZHIuYXJwYSBpcDYuYXJwYQogICAgICAgICAgdHRsIDMwCiAgICAgICAgfQogICAgICAgIHByb21ldGhldXMgOjkxNTMKICAgICAgICBmb3J3YXJkIC4gL2V0Yy9yZXNvbHYuY29uZgogICAgICAgIGNhY2hlIDMwCiAgICAgICAgbG9vcAogICAgICAgIHJlbG9hZAogICAgICAgIGxvYWRiYWxhbmNlCiAgICB9Ci0tLQphcGlWZXJzaW9uOiBhcHBzL3YxCmtpbmQ6IERlcGxveW1lbnQKbWV0YWRhdGE6CiAgbmFtZTogY29yZWRucwogIG5hbWVzcGFjZToga3ViZS1zeXN0ZW0KICBsYWJlbHM6CiAgICBrOHMtYXBwOiBrdWJlLWRucwogICAga3ViZXJuZXRlcy5pby9uYW1lOiAiQ29yZUROUyIKc3BlYzoKICByZXBsaWNhczogMgogIHN0cmF0ZWd5OgogICAgdHlwZTogUm9sbGluZ1VwZGF0ZQogICAgcm9sbGluZ1VwZGF0ZToKICAgICAgbWF4VW5hdmFpbGFibGU6IDEKICBzZWxlY3RvcjoKICAgIG1hdGNoTGFiZWxzOgogICAgICBrOHMtYXBwOiBrdWJlLWRucwogIHRlbXBsYXRlOgogICAgbWV0YWRhdGE6CiAgICAgIGxhYmVsczoKICAgICAgICBrOHMtYXBwOiBrdWJlLWRucwogICAgc3BlYzoKICAgICAgc2VydmljZUFjY291bnROYW1lOiBjb3JlZG5zCiAgICAgIHRvbGVyYXRpb25zOgogICAgICAgIC0ga2V5OiAiQ3JpdGljYWxBZGRvbnNPbmx5IgogICAgICAgICAgb3BlcmF0b3I6ICJFeGlzdHMiCiAgICAgIGNvbnRhaW5lcnM6CiAgICAgIC0gbmFtZTogY29yZWRucwogICAgICAgIGltYWdlOiB7ey5Db3JlRE5TSW1hZ2V9fQogICAgICAgIGFyZ3M6IFsgIi1jb25mIiwgIi9ldGMvY29yZWRucy9Db3JlZmlsZSIgXQogICAgICAgIHZvbHVtZU1vdW50czoKICAgICAgICAtIG5hbWU6IGNvbmZpZy12b2x1bWUKICAgICAgICAgIG1vdW50UGF0aDogL2V0Yy9jb3JlZG5zCiAgICAgICAgICByZWFkT25seTogdHJ1ZQogICAgICAgIHBvcnRzOgogICAgICAgIC0gY29udGFpbmVyUG9ydDogNTMKICAgICAgICAgIG5hbWU6IGRucwogICAgICAgICAgcHJvdG9jb2w6IFVEUAogICAgICAgIC0gY29udGFpbmVyUG9ydDogNTMKICAgICAgICAgIG5hbWU6IGRucy10Y3AKICAgICAgICAgIHByb3RvY29sOiBUQ1AKICAgICAgICAtIGNvbnRhaW5lclBvcnQ6IDkxNTMKICAgICAgICAgIG5hbWU6IG1ldHJpY3MKICAgICAgICAgIHByb3RvY29sOiBUQ1AKICAgICAgICBzZWN1cml0eUNvbnRleHQ6CiAgICAgICAgICBhbGxvd1ByaXZpbGVnZUVzY2FsYXRpb246IGZhbHNlCiAgICAgICAgICBjYXBhYmlsaXRpZXM6CiAgICAgICAgICAgIGFkZDoKICAgICAgICAgICAgLSBORVRfQklORF9TRVJWSUNFCiAgICAgICAgICAgIGRyb3A6CiAgICAgICAgICAgIC0gYWxsCiAgICAgICAgICByZWFkT25seVJvb3RGaWxlc3lzdGVtOiB0cnVlCiAgICAgICAgbGl2ZW5lc3NQcm9iZToKICAgICAgICAgIGh0dHBHZXQ6CiAgICAgICAgICAgIHBhdGg6IC9oZWFsdGgKICAgICAgICAgICAgcG9ydDogODA4MAogICAgICAgICAgICBzY2hlbWU6IEhUVFAKICAgICAgICAgIGluaXRpYWxEZWxheVNlY29uZHM6IDYwCiAgICAgICAgICB0aW1lb3V0U2Vjb25kczogNQogICAgICAgICAgc3VjY2Vzc1RocmVzaG9sZDogMQogICAgICAgICAgZmFpbHVyZVRocmVzaG9sZDogNQogICAgICBkbnNQb2xpY3k6IERlZmF1bHQKICAgICAgdm9sdW1lczoKICAgICAgICAtIG5hbWU6IGNvbmZpZy12b2x1bWUKICAgICAgICAgIGNvbmZpZ01hcDoKICAgICAgICAgICAgbmFtZTogY29yZWRucwogICAgICAgICAgICBpdGVtczoKICAgICAgICAgICAgLSBrZXk6IENvcmVmaWxlCiAgICAgICAgICAgICAgcGF0aDogQ29yZWZpbGUKLS0tCmFwaVZlcnNpb246IHYxCmtpbmQ6IFNlcnZpY2UKbWV0YWRhdGE6CiAgbmFtZToga3ViZS1kbnMKICBuYW1lc3BhY2U6IGt1YmUtc3lzdGVtCiAgYW5ub3RhdGlvbnM6CiAgICBwcm9tZXRoZXVzLmlvL3BvcnQ6ICI5MTUzIgogICAgcHJvbWV0aGV1cy5pby9zY3JhcGU6ICJ0cnVlIgogIGxhYmVsczoKICAgIGs4cy1hcHA6IGt1YmUtZG5zCiAgICBrdWJlcm5ldGVzLmlvL2NsdXN0ZXItc2VydmljZTogInRydWUiCiAgICBrdWJlcm5ldGVzLmlvL25hbWU6ICJDb3JlRE5TIgpzcGVjOgogIHNlbGVjdG9yOgogICAgazhzLWFwcDoga3ViZS1kbnMKICBjbHVzdGVySVA6IHt7LkNsdXN0ZXJETlNJUH19CiAgcG9ydHM6CiAgLSBuYW1lOiBkbnMKICAgIHBvcnQ6IDUzCiAgICBwcm90b2NvbDogVURQCiAgLSBuYW1lOiBkbnMtdGNwCiAgICBwb3J0OiA1MwogICAgcHJvdG9jb2w6IFRDUAo=\"")
	packr.PackJSONBytes("../../templates", "k8s/setup/ingress/letsencrypt-cluster-issuer.yaml", "\"YXBpVmVyc2lvbjogY2VydC1tYW5hZ2VyLmlvL3YxCmtpbmQ6IENsdXN0ZXJJc3N1ZXIKbWV0YWRhdGE6CiAgbmFtZTogbGV0c2VuY3J5cHQtcHJvZHVjdGlvbgpzcGVjOgogIGFjbWU6CiAgICBzZXJ2ZXI6IGh0dHBzOi8vYWNtZS12MDIuYXBpLmxldHNlbmNyeXB0Lm9yZy9kaXJlY3RvcnkKICAgIGVtYWlsOiAie3suRW1haWx9fSIKICAgIHNvbHZlcnM6CiAgICAtIHNlbGVjdG9yOiB7fQogICAgICBodHRwMDE6IAogICAgICAgIGluZ3Jlc3M6CiAgICAgICAgICBjbGFzczogbmdpbngKICAgIHByaXZhdGVLZXlTZWNyZXRSZWY6CiAgICAgIG5hbWU6IGxldHNlbmNyeXB0LXByb2R1Y3Rpb24K\"")
	packr.PackJSONBytes("../../templates", "k8s/setup/kubelet-setup.yaml", "\"YXBpVmVyc2lvbjogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MWJldGExCmtpbmQ6IENsdXN0ZXJSb2xlCm1ldGFkYXRhOgogIGFubm90YXRpb25zOgogICAgcmJhYy5hdXRob3JpemF0aW9uLmt1YmVybmV0ZXMuaW8vYXV0b3VwZGF0ZTogInRydWUiCiAgbGFiZWxzOgogICAga3ViZXJuZXRlcy5pby9ib290c3RyYXBwaW5nOiByYmFjLWRlZmF1bHRzCiAgbmFtZTogc3lzdGVtOmt1YmUtYXBpc2VydmVyLXRvLWt1YmVsZXQKcnVsZXM6CiAgLSBhcGlHcm91cHM6CiAgICAgIC0gIiIKICAgIHJlc291cmNlczoKICAgICAgLSBub2Rlcy9wcm94eQogICAgICAtIG5vZGVzL3N0YXRzCiAgICAgIC0gbm9kZXMvbG9nCiAgICAgIC0gbm9kZXMvc3BlYwogICAgICAtIG5vZGVzL21ldHJpY3MKICAgIHZlcmJzOgogICAgICAtICIqIgotLS0KYXBpVmVyc2lvbjogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MWJldGExCmtpbmQ6IENsdXN0ZXJSb2xlQmluZGluZwptZXRhZGF0YToKICBuYW1lOiBzeXN0ZW06a3ViZS1hcGlzZXJ2ZXIKICBuYW1lc3BhY2U6ICIiCnJvbGVSZWY6CiAgYXBpR3JvdXA6IHJiYWMuYXV0aG9yaXphdGlvbi5rOHMuaW8KICBraW5kOiBDbHVzdGVyUm9sZQogIG5hbWU6IHN5c3RlbTprdWJlLWFwaXNlcnZlci10by1rdWJlbGV0CnN1YmplY3RzOgogIC0gYXBpR3JvdXA6IHJiYWMuYXV0aG9yaXphdGlvbi5rOHMuaW8KICAgIGtpbmQ6IFVzZXIKICAgIG5hbWU6IGt1YmVybmV0ZXMK\"")
	packr.PackJSONBytes("../../templates", "k8s/setup/logging/efk.yaml", "\"\"")
	packr.PackJSONBytes("../../templates", "k8s/setup/management/kubernetes-dashboard.yaml", "\"LS0tCmFwaVZlcnNpb246IHYxCmtpbmQ6IFNlY3JldAptZXRhZGF0YToKICBuYW1lc3BhY2U6IGt1YmUtc3lzdGVtCiAgbmFtZToga3ViZXJuZXRlcy1kYXNoYm9hcmQKICBsYWJlbHM6CiAgICBrOHMtYXBwOiBrdWJlcm5ldGVzLWRhc2hib2FyZAp0eXBlOiBPcGFxdWUKLS0tCmFwaVZlcnNpb246IHYxCmtpbmQ6IFNlY3JldAptZXRhZGF0YToKICBuYW1lc3BhY2U6IGt1YmUtc3lzdGVtCiAgbmFtZToga3ViZXJuZXRlcy1kYXNoYm9hcmQtY2VydHMKICBsYWJlbHM6CiAgICBrOHMtYXBwOiBrdWJlcm5ldGVzLWRhc2hib2FyZAp0eXBlOiBPcGFxdWUKLS0tCmFwaVZlcnNpb246IHYxCmtpbmQ6IFNlY3JldAptZXRhZGF0YToKICBuYW1lc3BhY2U6IGt1YmUtc3lzdGVtCiAgbmFtZToga3ViZXJuZXRlcy1kYXNoYm9hcmQtY3NyZgogIGxhYmVsczoKICAgIGs4cy1hcHA6IGt1YmVybmV0ZXMtZGFzaGJvYXJkCnR5cGU6IE9wYXF1ZQpkYXRhOgogIGNzcmY6ICIiCi0tLQphcGlWZXJzaW9uOiB2MQpraW5kOiBTZWNyZXQKbWV0YWRhdGE6CiAgbmFtZXNwYWNlOiBrdWJlLXN5c3RlbQogIG5hbWU6IGt1YmVybmV0ZXMtZGFzaGJvYXJkLWtleS1ob2xkZXIKICBsYWJlbHM6CiAgICBrOHMtYXBwOiBrdWJlcm5ldGVzLWRhc2hib2FyZAp0eXBlOiBPcGFxdWUKLS0tCmFwaVZlcnNpb246IHYxCmtpbmQ6IFNlcnZpY2VBY2NvdW50Cm1ldGFkYXRhOgogIG5hbWVzcGFjZToga3ViZS1zeXN0ZW0KICBuYW1lOiBrdWJlcm5ldGVzLWRhc2hib2FyZAogIGxhYmVsczoKICAgIGFwcDoga3ViZXJuZXRlcy1kYXNoYm9hcmQKLS0tCmFwaVZlcnNpb246IHJiYWMuYXV0aG9yaXphdGlvbi5rOHMuaW8vdjFiZXRhMQpraW5kOiBSb2xlCm1ldGFkYXRhOgogIG5hbWVzcGFjZToga3ViZS1zeXN0ZW0KICBuYW1lOiBrdWJlcm5ldGVzLWRhc2hib2FyZAogIGxhYmVsczoKICAgIGFwcDoga3ViZXJuZXRlcy1kYXNoYm9hcmQKcnVsZXM6CiAgLSBhcGlHcm91cHM6IFsiIl0KICAgIHJlc291cmNlczogWyJzZWNyZXRzIl0KICAgIHJlc291cmNlTmFtZXM6IFsia3ViZXJuZXRlcy1kYXNoYm9hcmQta2V5LWhvbGRlciIsICJrdWJlcm5ldGVzLWRhc2hib2FyZC1jZXJ0cyIsICJrdWJlcm5ldGVzLWRhc2hib2FyZC1jc3JmIl0KICAgIHZlcmJzOiBbImdldCIsICJ1cGRhdGUiLCAiZGVsZXRlIl0KICAtIGFwaUdyb3VwczogWyIiXQogICAgcmVzb3VyY2VzOiBbImNvbmZpZ21hcHMiXQogICAgcmVzb3VyY2VOYW1lczogWyJrdWJlcm5ldGVzLWRhc2hib2FyZC1zZXR0aW5ncyJdCiAgICB2ZXJiczogWyJnZXQiLCAidXBkYXRlIl0KICAtIGFwaUdyb3VwczogWyIiXQogICAgcmVzb3VyY2VzOiBbInNlcnZpY2VzIl0KICAgIHJlc291cmNlTmFtZXM6IFsiaGVhcHN0ZXIiLCAiZGFzaGJvYXJkLW1ldHJpY3Mtc2NyYXBlciJdCiAgICB2ZXJiczogWyJwcm94eSJdCiAgLSBhcGlHcm91cHM6IFsiIl0KICAgIHJlc291cmNlczogWyJzZXJ2aWNlcy9wcm94eSJdCiAgICByZXNvdXJjZU5hbWVzOiBbImhlYXBzdGVyIiwgImh0dHA6aGVhcHN0ZXI6IiwgImh0dHBzOmhlYXBzdGVyOiIsICJkYXNoYm9hcmQtbWV0cmljcy1zY3JhcGVyIiwgImh0dHA6ZGFzaGJvYXJkLW1ldHJpY3Mtc2NyYXBlciJdCiAgICB2ZXJiczogWyJnZXQiXQotLS0Ka2luZDogQ2x1c3RlclJvbGUKYXBpVmVyc2lvbjogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MQptZXRhZGF0YToKICBuYW1lOiBrdWJlcm5ldGVzLWRhc2hib2FyZAogIGxhYmVsczoKICAgIGs4cy1hcHA6IGt1YmVybmV0ZXMtZGFzaGJvYXJkCnJ1bGVzOgogIC0gYXBpR3JvdXBzOiBbIm1ldHJpY3MuazhzLmlvIl0KICAgIHJlc291cmNlczogWyJwb2RzIiwgIm5vZGVzIl0KICAgIHZlcmJzOiBbImdldCIsICJsaXN0IiwgIndhdGNoIl0KLS0tCmFwaVZlcnNpb246IHJiYWMuYXV0aG9yaXphdGlvbi5rOHMuaW8vdjFiZXRhMQpraW5kOiBSb2xlQmluZGluZwptZXRhZGF0YToKICBuYW1lc3BhY2U6IGt1YmUtc3lzdGVtCiAgbmFtZToga3ViZXJuZXRlcy1kYXNoYm9hcmQKICBsYWJlbHM6CiAgICBhcHA6IGt1YmVybmV0ZXMtZGFzaGJvYXJkCnJvbGVSZWY6CiAgYXBpR3JvdXA6IHJiYWMuYXV0aG9yaXphdGlvbi5rOHMuaW8KICBraW5kOiBSb2xlCiAgbmFtZToga3ViZXJuZXRlcy1kYXNoYm9hcmQKc3ViamVjdHM6CiAgLSBraW5kOiBTZXJ2aWNlQWNjb3VudAogICAgbmFtZXNwYWNlOiBrdWJlLXN5c3RlbQogICAgbmFtZToga3ViZXJuZXRlcy1kYXNoYm9hcmQKLS0tCmFwaVZlcnNpb246IHJiYWMuYXV0aG9yaXphdGlvbi5rOHMuaW8vdjEKa2luZDogQ2x1c3RlclJvbGVCaW5kaW5nCm1ldGFkYXRhOgogIG5hbWVzcGFjZToga3ViZS1zeXN0ZW0KICBuYW1lOiBrdWJlcm5ldGVzLWRhc2hib2FyZApyb2xlUmVmOgogIGFwaUdyb3VwOiByYmFjLmF1dGhvcml6YXRpb24uazhzLmlvCiAga2luZDogQ2x1c3RlclJvbGUKICBuYW1lOiBrdWJlcm5ldGVzLWRhc2hib2FyZApzdWJqZWN0czoKICAtIGtpbmQ6IFNlcnZpY2VBY2NvdW50CiAgICBuYW1lc3BhY2U6IGt1YmUtc3lzdGVtCiAgICBuYW1lOiBrdWJlcm5ldGVzLWRhc2hib2FyZAotLS0KYXBpVmVyc2lvbjogdjEKa2luZDogU2VydmljZQptZXRhZGF0YToKICBuYW1lc3BhY2U6IGt1YmUtc3lzdGVtCiAgbmFtZToga3ViZXJuZXRlcy1kYXNoYm9hcmQKICBsYWJlbHM6CiAgICBhcHA6IGt1YmVybmV0ZXMtZGFzaGJvYXJkCnNwZWM6CiAgdHlwZTogTm9kZVBvcnQKICBwb3J0czoKICAtIHBvcnQ6IDQ0MwogICAgdGFyZ2V0UG9ydDogaHR0cHMKICAgIG5vZGVQb3J0OiB7ey5LdWJlcm5ldGVzRGFzaGJvYXJkUG9ydH19CiAgc2VsZWN0b3I6CiAgICBhcHA6IGt1YmVybmV0ZXMtZGFzaGJvYXJkCi0tLQphcGlWZXJzaW9uOiBhcHBzL3YxCmtpbmQ6IERlcGxveW1lbnQKbWV0YWRhdGE6CiAgbmFtZXNwYWNlOiBrdWJlLXN5c3RlbQogIG5hbWU6IGt1YmVybmV0ZXMtZGFzaGJvYXJkCiAgbGFiZWxzOgogICAgYXBwOiBrdWJlcm5ldGVzLWRhc2hib2FyZApzcGVjOgogIHNlbGVjdG9yOgogICAgbWF0Y2hMYWJlbHM6CiAgICAgIGFwcDoga3ViZXJuZXRlcy1kYXNoYm9hcmQKICByZXBsaWNhczogMQogIHN0cmF0ZWd5OgogICAgcm9sbGluZ1VwZGF0ZToKICAgICAgbWF4U3VyZ2U6IDAKICAgICAgbWF4VW5hdmFpbGFibGU6IDEKICAgIHR5cGU6IFJvbGxpbmdVcGRhdGUKICB0ZW1wbGF0ZToKICAgIG1ldGFkYXRhOgogICAgICBsYWJlbHM6CiAgICAgICAgYXBwOiBrdWJlcm5ldGVzLWRhc2hib2FyZAogICAgc3BlYzoKICAgICAgc2VydmljZUFjY291bnROYW1lOiBrdWJlcm5ldGVzLWRhc2hib2FyZAogICAgICBjb250YWluZXJzOgogICAgICAtIG5hbWU6IGt1YmVybmV0ZXMtZGFzaGJvYXJkCiAgICAgICAgaW1hZ2U6ICJ7ey5LdWJlcm5ldGVzRGFzaGJvYXJkSW1hZ2V9fSIKICAgICAgICBhcmdzOgogICAgICAgICAgLSAtLWF1dG8tZ2VuZXJhdGUtY2VydGlmaWNhdGVzCiAgICAgICAgcG9ydHM6CiAgICAgICAgLSBuYW1lOiBodHRwcwogICAgICAgICAgY29udGFpbmVyUG9ydDogODQ0MwogICAgICAgICAgcHJvdG9jb2w6IFRDUAogICAgICAgIHZvbHVtZU1vdW50czoKICAgICAgICAtIG5hbWU6IGt1YmVybmV0ZXMtZGFzaGJvYXJkLWNlcnRzCiAgICAgICAgICBtb3VudFBhdGg6IC9jZXJ0cwogICAgICAgIC0gbW91bnRQYXRoOiAvdG1wCiAgICAgICAgICBuYW1lOiB0bXAtdm9sdW1lCiAgICAgICAgbGl2ZW5lc3NQcm9iZToKICAgICAgICAgIGh0dHBHZXQ6CiAgICAgICAgICAgIHNjaGVtZTogSFRUUFMKICAgICAgICAgICAgcGF0aDogLwogICAgICAgICAgICBwb3J0OiA4NDQzCiAgICAgICAgICBpbml0aWFsRGVsYXlTZWNvbmRzOiAzMAogICAgICAgICAgdGltZW91dFNlY29uZHM6IDMwCiAgICAgICAgcmVzb3VyY2VzOgogICAgICAgICAgbGltaXRzOgogICAgICAgICAgICBjcHU6IDEwMG0KICAgICAgICAgICAgbWVtb3J5OiA1ME1pCiAgICAgICAgICByZXF1ZXN0czoKICAgICAgICAgICAgY3B1OiAxMDBtCiAgICAgICAgICAgIG1lbW9yeTogNTBNaQogICAgICB2b2x1bWVzOgogICAgICAtIG5hbWU6IGt1YmVybmV0ZXMtZGFzaGJvYXJkLWNlcnRzCiAgICAgICAgc2VjcmV0OgogICAgICAgICAgc2VjcmV0TmFtZToga3ViZXJuZXRlcy1kYXNoYm9hcmQKICAgICAgLSBuYW1lOiB0bXAtdm9sdW1lCiAgICAgICAgZW1wdHlEaXI6IHt9Ci0tLQphcGlWZXJzaW9uOiB2MQpraW5kOiBDb25maWdNYXAKbWV0YWRhdGE6CiAgbmFtZXNwYWNlOiBrdWJlLXN5c3RlbQogIG5hbWU6IGt1YmVybmV0ZXMtZGFzaGJvYXJkLXNldHRpbmdzCmRhdGE6CiAgX2dsb2JhbDogJ3siY2x1c3Rlck5hbWUiOiJ7ey5DbHVzdGVyTmFtZX19IiwiaXRlbXNQZXJQYWdlIjo1MCwiYXV0b1JlZnJlc2hUaW1lSW50ZXJ2YWwiOjV9JwotLS0Ka2luZDogU2VydmljZQphcGlWZXJzaW9uOiB2MQptZXRhZGF0YToKICBuYW1lc3BhY2U6IGt1YmUtc3lzdGVtCiAgbmFtZTogZGFzaGJvYXJkLW1ldHJpY3Mtc2NyYXBlcgogIGxhYmVsczoKICAgIGs4cy1hcHA6IGRhc2hib2FyZC1tZXRyaWNzLXNjcmFwZXIKc3BlYzoKICBwb3J0czoKICAgIC0gcG9ydDogODAwMAogICAgICB0YXJnZXRQb3J0OiA4MDAwCiAgc2VsZWN0b3I6CiAgICBrOHMtYXBwOiBkYXNoYm9hcmQtbWV0cmljcy1zY3JhcGVyCi0tLQpraW5kOiBEZXBsb3ltZW50CmFwaVZlcnNpb246IGFwcHMvdjEKbWV0YWRhdGE6CiAgbmFtZXNwYWNlOiBrdWJlLXN5c3RlbQogIG5hbWU6IGRhc2hib2FyZC1tZXRyaWNzLXNjcmFwZXIKICBsYWJlbHM6CiAgICBrOHMtYXBwOiBkYXNoYm9hcmQtbWV0cmljcy1zY3JhcGVyCnNwZWM6CiAgcmVwbGljYXM6IDEKICByZXZpc2lvbkhpc3RvcnlMaW1pdDogMTAKICBzZWxlY3RvcjoKICAgIG1hdGNoTGFiZWxzOgogICAgICBrOHMtYXBwOiBkYXNoYm9hcmQtbWV0cmljcy1zY3JhcGVyCiAgdGVtcGxhdGU6CiAgICBtZXRhZGF0YToKICAgICAgbGFiZWxzOgogICAgICAgIGs4cy1hcHA6IGRhc2hib2FyZC1tZXRyaWNzLXNjcmFwZXIKICAgIHNwZWM6CiAgICAgIGNvbnRhaW5lcnM6CiAgICAgICAgLSBuYW1lOiBkYXNoYm9hcmQtbWV0cmljcy1zY3JhcGVyCiAgICAgICAgICBpbWFnZToge3sgLk1ldHJpY3NTY3JhcGVySW1hZ2UgfX0KICAgICAgICAgIHBvcnRzOgogICAgICAgICAgICAtIGNvbnRhaW5lclBvcnQ6IDgwMDAKICAgICAgICAgICAgICBwcm90b2NvbDogVENQCiAgICAgICAgICBsaXZlbmVzc1Byb2JlOgogICAgICAgICAgICBodHRwR2V0OgogICAgICAgICAgICAgIHNjaGVtZTogSFRUUAogICAgICAgICAgICAgIHBhdGg6IC8KICAgICAgICAgICAgICBwb3J0OiA4MDAwCiAgICAgICAgICAgIGluaXRpYWxEZWxheVNlY29uZHM6IDMwCiAgICAgICAgICAgIHRpbWVvdXRTZWNvbmRzOiAzMAogICAgICAgICAgdm9sdW1lTW91bnRzOgogICAgICAgICAgLSBtb3VudFBhdGg6IC90bXAKICAgICAgICAgICAgbmFtZTogdG1wLXZvbHVtZQogICAgICBzZXJ2aWNlQWNjb3VudE5hbWU6IGt1YmVybmV0ZXMtZGFzaGJvYXJkCiAgICAgIHZvbHVtZXM6CiAgICAgICAgLSBuYW1lOiB0bXAtdm9sdW1lCiAgICAgICAgICBlbXB0eURpcjoge30K\"")
	packr.PackJSONBytes("../../templates", "k8s/setup/miscellaneous/wordpress.yaml", "\"YXBpVmVyc2lvbjogdjEKa2luZDogTmFtZXNwYWNlCm1ldGFkYXRhOgogICAgbmFtZTogc2hvd2Nhc2UKLS0tCmFwaVZlcnNpb246IHYxCmtpbmQ6IFBlcnNpc3RlbnRWb2x1bWVDbGFpbQptZXRhZGF0YToKICBuYW1lOiBteXNxbC1wdi1jbGFpbQogIG5hbWVzcGFjZTogc2hvd2Nhc2UKICBsYWJlbHM6CiAgICBhcHA6IHdvcmRwcmVzcwpzcGVjOgogIGFjY2Vzc01vZGVzOgogIC0gUmVhZFdyaXRlT25jZQogIHJlc291cmNlczoKICAgIHJlcXVlc3RzOgogICAgICBzdG9yYWdlOiAyR2kKLS0tCmFwaVZlcnNpb246IHYxCmtpbmQ6IFBlcnNpc3RlbnRWb2x1bWVDbGFpbQptZXRhZGF0YToKICBuYW1lOiB3b3JkcHJlc3MtcHYtY2xhaW0KICBuYW1lc3BhY2U6IHNob3djYXNlCiAgbGFiZWxzOgogICAgYXBwOiB3b3JkcHJlc3MKc3BlYzoKICBhY2Nlc3NNb2RlczoKICAtIFJlYWRXcml0ZU9uY2UKICByZXNvdXJjZXM6CiAgICByZXF1ZXN0czoKICAgICAgc3RvcmFnZTogMkdpCi0tLQphcGlWZXJzaW9uOiBhcHBzL3YxCmtpbmQ6IERlcGxveW1lbnQKbWV0YWRhdGE6CiAgbmFtZTogbXlzcWwKICBuYW1lc3BhY2U6IHNob3djYXNlCiAgbGFiZWxzOgogICAgYXBwOiB3b3JkcHJlc3MKc3BlYzoKICBzZWxlY3RvcjoKICAgIG1hdGNoTGFiZWxzOgogICAgICBhcHA6IHdvcmRwcmVzcwogICAgICB0aWVyOiBteXNxbAogIHN0cmF0ZWd5OgogICAgdHlwZTogUmVjcmVhdGUKICB0ZW1wbGF0ZToKICAgIG1ldGFkYXRhOgogICAgICBsYWJlbHM6CiAgICAgICAgYXBwOiB3b3JkcHJlc3MKICAgICAgICB0aWVyOiBteXNxbAogICAgc3BlYzoKICAgICAgY29udGFpbmVyczoKICAgICAgLSBpbWFnZToge3suTXlTUUxJbWFnZX19CiAgICAgICAgbmFtZTogbXlzcWwKICAgICAgICBhcmdzOiAKICAgICAgICAgIC0gLS1kZWZhdWx0LWF1dGhlbnRpY2F0aW9uLXBsdWdpbj1teXNxbF9uYXRpdmVfcGFzc3dvcmQKICAgICAgICBlbnY6CiAgICAgICAgLSBuYW1lOiBNWVNRTF9ST09UX1BBU1NXT1JECiAgICAgICAgICB2YWx1ZTogY2hhbmdlbWUKICAgICAgICBwb3J0czoKICAgICAgICAtIGNvbnRhaW5lclBvcnQ6IDMzMDYKICAgICAgICAgIG5hbWU6IG15c3FsCiAgICAgICAgdm9sdW1lTW91bnRzOgogICAgICAgIC0gbmFtZTogbXlzcWwtcGVyc2lzdGVudC1zdG9yYWdlCiAgICAgICAgICBtb3VudFBhdGg6IC92YXIvbGliL215c3FsCiAgICAgIHZvbHVtZXM6CiAgICAgIC0gbmFtZTogbXlzcWwtcGVyc2lzdGVudC1zdG9yYWdlCiAgICAgICAgcGVyc2lzdGVudFZvbHVtZUNsYWltOgogICAgICAgICAgY2xhaW1OYW1lOiBteXNxbC1wdi1jbGFpbQotLS0KYXBpVmVyc2lvbjogYXBwcy92MQpraW5kOiBEZXBsb3ltZW50Cm1ldGFkYXRhOgogIG5hbWU6IHdvcmRwcmVzcwogIG5hbWVzcGFjZTogc2hvd2Nhc2UKICBsYWJlbHM6CiAgICBhcHA6IHdvcmRwcmVzcwpzcGVjOgogIHNlbGVjdG9yOgogICAgbWF0Y2hMYWJlbHM6CiAgICAgIGFwcDogd29yZHByZXNzCiAgc3RyYXRlZ3k6CiAgICB0eXBlOiBSZWNyZWF0ZQogIHRlbXBsYXRlOgogICAgbWV0YWRhdGE6CiAgICAgIGxhYmVsczoKICAgICAgICBhcHA6IHdvcmRwcmVzcwogICAgICAgIHRpZXI6IGZyb250ZW5kCiAgICBzcGVjOgogICAgICBjb250YWluZXJzOgogICAgICAtIGltYWdlOiB7ey5Xb3JkUHJlc3NJbWFnZX19CiAgICAgICAgbmFtZTogd29yZHByZXNzCiAgICAgICAgZW52OgogICAgICAgIC0gbmFtZTogV09SRFBSRVNTX0RCX0hPU1QKICAgICAgICAgIHZhbHVlOiBteXNxbAogICAgICAgIC0gbmFtZTogV09SRFBSRVNTX0RCX1BBU1NXT1JECiAgICAgICAgICB2YWx1ZTogY2hhbmdlbWUKICAgICAgICBwb3J0czoKICAgICAgICAtIGNvbnRhaW5lclBvcnQ6IDgwCiAgICAgICAgICBuYW1lOiB3b3JkcHJlc3MKICAgICAgICB2b2x1bWVNb3VudHM6CiAgICAgICAgLSBuYW1lOiB3b3JkcHJlc3MtcGVyc2lzdGVudC1zdG9yYWdlCiAgICAgICAgICBtb3VudFBhdGg6IC92YXIvd3d3L2h0bWwKICAgICAgdm9sdW1lczoKICAgICAgLSBuYW1lOiB3b3JkcHJlc3MtcGVyc2lzdGVudC1zdG9yYWdlCiAgICAgICAgcGVyc2lzdGVudFZvbHVtZUNsYWltOgogICAgICAgICAgY2xhaW1OYW1lOiB3b3JkcHJlc3MtcHYtY2xhaW0KLS0tCmFwaVZlcnNpb246IHYxCmtpbmQ6IFNlcnZpY2UKbWV0YWRhdGE6CiAgbmFtZTogbXlzcWwKICBuYW1lc3BhY2U6IHNob3djYXNlCiAgbGFiZWxzOgogICAgYXBwOiB3b3JkcHJlc3MKc3BlYzoKICBwb3J0czoKICAgIC0gcG9ydDogMzMwNgogIHNlbGVjdG9yOgogICAgYXBwOiB3b3JkcHJlc3MKICAgIHRpZXI6IG15c3FsCiAgY2x1c3RlcklQOiBOb25lCi0tLQphcGlWZXJzaW9uOiB2MQpraW5kOiBTZXJ2aWNlCm1ldGFkYXRhOgogIG5hbWU6IHdvcmRwcmVzcwogIG5hbWVzcGFjZTogc2hvd2Nhc2UKICBsYWJlbHM6CiAgICBhcHA6IHdvcmRwcmVzcwpzcGVjOgogIHBvcnRzOgogIC0gcG9ydDogODAKICAgIG5vZGVQb3J0OiB7ey5Xb3JkUHJlc3NQb3J0fX0KICBzZWxlY3RvcjoKICAgIGFwcDogd29yZHByZXNzCiAgICB0aWVyOiBmcm9udGVuZAogIHR5cGU6IE5vZGVQb3J0Ci0tLQphcGlWZXJzaW9uOiBuZXR3b3JraW5nLms4cy5pby92MWJldGExCmtpbmQ6IEluZ3Jlc3MKbWV0YWRhdGE6CiAgbmFtZTogd29yZHByZXNzCiAgbmFtZXNwYWNlOiBzaG93Y2FzZQogIGFubm90YXRpb25zOgogICAgaW5ncmVzcy5rdWJlcm5ldGVzLmlvL3NzbC1yZWRpcmVjdDogInRydWUiCiAgICBrdWJlcm5ldGVzLmlvL3Rscy1hY21lOiAidHJ1ZSIKICAgIGNlcnQtbWFuYWdlci5pby9jbHVzdGVyLWlzc3VlcjogbGV0c2VuY3J5cHQtcHJvZHVjdGlvbgogICAga3ViZXJuZXRlcy5pby9pbmdyZXNzLmNsYXNzOiAibmdpbngiCnNwZWM6CiAgdGxzOgogIC0gaG9zdHM6CiAgICAtIHt7LldvcmRQcmVzc0luZ3Jlc3NEb21haW59fQogICAgc2VjcmV0TmFtZTogd29yZHByZXNzLWxldHNlbmNyeXB0CiAgcnVsZXM6CiAgLSBob3N0OiB7ey5Xb3JkUHJlc3NJbmdyZXNzRG9tYWlufX0KICAgIGh0dHA6CiAgICAgIHBhdGhzOgogICAgICAtIHBhdGg6IC8KICAgICAgICBiYWNrZW5kOgogICAgICAgICAgc2VydmljZU5hbWU6IHdvcmRwcmVzcwogICAgICAgICAgc2VydmljZVBvcnQ6IDgwCg==\"")
	packr.PackJSONBytes("../../templates", "k8s/setup/monitoring/alert-manager.yaml", "\"YXBpVmVyc2lvbjogdjEKa2luZDogU2VydmljZUFjY291bnQKbWV0YWRhdGE6CiAgbmFtZXNwYWNlOiBtb25pdG9yaW5nCiAgbmFtZTogYWxlcnQtbWFuYWdlcgotLS0KYXBpVmVyc2lvbjogdjEKa2luZDogQ29uZmlnTWFwCm1ldGFkYXRhOgogIG5hbWVzcGFjZTogbW9uaXRvcmluZwogIG5hbWU6IGFsZXJ0LW1hbmFnZXItY29uZmlnCiAgbGFiZWxzOgogICAgazhzLWFwcDogYWxlcnQtbWFuYWdlcgpkYXRhOgogIGFsZXJ0LW1hbmFnZXIueW1sOiB8CiAgICBnbG9iYWw6IG51bGwKICAgIHJlY2VpdmVyczoKICAgIC0gbmFtZTogZGVmYXVsdC1yZWNlaXZlcgogICAgcm91dGU6CiAgICAgIGdyb3VwX2ludGVydmFsOiA1bQogICAgICBncm91cF93YWl0OiAxMHMKICAgICAgcmVjZWl2ZXI6IGRlZmF1bHQtcmVjZWl2ZXIKICAgICAgcmVwZWF0X2ludGVydmFsOiAzaAotLS0KYXBpVmVyc2lvbjogdjEKa2luZDogU2VydmljZQptZXRhZGF0YToKICBuYW1lc3BhY2U6IG1vbml0b3JpbmcKICBuYW1lOiBhbGVydC1tYW5hZ2VyLW9wZXJhdGVkCiAgbGFiZWxzOgogICAgazhzLWFwcDogYWxlcnQtbWFuYWdlcgpzcGVjOgogIHR5cGU6ICJDbHVzdGVySVAiCiAgY2x1c3RlcklQOiBOb25lCiAgc2VsZWN0b3I6CiAgICBrOHMtYXBwOiBhbGVydC1tYW5hZ2VyCiAgcG9ydHM6CiAgICAtIG5hbWU6IG1lc2gKICAgICAgcG9ydDogNjc4MwogICAgICBwcm90b2NvbDogVENQCiAgICAgIHRhcmdldFBvcnQ6IDY3ODMKICAgIC0gbmFtZTogaHR0cAogICAgICBwb3J0OiA5MDkzCiAgICAgIHByb3RvY29sOiBUQ1AKICAgICAgdGFyZ2V0UG9ydDogOTA5MwotLS0KYXBpVmVyc2lvbjogdjEKa2luZDogU2VydmljZQptZXRhZGF0YToKICBuYW1lc3BhY2U6IG1vbml0b3JpbmcKICBuYW1lOiBhbGVydC1tYW5hZ2VyCiAgbGFiZWxzOgogICAgazhzLWFwcDogYWxlcnQtbWFuYWdlcgpzcGVjOgogIHBvcnRzOgogICAgLSBuYW1lOiBodHRwCiAgICAgIHBvcnQ6IDkwOTMKICAgICAgcHJvdG9jb2w6IFRDUAogICAgICB0YXJnZXRQb3J0OiA5MDkzCiAgc2VsZWN0b3I6CiAgICBrOHMtYXBwOiBhbGVydC1tYW5hZ2VyCiAgdHlwZTogIkNsdXN0ZXJJUCIKLS0tCmFwaVZlcnNpb246IGFwcHMvdjEKa2luZDogU3RhdGVmdWxTZXQKbWV0YWRhdGE6CiAgbmFtZXNwYWNlOiBtb25pdG9yaW5nCiAgbmFtZTogYWxlcnQtbWFuYWdlcgogIGxhYmVsczogCiAgICBrOHMtYXBwOiBhbGVydC1tYW5hZ2VyCnNwZWM6CiAgc2VydmljZU5hbWU6ICJhbGVydC1tYW5hZ2VyLW9wZXJhdGVkIgogIHJlcGxpY2FzOiB7eyAuQWxlcnRNYW5hZ2VyQ291bnQgfX0gCiAgcG9kTWFuYWdlbWVudFBvbGljeTogT3JkZXJlZFJlYWR5CiAgdXBkYXRlU3RyYXRlZ3k6CiAgICB0eXBlOiBSb2xsaW5nVXBkYXRlCiAgcmV2aXNpb25IaXN0b3J5TGltaXQ6IDEwCiAgc2VsZWN0b3I6CiAgICBtYXRjaExhYmVsczogCiAgICAgIGs4cy1hcHA6IGFsZXJ0LW1hbmFnZXIKICB0ZW1wbGF0ZToKICAgIG1ldGFkYXRhOgogICAgICBsYWJlbHM6CiAgICAgICAgazhzLWFwcDogYWxlcnQtbWFuYWdlcgogICAgc3BlYzoKICAgICAgc2VydmljZUFjY291bnROYW1lOiBhbGVydC1tYW5hZ2VyCiAgICAgIGluaXRDb250YWluZXJzOgogICAgICAgICAgLSBuYW1lOiAiaW5pdC1jaG1vZC1kYXRhIgogICAgICAgICAgICBpbWFnZToge3sgLkJ1c3lib3hJbWFnZSB9fQogICAgICAgICAgICBpbWFnZVB1bGxQb2xpY3k6ICJJZk5vdFByZXNlbnQiCiAgICAgICAgICAgIGNvbW1hbmQ6IFsiY2htb2QiLCAiNzc3IiwgIi9kYXRhIl0KICAgICAgICAgICAgdm9sdW1lTW91bnRzOgogICAgICAgICAgICAtIG5hbWU6IGFsZXJ0LW1hbmFnZXItZGF0YQogICAgICAgICAgICAgIG1vdW50UGF0aDogIi9kYXRhIgogICAgICBjb250YWluZXJzOgogICAgICAgIC0gbmFtZTogYWxlcnQtbWFuYWdlcgogICAgICAgICAgaW1hZ2U6IHt7IC5BbGVydE1hbmFnZXJJbWFnZSB9fQogICAgICAgICAgaW1hZ2VQdWxsUG9saWN5OiBJZk5vdFByZXNlbnQKICAgICAgICAgIGFyZ3M6CiAgICAgICAgICAgIC0gLS1jb25maWcuZmlsZT0vZXRjL2NvbmZpZy9hbGVydC1tYW5hZ2VyLnltbAogICAgICAgICAgICAtIC0tc3RvcmFnZS5wYXRoPS9kYXRhCiAgICAgICAgICAgIC0gLS13ZWIubGlzdGVuLWFkZHJlc3M9OjkwOTMKICAgICAgICAgICAgLSAtLXdlYi5yb3V0ZS1wcmVmaXg9LwogICAgICAgICAgICAtIC0tY2x1c3Rlci5saXN0ZW4tYWRkcmVzcz0kKFBPRF9JUCk6Njc4MwogICAgICAgICAgICB7eyByYW5nZSAkaW5kZXgsICRlbGVtZW50IDo9IC5BbGVydE1hbmFnZXJDb3VudHMgLX19CiAgICAgICAgICAgIC0gLS1jbHVzdGVyLnBlZXI9YWxlcnQtbWFuYWdlci17eyAkZWxlbWVudCB9fS5hbGVydC1tYW5hZ2VyLW9wZXJhdGVkLm1vbml0b3Jpbmcuc3ZjOjY3ODMKICAgICAgICAgICAge3sgZW5kIC19fQogICAgICAgICAgICAtIC0tbG9nLmxldmVsPWRlYnVnCiAgICAgICAgICBlbnY6CiAgICAgICAgICAtIG5hbWU6IFBPRF9JUAogICAgICAgICAgICB2YWx1ZUZyb206CiAgICAgICAgICAgICAgZmllbGRSZWY6CiAgICAgICAgICAgICAgICBhcGlWZXJzaW9uOiB2MQogICAgICAgICAgICAgICAgZmllbGRQYXRoOiBzdGF0dXMucG9kSVAKICAgICAgICAgIHBvcnRzOgogICAgICAgICAgICAtIGNvbnRhaW5lclBvcnQ6IDkwOTMKICAgICAgICAgICAgICBuYW1lOiBodHRwCiAgICAgICAgICAgIC0gY29udGFpbmVyUG9ydDogNjc4MwogICAgICAgICAgICAgIG5hbWU6IG1lc2gKICAgICAgICAgIHJlYWRpbmVzc1Byb2JlOgogICAgICAgICAgICBodHRwR2V0OgogICAgICAgICAgICAgIHBhdGg6IC8jL3N0YXR1cwogICAgICAgICAgICAgIHBvcnQ6IDkwOTMKICAgICAgICAgICAgaW5pdGlhbERlbGF5U2Vjb25kczogMzAKICAgICAgICAgICAgdGltZW91dFNlY29uZHM6IDMwCiAgICAgICAgICB2b2x1bWVNb3VudHM6CiAgICAgICAgICAgIC0gbmFtZTogY29uZmlnLXZvbHVtZQogICAgICAgICAgICAgIG1vdW50UGF0aDogL2V0Yy9jb25maWcKICAgICAgICAgICAgLSBuYW1lOiBhbGVydC1tYW5hZ2VyLWRhdGEKICAgICAgICAgICAgICBtb3VudFBhdGg6ICIvZGF0YSIKICAgICAgICAgIHJlc291cmNlczoKICAgICAgICAgICAgbGltaXRzOgogICAgICAgICAgICAgIGNwdTogMTBtCiAgICAgICAgICAgICAgbWVtb3J5OiA1ME1pCiAgICAgICAgICAgIHJlcXVlc3RzOgogICAgICAgICAgICAgIGNwdTogMTBtCiAgICAgICAgICAgICAgbWVtb3J5OiA1ME1pCiAgICAgIHZvbHVtZXM6CiAgICAgICAgLSBuYW1lOiBjb25maWctdm9sdW1lCiAgICAgICAgICBjb25maWdNYXA6CiAgICAgICAgICAgIG5hbWU6IGFsZXJ0LW1hbmFnZXItY29uZmlnCiAgICAgIGFmZmluaXR5OgogICAgICAgIHBvZEFudGlBZmZpbml0eToKICAgICAgICAgIHJlcXVpcmVkRHVyaW5nU2NoZWR1bGluZ0lnbm9yZWREdXJpbmdFeGVjdXRpb246CiAgICAgICAgICAtIGxhYmVsU2VsZWN0b3I6CiAgICAgICAgICAgICAgbWF0Y2hFeHByZXNzaW9uczoKICAgICAgICAgICAgICAtIGtleTogazhzLWFwcAogICAgICAgICAgICAgICAgb3BlcmF0b3I6IEluCiAgICAgICAgICAgICAgICB2YWx1ZXM6CiAgICAgICAgICAgICAgICAtIGFsZXJ0LW1hbmFnZXIKICAgICAgICAgICAgdG9wb2xvZ3lLZXk6ICJrdWJlcm5ldGVzLmlvL2hvc3RuYW1lIgogIHZvbHVtZUNsYWltVGVtcGxhdGVzOgogIC0gbWV0YWRhdGE6CiAgICAgIG5hbWU6IGFsZXJ0LW1hbmFnZXItZGF0YQogICAgc3BlYzoKICAgICAgYWNjZXNzTW9kZXM6CiAgICAgICAgLSBSZWFkV3JpdGVPbmNlCiAgICAgIHJlc291cmNlczoKICAgICAgICByZXF1ZXN0czoKICAgICAgICAgIHN0b3JhZ2U6ICJ7eyAuQWxlcnRNYW5hZ2VyU2l6ZSB9fUdpIgo=\"")
	packr.PackJSONBytes("../../templates", "k8s/setup/monitoring/grafana-dashboards.yaml", "\"\"")
	packr.PackJSONBytes("../../templates", "k8s/setup/monitoring/grafana.yaml", "\"\"")
	packr.PackJSONBytes("../../templates", "k8s/setup/monitoring/kube-state-metrics.yaml", "\"LS0tCmFwaVZlcnNpb246IHYxCmtpbmQ6IFNlcnZpY2VBY2NvdW50Cm1ldGFkYXRhOgogIG5hbWVzcGFjZTogbW9uaXRvcmluZwogIG5hbWU6IGt1YmUtc3RhdGUtbWV0cmljcwogIGxhYmVsczoKICAgIGFwcC5rdWJlcm5ldGVzLmlvL25hbWU6IGt1YmUtc3RhdGUtbWV0cmljcwoKLS0tCmFwaVZlcnNpb246IHJiYWMuYXV0aG9yaXphdGlvbi5rOHMuaW8vdjEKa2luZDogQ2x1c3RlclJvbGUKbWV0YWRhdGE6CiAgbGFiZWxzOgogICAgYXBwLmt1YmVybmV0ZXMuaW8vbmFtZToga3ViZS1zdGF0ZS1tZXRyaWNzCiAgbmFtZToga3ViZS1zdGF0ZS1tZXRyaWNzCnJ1bGVzOgotIGFwaUdyb3VwczoKICAtICIiCiAgcmVzb3VyY2VzOgogIC0gY29uZmlnbWFwcwogIC0gc2VjcmV0cwogIC0gbm9kZXMKICAtIHBvZHMKICAtIHNlcnZpY2VzCiAgLSByZXNvdXJjZXF1b3RhcwogIC0gcmVwbGljYXRpb25jb250cm9sbGVycwogIC0gbGltaXRyYW5nZXMKICAtIHBlcnNpc3RlbnR2b2x1bWVjbGFpbXMKICAtIHBlcnNpc3RlbnR2b2x1bWVzCiAgLSBuYW1lc3BhY2VzCiAgLSBlbmRwb2ludHMKICB2ZXJiczoKICAtIGxpc3QKICAtIHdhdGNoCi0gYXBpR3JvdXBzOgogIC0gZXh0ZW5zaW9ucwogIHJlc291cmNlczoKICAtIGRhZW1vbnNldHMKICAtIGRlcGxveW1lbnRzCiAgLSByZXBsaWNhc2V0cwogIC0gaW5ncmVzc2VzCiAgdmVyYnM6CiAgLSBsaXN0CiAgLSB3YXRjaAotIGFwaUdyb3VwczoKICAtIGFwcHMKICByZXNvdXJjZXM6CiAgLSBzdGF0ZWZ1bHNldHMKICAtIGRhZW1vbnNldHMKICAtIGRlcGxveW1lbnRzCiAgLSByZXBsaWNhc2V0cwogIHZlcmJzOgogIC0gbGlzdAogIC0gd2F0Y2gKLSBhcGlHcm91cHM6CiAgLSBiYXRjaAogIHJlc291cmNlczoKICAtIGNyb25qb2JzCiAgLSBqb2JzCiAgdmVyYnM6CiAgLSBsaXN0CiAgLSB3YXRjaAotIGFwaUdyb3VwczoKICAtIGF1dG9zY2FsaW5nCiAgcmVzb3VyY2VzOgogIC0gaG9yaXpvbnRhbHBvZGF1dG9zY2FsZXJzCiAgdmVyYnM6CiAgLSBsaXN0CiAgLSB3YXRjaAotIGFwaUdyb3VwczoKICAtIGF1dGhlbnRpY2F0aW9uLms4cy5pbwogIHJlc291cmNlczoKICAtIHRva2VucmV2aWV3cwogIHZlcmJzOgogIC0gY3JlYXRlCi0gYXBpR3JvdXBzOgogIC0gYXV0aG9yaXphdGlvbi5rOHMuaW8KICByZXNvdXJjZXM6CiAgLSBzdWJqZWN0YWNjZXNzcmV2aWV3cwogIHZlcmJzOgogIC0gY3JlYXRlCi0gYXBpR3JvdXBzOgogIC0gcG9saWN5CiAgcmVzb3VyY2VzOgogIC0gcG9kZGlzcnVwdGlvbmJ1ZGdldHMKICB2ZXJiczoKICAtIGxpc3QKICAtIHdhdGNoCi0gYXBpR3JvdXBzOgogIC0gY2VydGlmaWNhdGVzLms4cy5pbwogIHJlc291cmNlczoKICAtIGNlcnRpZmljYXRlc2lnbmluZ3JlcXVlc3RzCiAgdmVyYnM6CiAgLSBsaXN0CiAgLSB3YXRjaAotIGFwaUdyb3VwczoKICAtIHN0b3JhZ2UuazhzLmlvCiAgcmVzb3VyY2VzOgogIC0gc3RvcmFnZWNsYXNzZXMKICAtIHZvbHVtZWF0dGFjaG1lbnRzCiAgdmVyYnM6CiAgLSBsaXN0CiAgLSB3YXRjaAotIGFwaUdyb3VwczoKICAtIGFkbWlzc2lvbnJlZ2lzdHJhdGlvbi5rOHMuaW8KICByZXNvdXJjZXM6CiAgLSBtdXRhdGluZ3dlYmhvb2tjb25maWd1cmF0aW9ucwogIC0gdmFsaWRhdGluZ3dlYmhvb2tjb25maWd1cmF0aW9ucwogIHZlcmJzOgogIC0gbGlzdAogIC0gd2F0Y2gKLSBhcGlHcm91cHM6CiAgLSBuZXR3b3JraW5nLms4cy5pbwogIHJlc291cmNlczoKICAtIG5ldHdvcmtwb2xpY2llcwogIC0gaW5ncmVzc2VzCiAgdmVyYnM6CiAgLSBsaXN0CiAgLSB3YXRjaAotIGFwaUdyb3VwczoKICAtIGNvb3JkaW5hdGlvbi5rOHMuaW8KICByZXNvdXJjZXM6CiAgLSBsZWFzZXMKICB2ZXJiczoKICAtIGxpc3QKICAtIHdhdGNoCgotLS0KYXBpVmVyc2lvbjogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MQpraW5kOiBDbHVzdGVyUm9sZUJpbmRpbmcKbWV0YWRhdGE6CiAgbGFiZWxzOgogICAgYXBwLmt1YmVybmV0ZXMuaW8vbmFtZToga3ViZS1zdGF0ZS1tZXRyaWNzCiAgbmFtZToga3ViZS1zdGF0ZS1tZXRyaWNzCnJvbGVSZWY6CiAgYXBpR3JvdXA6IHJiYWMuYXV0aG9yaXphdGlvbi5rOHMuaW8KICBraW5kOiBDbHVzdGVyUm9sZQogIG5hbWU6IGt1YmUtc3RhdGUtbWV0cmljcwpzdWJqZWN0czoKLSBraW5kOiBTZXJ2aWNlQWNjb3VudAogIG5hbWVzcGFjZTogbW9uaXRvcmluZwogIG5hbWU6IGt1YmUtc3RhdGUtbWV0cmljcwoKLS0tCmFwaVZlcnNpb246IGFwcHMvdjEKa2luZDogRGVwbG95bWVudAptZXRhZGF0YToKICBuYW1lc3BhY2U6IG1vbml0b3JpbmcKICBuYW1lOiBrdWJlLXN0YXRlLW1ldHJpY3MKICBsYWJlbHM6CiAgICBhcHAua3ViZXJuZXRlcy5pby9uYW1lOiBrdWJlLXN0YXRlLW1ldHJpY3MKc3BlYzoKICBzZWxlY3RvcjoKICAgIG1hdGNoTGFiZWxzOgogICAgICBhcHAua3ViZXJuZXRlcy5pby9uYW1lOiBrdWJlLXN0YXRlLW1ldHJpY3MKICByZXBsaWNhczoge3sgLkt1YmVTdGF0ZU1ldHJpY3NDb3VudCB9fQogIHRlbXBsYXRlOgogICAgbWV0YWRhdGE6CiAgICAgIGxhYmVsczoKICAgICAgICBhcHAua3ViZXJuZXRlcy5pby9uYW1lOiBrdWJlLXN0YXRlLW1ldHJpY3MKICAgIHNwZWM6CiAgICAgIHNlcnZpY2VBY2NvdW50TmFtZToga3ViZS1zdGF0ZS1tZXRyaWNzCiAgICAgIGNvbnRhaW5lcnM6CiAgICAgIC0gbmFtZToga3ViZS1zdGF0ZS1tZXRyaWNzCiAgICAgICAgaW1hZ2U6IHt7IC5LdWJlU3RhdGVNZXRyaWNzSW1hZ2UgfX0gCiAgICAgICAgbGl2ZW5lc3NQcm9iZToKICAgICAgICAgIGh0dHBHZXQ6CiAgICAgICAgICAgIHBhdGg6IC9oZWFsdGh6CiAgICAgICAgICAgIHBvcnQ6IDgwODAKICAgICAgICAgIGluaXRpYWxEZWxheVNlY29uZHM6IDUKICAgICAgICAgIHRpbWVvdXRTZWNvbmRzOiA1CiAgICAgICAgcG9ydHM6CiAgICAgICAgLSBjb250YWluZXJQb3J0OiA4MDgwCiAgICAgICAgICBuYW1lOiBodHRwLW1ldHJpY3MKICAgICAgICAtIGNvbnRhaW5lclBvcnQ6IDgwODEKICAgICAgICAgIG5hbWU6IHRlbGVtZXRyeQogICAgICAgIHJlYWRpbmVzc1Byb2JlOgogICAgICAgICAgaHR0cEdldDoKICAgICAgICAgICAgcGF0aDogLwogICAgICAgICAgICBwb3J0OiA4MDgxCiAgICAgICAgICBpbml0aWFsRGVsYXlTZWNvbmRzOiA1CiAgICAgICAgICB0aW1lb3V0U2Vjb25kczogNQogICAgICAgIHNlY3VyaXR5Q29udGV4dDoKICAgICAgICAgIHJ1bkFzVXNlcjogNjU1MzQKICAgICAgbm9kZVNlbGVjdG9yOgogICAgICAgIGt1YmVybmV0ZXMuaW8vb3M6IGxpbnV4CiAgICAgIHNlcnZpY2VBY2NvdW50TmFtZToga3ViZS1zdGF0ZS1tZXRyaWNzCgotLS0KYXBpVmVyc2lvbjogdjEKa2luZDogU2VydmljZQptZXRhZGF0YToKICBuYW1lc3BhY2U6IG1vbml0b3JpbmcKICBuYW1lOiBrdWJlLXN0YXRlLW1ldHJpY3MKICBsYWJlbHM6CiAgICBhcHAua3ViZXJuZXRlcy5pby9uYW1lOiBrdWJlLXN0YXRlLW1ldHJpY3MKc3BlYzoKICBwb3J0czoKICAtIG5hbWU6IGh0dHAtbWV0cmljcwogICAgcG9ydDogODA4MAogICAgdGFyZ2V0UG9ydDogaHR0cC1tZXRyaWNzCiAgLSBuYW1lOiB0ZWxlbWV0cnkKICAgIHBvcnQ6IDgwODEKICAgIHRhcmdldFBvcnQ6IHRlbGVtZXRyeQogIHNlbGVjdG9yOgogICAgYXBwLmt1YmVybmV0ZXMuaW8vbmFtZToga3ViZS1zdGF0ZS1tZXRyaWNzCg==\"")
	packr.PackJSONBytes("../../templates", "k8s/setup/monitoring/metrics-server.yaml", "\"YXBpVmVyc2lvbjogdjEKa2luZDogTmFtZXNwYWNlCm1ldGFkYXRhOgogIG5hbWU6IG1vbml0b3JpbmcKLS0tCmFwaVZlcnNpb246IHYxCmtpbmQ6IFNlcnZpY2VBY2NvdW50Cm1ldGFkYXRhOgogIG5hbWVzcGFjZTogbW9uaXRvcmluZwogIG5hbWU6IG1ldHJpY3Mtc2VydmVyCi0tLQphcGlWZXJzaW9uOiByYmFjLmF1dGhvcml6YXRpb24uazhzLmlvL3YxCmtpbmQ6IENsdXN0ZXJSb2xlCm1ldGFkYXRhOgogIG5hbWU6IHN5c3RlbTptZXRyaWNzLXNlcnZlcgpydWxlczoKLSBhcGlHcm91cHM6CiAgLSAiIgogIHJlc291cmNlczoKICAtIHBvZHMKICAtIG5vZGVzCiAgLSBub2Rlcy9zdGF0cwogIHZlcmJzOgogIC0gZ2V0CiAgLSBsaXN0CiAgLSB3YXRjaAotLS0KYXBpVmVyc2lvbjogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MQpraW5kOiBDbHVzdGVyUm9sZUJpbmRpbmcKbWV0YWRhdGE6CiAgbmFtZTogbWV0cmljcy1zZXJ2ZXI6c3lzdGVtOmF1dGgtZGVsZWdhdG9yCiAgbmFtZXNwYWNlOiBtb25pdG9yaW5nCnJvbGVSZWY6CiAgYXBpR3JvdXA6IHJiYWMuYXV0aG9yaXphdGlvbi5rOHMuaW8KICBraW5kOiBDbHVzdGVyUm9sZQogIG5hbWU6IHN5c3RlbTphdXRoLWRlbGVnYXRvcgpzdWJqZWN0czoKICAtIGtpbmQ6IFNlcnZpY2VBY2NvdW50CiAgICBuYW1lc3BhY2U6IG1vbml0b3JpbmcKICAgIG5hbWU6IG1ldHJpY3Mtc2VydmVyCi0tLQphcGlWZXJzaW9uOiByYmFjLmF1dGhvcml6YXRpb24uazhzLmlvL3YxCmtpbmQ6IENsdXN0ZXJSb2xlQmluZGluZwptZXRhZGF0YToKICBuYW1lOiBzeXN0ZW06bWV0cmljcy1zZXJ2ZXIKcm9sZVJlZjoKICBhcGlHcm91cDogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pbwogIGtpbmQ6IENsdXN0ZXJSb2xlCiAgbmFtZTogc3lzdGVtOm1ldHJpY3Mtc2VydmVyCnN1YmplY3RzOgogIC0ga2luZDogU2VydmljZUFjY291bnQKICAgIG5hbWU6IG1ldHJpY3Mtc2VydmVyCiAgICBuYW1lc3BhY2U6IG1vbml0b3JpbmcKLS0tCmtpbmQ6IENsdXN0ZXJSb2xlCmFwaVZlcnNpb246IHJiYWMuYXV0aG9yaXphdGlvbi5rOHMuaW8vdjEKbWV0YWRhdGE6CiAgbmFtZTogc3lzdGVtOmFnZ3JlZ2F0ZWQtbWV0cmljcy1yZWFkZXIKICBsYWJlbHM6CiAgICByYmFjLmF1dGhvcml6YXRpb24uazhzLmlvL2FnZ3JlZ2F0ZS10by12aWV3OiAidHJ1ZSIKICAgIHJiYWMuYXV0aG9yaXphdGlvbi5rOHMuaW8vYWdncmVnYXRlLXRvLWVkaXQ6ICJ0cnVlIgogICAgcmJhYy5hdXRob3JpemF0aW9uLms4cy5pby9hZ2dyZWdhdGUtdG8tYWRtaW46ICJ0cnVlIgpydWxlczoKLSBhcGlHcm91cHM6IFsibWV0cmljcy5rOHMuaW8iXQogIHJlc291cmNlczogWyJwb2RzIl0KICB2ZXJiczogWyJnZXQiLCAibGlzdCIsICJ3YXRjaCJdCi0tLQphcGlWZXJzaW9uOiByYmFjLmF1dGhvcml6YXRpb24uazhzLmlvL3YxYmV0YTEKa2luZDogUm9sZUJpbmRpbmcKbWV0YWRhdGE6CiAgbmFtZTogbWV0cmljcy1zZXJ2ZXItYXV0aC1yZWFkZXIKICBuYW1lc3BhY2U6IGt1YmUtc3lzdGVtCnJvbGVSZWY6CiAgYXBpR3JvdXA6IHJiYWMuYXV0aG9yaXphdGlvbi5rOHMuaW8KICBraW5kOiBSb2xlCiAgbmFtZTogZXh0ZW5zaW9uLWFwaXNlcnZlci1hdXRoZW50aWNhdGlvbi1yZWFkZXIKc3ViamVjdHM6CiAgLSBraW5kOiBTZXJ2aWNlQWNjb3VudAogICAgbmFtZTogbWV0cmljcy1zZXJ2ZXIKICAgIG5hbWVzcGFjZTogbW9uaXRvcmluZwotLS0KYXBpVmVyc2lvbjogdjEKa2luZDogU2VydmljZQptZXRhZGF0YToKICBuYW1lc3BhY2U6IG1vbml0b3JpbmcKICBuYW1lOiBtZXRyaWNzLXNlcnZlcgogIGxhYmVsczoKICAgIGt1YmVybmV0ZXMuaW8vbmFtZTogIk1ldHJpY3Mtc2VydmVyIgpzcGVjOgogIHNlbGVjdG9yOgogICAgYXBwOiBtZXRyaWNzLXNlcnZlcgogIHBvcnRzOgogICAgLSBwb3J0OiA0NDMKICAgICAgcHJvdG9jb2w6IFRDUAogICAgICB0YXJnZXRQb3J0OiA0NDMKLS0tCmFwaVZlcnNpb246IGFwcHMvdjEKa2luZDogRGVwbG95bWVudAptZXRhZGF0YToKICBuYW1lc3BhY2U6IG1vbml0b3JpbmcKICBuYW1lOiBtZXRyaWNzLXNlcnZlcgogIGxhYmVsczoKICAgIGFwcDogbWV0cmljcy1zZXJ2ZXIKc3BlYzoKICBzZWxlY3RvcjoKICAgIG1hdGNoTGFiZWxzOgogICAgICBhcHA6IG1ldHJpY3Mtc2VydmVyCiAgdGVtcGxhdGU6CiAgICBtZXRhZGF0YToKICAgICAgbmFtZTogbWV0cmljcy1zZXJ2ZXIKICAgICAgbGFiZWxzOgogICAgICAgIGFwcDogbWV0cmljcy1zZXJ2ZXIKICAgIHNwZWM6CiAgICAgIHNlcnZpY2VBY2NvdW50TmFtZTogbWV0cmljcy1zZXJ2ZXIKICAgICAgdm9sdW1lczoKICAgICAgLSBuYW1lOiB0bXAtZGlyCiAgICAgICAgZW1wdHlEaXI6IHt9CiAgICAgIGNvbnRhaW5lcnM6CiAgICAgIC0gbmFtZTogbWV0cmljcy1zZXJ2ZXIKICAgICAgICBpbWFnZToge3sgLk1ldHJpY3NTZXJ2ZXJJbWFnZSB9fQogICAgICAgIGFyZ3M6CiAgICAgICAgLSAtLWt1YmVsZXQtcHJlZmVycmVkLWFkZHJlc3MtdHlwZXM9SW50ZXJuYWxJUAogICAgICAgIC0gLS1rdWJlbGV0LWluc2VjdXJlLXRscwogICAgICAgIC0gLS12PTEwCiAgICAgICAgdm9sdW1lTW91bnRzOgogICAgICAgIC0gbmFtZTogdG1wLWRpcgogICAgICAgICAgbW91bnRQYXRoOiAvdG1wCi0tLQphcGlWZXJzaW9uOiBhcGlyZWdpc3RyYXRpb24uazhzLmlvL3YxYmV0YTEKa2luZDogQVBJU2VydmljZQptZXRhZGF0YToKICBuYW1lc3BhY2U6IG1vbml0b3JpbmcKICBuYW1lOiB2MWJldGExLm1ldHJpY3MuazhzLmlvCnNwZWM6CiAgc2VydmljZToKICAgIG5hbWVzcGFjZTogbW9uaXRvcmluZwogICAgbmFtZTogbWV0cmljcy1zZXJ2ZXIKICBncm91cDogbWV0cmljcy5rOHMuaW8KICB2ZXJzaW9uOiB2MWJldGExCiAgaW5zZWN1cmVTa2lwVExTVmVyaWZ5OiB0cnVlCiAgZ3JvdXBQcmlvcml0eU1pbmltdW06IDEwMAogIHZlcnNpb25Qcmlvcml0eTogMTAwCg==\"")
	packr.PackJSONBytes("../../templates", "k8s/setup/monitoring/node-exporter.yaml", "\"LS0tCmFwaVZlcnNpb246IHBvbGljeS92MWJldGExCmtpbmQ6IFBvZFNlY3VyaXR5UG9saWN5Cm1ldGFkYXRhOgogIG5hbWU6IG5vZGUtZXhwb3J0ZXIKICBuYW1lc3BhY2U6IG1vbml0b3JpbmcKICBsYWJlbHM6ICAgICAKICAgIGFwcDogbm9kZS1leHBvcnRlcgpzcGVjOgogIHByaXZpbGVnZWQ6IGZhbHNlCiAgdm9sdW1lczoKICAgIC0gJ2NvbmZpZ01hcCcKICAgIC0gJ2VtcHR5RGlyJwogICAgLSAncHJvamVjdGVkJwogICAgLSAnc2VjcmV0JwogICAgLSAnZG93bndhcmRBUEknCiAgICAtICdwZXJzaXN0ZW50Vm9sdW1lQ2xhaW0nCiAgICAtICdob3N0UGF0aCcKICBob3N0TmV0d29yazogdHJ1ZQogIGhvc3RJUEM6IGZhbHNlCiAgaG9zdFBJRDogdHJ1ZQogIGhvc3RQb3J0czoKICAgIC0gbWluOiAwCiAgICAgIG1heDogNjU1MzUKICBydW5Bc1VzZXI6CiAgICBydWxlOiAnUnVuQXNBbnknCiAgc2VMaW51eDoKICAgIHJ1bGU6ICdSdW5Bc0FueScKICBzdXBwbGVtZW50YWxHcm91cHM6CiAgICBydWxlOiAnTXVzdFJ1bkFzJwogICAgcmFuZ2VzOgogICAgICAtIG1pbjogMAogICAgICAgIG1heDogNjU1MzUKICBmc0dyb3VwOgogICAgcnVsZTogJ011c3RSdW5BcycKICAgIHJhbmdlczoKICAgICAgLSBtaW46IDAKICAgICAgICBtYXg6IDY1NTM1CiAgcmVhZE9ubHlSb290RmlsZXN5c3RlbTogZmFsc2UKCi0tLQphcGlWZXJzaW9uOiB2MQpraW5kOiBTZXJ2aWNlQWNjb3VudAptZXRhZGF0YToKICBuYW1lc3BhY2U6IG1vbml0b3JpbmcKICBuYW1lOiBub2RlLWV4cG9ydGVyCiAgbGFiZWxzOgogICAgYXBwOiBub2RlLWV4cG9ydGVyCmltYWdlUHVsbFNlY3JldHM6CiAgW10KCi0tLQpraW5kOiBDbHVzdGVyUm9sZQphcGlWZXJzaW9uOiByYmFjLmF1dGhvcml6YXRpb24uazhzLmlvL3YxCm1ldGFkYXRhOgogIG5hbWU6IG5vZGUtZXhwb3J0ZXIKICBsYWJlbHM6ICAgICAKICAgIGFwcDogbm9kZS1leHBvcnRlcgpydWxlczoKLSBhcGlHcm91cHM6IFsnZXh0ZW5zaW9ucyddCiAgcmVzb3VyY2VzOiBbJ3BvZHNlY3VyaXR5cG9saWNpZXMnXQogIHZlcmJzOiAgICAgWyd1c2UnXQogIHJlc291cmNlTmFtZXM6CiAgLSBwcm9tZXRoZXVzLW5vZGUtZXhwb3J0ZXIKCi0tLQphcGlWZXJzaW9uOiByYmFjLmF1dGhvcml6YXRpb24uazhzLmlvL3YxCmtpbmQ6IENsdXN0ZXJSb2xlQmluZGluZwptZXRhZGF0YToKICBuYW1lOiBub2RlLWV4cG9ydGVyCiAgbGFiZWxzOiAgICAgCiAgICBhcHA6IG5vZGUtZXhwb3J0ZXIKcm9sZVJlZjoKICBhcGlHcm91cDogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pbwogIGtpbmQ6IENsdXN0ZXJSb2xlCiAgbmFtZTogbm9kZS1leHBvcnRlcgpzdWJqZWN0czoKICAtIGtpbmQ6IFNlcnZpY2VBY2NvdW50CiAgICBuYW1lOiBub2RlLWV4cG9ydGVyCiAgICBuYW1lc3BhY2U6IG1vbml0b3JpbmcKCi0tLQphcGlWZXJzaW9uOiB2MQpraW5kOiBTZXJ2aWNlCm1ldGFkYXRhOgogIG5hbWU6IG5vZGUtZXhwb3J0ZXIKICBuYW1lc3BhY2U6IG1vbml0b3JpbmcKICBhbm5vdGF0aW9uczoKICAgIHByb21ldGhldXMuaW8vc2NyYXBlOiAidHJ1ZSIKICBsYWJlbHM6ICAgICAKICAgIGFwcDogbm9kZS1leHBvcnRlcgpzcGVjOgogIHR5cGU6IENsdXN0ZXJJUAogIHBvcnRzOgogICAgLSBwb3J0OiA5MTAwCiAgICAgIHRhcmdldFBvcnQ6IDkxMDAKICAgICAgcHJvdG9jb2w6IFRDUAogICAgICBuYW1lOiBtZXRyaWNzCiAgc2VsZWN0b3I6CiAgICBhcHA6IG5vZGUtZXhwb3J0ZXIKCi0tLQphcGlWZXJzaW9uOiBhcHBzL3YxCmtpbmQ6IERhZW1vblNldAptZXRhZGF0YToKICBuYW1lc3BhY2U6IG1vbml0b3JpbmcKICBuYW1lOiBub2RlLWV4cG9ydGVyCiAgbGFiZWxzOgogICAgYXBwOiBub2RlLWV4cG9ydGVyCnNwZWM6CiAgc2VsZWN0b3I6CiAgICBtYXRjaExhYmVsczoKICAgICAgYXBwOiBub2RlLWV4cG9ydGVyCiAgdXBkYXRlU3RyYXRlZ3k6CiAgICByb2xsaW5nVXBkYXRlOgogICAgICBtYXhVbmF2YWlsYWJsZTogMQogICAgdHlwZTogUm9sbGluZ1VwZGF0ZQogIHRlbXBsYXRlOgogICAgbWV0YWRhdGE6CiAgICAgIGxhYmVsczoKICAgICAgICBhcHA6IG5vZGUtZXhwb3J0ZXIKICAgIHNwZWM6CiAgICAgIHNlcnZpY2VBY2NvdW50TmFtZTogbm9kZS1leHBvcnRlcgogICAgICBzZWN1cml0eUNvbnRleHQ6CiAgICAgICAgZnNHcm91cDogNjU1MzQKICAgICAgICBydW5Bc0dyb3VwOiA2NTUzNAogICAgICAgIHJ1bkFzTm9uUm9vdDogdHJ1ZQogICAgICAgIHJ1bkFzVXNlcjogNjU1MzQKICAgICAgY29udGFpbmVyczoKICAgICAgICAtIG5hbWU6IG5vZGUtZXhwb3J0ZXIKICAgICAgICAgIGltYWdlOiB7eyAuTm9kZUV4cG9ydGVySW1hZ2UgfX0gCiAgICAgICAgICBpbWFnZVB1bGxQb2xpY3k6IElmTm90UHJlc2VudAogICAgICAgICAgYXJnczoKICAgICAgICAgICAgLSAtLXBhdGgucHJvY2ZzPS9ob3N0L3Byb2MKICAgICAgICAgICAgLSAtLXBhdGguc3lzZnM9L2hvc3Qvc3lzCiAgICAgICAgICAgIC0gLS13ZWIubGlzdGVuLWFkZHJlc3M9JChIT1NUX0lQKTo5MTAwCiAgICAgICAgICBlbnY6CiAgICAgICAgICAtIG5hbWU6IEhPU1RfSVAKICAgICAgICAgICAgdmFsdWU6IDAuMC4wLjAKICAgICAgICAgIHBvcnRzOgogICAgICAgICAgICAtIG5hbWU6IG1ldHJpY3MKICAgICAgICAgICAgICBjb250YWluZXJQb3J0OiA5MTAwCiAgICAgICAgICAgICAgcHJvdG9jb2w6IFRDUAogICAgICAgICAgbGl2ZW5lc3NQcm9iZToKICAgICAgICAgICAgaHR0cEdldDoKICAgICAgICAgICAgICBwYXRoOiAvCiAgICAgICAgICAgICAgcG9ydDogOTEwMAogICAgICAgICAgcmVhZGluZXNzUHJvYmU6CiAgICAgICAgICAgIGh0dHBHZXQ6CiAgICAgICAgICAgICAgcGF0aDogLwogICAgICAgICAgICAgIHBvcnQ6IDkxMDAKICAgICAgICAgIHJlc291cmNlczoKICAgICAgICAgICAge30KICAgICAgICAgIHZvbHVtZU1vdW50czoKICAgICAgICAgICAgLSBuYW1lOiBwcm9jCiAgICAgICAgICAgICAgbW91bnRQYXRoOiAvaG9zdC9wcm9jCiAgICAgICAgICAgICAgcmVhZE9ubHk6ICB0cnVlCiAgICAgICAgICAgIC0gbmFtZTogc3lzCiAgICAgICAgICAgICAgbW91bnRQYXRoOiAvaG9zdC9zeXMKICAgICAgICAgICAgICByZWFkT25seTogdHJ1ZQogICAgICBob3N0TmV0d29yazogdHJ1ZQogICAgICBob3N0UElEOiB0cnVlCiAgICAgIHRvbGVyYXRpb25zOgogICAgICAgIC0gZWZmZWN0OiBOb1NjaGVkdWxlCiAgICAgICAgICBvcGVyYXRvcjogRXhpc3RzCiAgICAgIHZvbHVtZXM6CiAgICAgICAgLSBuYW1lOiBwcm9jCiAgICAgICAgICBob3N0UGF0aDoKICAgICAgICAgICAgcGF0aDogL3Byb2MKICAgICAgICAtIG5hbWU6IHN5cwogICAgICAgICAgaG9zdFBhdGg6CiAgICAgICAgICAgIHBhdGg6IC9zeXMK\"")
	packr.PackJSONBytes("../../templates", "k8s/setup/monitoring/prometheus-alerts.yaml", "\"\"")
	packr.PackJSONBytes("../../templates", "k8s/setup/monitoring/prometheus-rules.yaml", "\"\"")
	packr.PackJSONBytes("../../templates", "k8s/setup/monitoring/prometheus.yaml", "\"\"")
	packr.PackJSONBytes("../../templates", "k8s/setup/networking/calico.yaml", "\"YXBpVmVyc2lvbjogdjEKa2luZDogTmFtZXNwYWNlCm1ldGFkYXRhOgogIG5hbWU6IG5ldHdvcmtpbmcKCi0tLQpraW5kOiBDb25maWdNYXAKYXBpVmVyc2lvbjogdjEKbWV0YWRhdGE6CiAgbmFtZTogY2FsaWNvLWNvbmZpZwogIG5hbWVzcGFjZTogbmV0d29ya2luZwpkYXRhOgogIHR5cGhhX3NlcnZpY2VfbmFtZTogImNhbGljby10eXBoYSIKICBjYWxpY29fYmFja2VuZDogImJpcmQiCiAgdmV0aF9tdHU6ICIxNDQwIgogIGNuaV9uZXR3b3JrX2NvbmZpZzogfC0KICAgIHsKICAgICAgIm5hbWUiOiAiazhzLXBvZC1uZXR3b3JrIiwKICAgICAgImNuaVZlcnNpb24iOiAiMC4zLjEiLAogICAgICAicGx1Z2lucyI6IFsKICAgICAgICB7CiAgICAgICAgICAidHlwZSI6ICJjYWxpY28iLAogICAgICAgICAgImxvZ19sZXZlbCI6ICJpbmZvIiwKICAgICAgICAgICJkYXRhc3RvcmVfdHlwZSI6ICJrdWJlcm5ldGVzIiwKICAgICAgICAgICJub2RlbmFtZSI6ICJfX0tVQkVSTkVURVNfTk9ERV9OQU1FX18iLAogICAgICAgICAgIm10dSI6IF9fQ05JX01UVV9fLAogICAgICAgICAgIm5vZGVuYW1lX2ZpbGVfb3B0aW9uYWwiOiB0cnVlLAogICAgICAgICAgImlwYW0iOiB7CiAgICAgICAgICAgICJ0eXBlIjogImNhbGljby1pcGFtIiwKICAgICAgICAgICAgInN1Ym5ldCI6ICJ1c2VQb2RDaWRyIgogICAgICAgICAgfSwKICAgICAgICAgICJwb2xpY3kiOiB7CiAgICAgICAgICAgICJ0eXBlIjogIms4cyIKICAgICAgICAgIH0sCiAgICAgICAgICAia3ViZXJuZXRlcyI6IHsKICAgICAgICAgICAgImt1YmVjb25maWciOiAiX19LVUJFQ09ORklHX0ZJTEVQQVRIX18iCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAidHlwZSI6ICJwb3J0bWFwIiwKICAgICAgICAgICJzbmF0IjogdHJ1ZSwKICAgICAgICAgICJjYXBhYmlsaXRpZXMiOiB7InBvcnRNYXBwaW5ncyI6IHRydWV9CiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAidHlwZSI6ICJiYW5kd2lkdGgiLAogICAgICAgICAgImNhcGFiaWxpdGllcyI6IHsiYmFuZHdpZHRoIjogdHJ1ZX0KICAgICAgICB9CiAgICAgIF0KICAgIH0KCi0tLQphcGlWZXJzaW9uOiBhcGlleHRlbnNpb25zLms4cy5pby92MQpraW5kOiBDdXN0b21SZXNvdXJjZURlZmluaXRpb24KbWV0YWRhdGE6CiAgbmFtZTogYmdwY29uZmlndXJhdGlvbnMuY3JkLnByb2plY3RjYWxpY28ub3JnCnNwZWM6CiAgZ3JvdXA6IGNyZC5wcm9qZWN0Y2FsaWNvLm9yZwogIG5hbWVzOgogICAga2luZDogQkdQQ29uZmlndXJhdGlvbgogICAgbGlzdEtpbmQ6IEJHUENvbmZpZ3VyYXRpb25MaXN0CiAgICBwbHVyYWw6IGJncGNvbmZpZ3VyYXRpb25zCiAgICBzaW5ndWxhcjogYmdwY29uZmlndXJhdGlvbgogIHNjb3BlOiBDbHVzdGVyCiAgdmVyc2lvbnM6CiAgLSBuYW1lOiB2MQogICAgc2NoZW1hOgogICAgICBvcGVuQVBJVjNTY2hlbWE6CiAgICAgICAgZGVzY3JpcHRpb246IEJHUENvbmZpZ3VyYXRpb24gY29udGFpbnMgdGhlIGNvbmZpZ3VyYXRpb24gZm9yIGFueSBCR1Agcm91dGluZy4KICAgICAgICBwcm9wZXJ0aWVzOgogICAgICAgICAgYXBpVmVyc2lvbjoKICAgICAgICAgICAgZGVzY3JpcHRpb246ICdBUElWZXJzaW9uIGRlZmluZXMgdGhlIHZlcnNpb25lZCBzY2hlbWEgb2YgdGhpcyByZXByZXNlbnRhdGlvbgogICAgICAgICAgICAgIG9mIGFuIG9iamVjdC4gU2VydmVycyBzaG91bGQgY29udmVydCByZWNvZ25pemVkIHNjaGVtYXMgdG8gdGhlIGxhdGVzdAogICAgICAgICAgICAgIGludGVybmFsIHZhbHVlLCBhbmQgbWF5IHJlamVjdCB1bnJlY29nbml6ZWQgdmFsdWVzLiBNb3JlIGluZm86IGh0dHBzOi8vZ2l0Lms4cy5pby9jb21tdW5pdHkvY29udHJpYnV0b3JzL2RldmVsL3NpZy1hcmNoaXRlY3R1cmUvYXBpLWNvbnZlbnRpb25zLm1kI3Jlc291cmNlcycKICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICBraW5kOgogICAgICAgICAgICBkZXNjcmlwdGlvbjogJ0tpbmQgaXMgYSBzdHJpbmcgdmFsdWUgcmVwcmVzZW50aW5nIHRoZSBSRVNUIHJlc291cmNlIHRoaXMKICAgICAgICAgICAgICBvYmplY3QgcmVwcmVzZW50cy4gU2VydmVycyBtYXkgaW5mZXIgdGhpcyBmcm9tIHRoZSBlbmRwb2ludCB0aGUgY2xpZW50CiAgICAgICAgICAgICAgc3VibWl0cyByZXF1ZXN0cyB0by4gQ2Fubm90IGJlIHVwZGF0ZWQuIEluIENhbWVsQ2FzZS4gTW9yZSBpbmZvOiBodHRwczovL2dpdC5rOHMuaW8vY29tbXVuaXR5L2NvbnRyaWJ1dG9ycy9kZXZlbC9zaWctYXJjaGl0ZWN0dXJlL2FwaS1jb252ZW50aW9ucy5tZCN0eXBlcy1raW5kcycKICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICBtZXRhZGF0YToKICAgICAgICAgICAgdHlwZTogb2JqZWN0CiAgICAgICAgICBzcGVjOgogICAgICAgICAgICBkZXNjcmlwdGlvbjogQkdQQ29uZmlndXJhdGlvblNwZWMgY29udGFpbnMgdGhlIHZhbHVlcyBvZiB0aGUgQkdQIGNvbmZpZ3VyYXRpb24uCiAgICAgICAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgICAgICAgYXNOdW1iZXI6CiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogJ0FTTnVtYmVyIGlzIHRoZSBkZWZhdWx0IEFTIG51bWJlciB1c2VkIGJ5IGEgbm9kZS4gW0RlZmF1bHQ6CiAgICAgICAgICAgICAgICAgIDY0NTEyXScKICAgICAgICAgICAgICAgIGZvcm1hdDogaW50MzIKICAgICAgICAgICAgICAgIHR5cGU6IGludGVnZXIKICAgICAgICAgICAgICBjb21tdW5pdGllczoKICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBDb21tdW5pdGllcyBpcyBhIGxpc3Qgb2YgQkdQIGNvbW11bml0eSB2YWx1ZXMgYW5kIHRoZWlyCiAgICAgICAgICAgICAgICAgIGFyYml0cmFyeSBuYW1lcyBmb3IgdGFnZ2luZyByb3V0ZXMuCiAgICAgICAgICAgICAgICBpdGVtczoKICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IENvbW11bml0eSBjb250YWlucyBzdGFuZGFyZCBvciBsYXJnZSBjb21tdW5pdHkgdmFsdWUKICAgICAgICAgICAgICAgICAgICBhbmQgaXRzIG5hbWUuCiAgICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgICAgICAgICAgICAgbmFtZToKICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBOYW1lIGdpdmVuIHRvIGNvbW11bml0eSB2YWx1ZS4KICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgICAgICAgIHZhbHVlOgogICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IFZhbHVlIG11c3QgYmUgb2YgZm9ybWF0IGBhYTpubmAgb3IgYGFhOm5uOm1tYC4KICAgICAgICAgICAgICAgICAgICAgICAgRm9yIHN0YW5kYXJkIGNvbW11bml0eSB1c2UgYGFhOm5uYCBmb3JtYXQsIHdoZXJlIGBhYWAgYW5kCiAgICAgICAgICAgICAgICAgICAgICAgIGBubmAgYXJlIDE2IGJpdCBudW1iZXIuIEZvciBsYXJnZSBjb21tdW5pdHkgdXNlIGBhYTpubjptbWAKICAgICAgICAgICAgICAgICAgICAgICAgZm9ybWF0LCB3aGVyZSBgYWFgLCBgbm5gIGFuZCBgbW1gIGFyZSAzMiBiaXQgbnVtYmVyLiBXaGVyZSwKICAgICAgICAgICAgICAgICAgICAgICAgYGFhYCBpcyBhbiBBUyBOdW1iZXIsIGBubmAgYW5kIGBtbWAgYXJlIHBlci1BUyBpZGVudGlmaWVyLgogICAgICAgICAgICAgICAgICAgICAgcGF0dGVybjogXihcZCspOihcZCspJHxeKFxkKyk6KFxkKyk6KFxkKykkCiAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICAgICAgdHlwZTogb2JqZWN0CiAgICAgICAgICAgICAgICB0eXBlOiBhcnJheQogICAgICAgICAgICAgIGxpc3RlblBvcnQ6CiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogTGlzdGVuUG9ydCBpcyB0aGUgcG9ydCB3aGVyZSBCR1AgcHJvdG9jb2wgc2hvdWxkIGxpc3Rlbi4KICAgICAgICAgICAgICAgICAgRGVmYXVsdHMgdG8gMTc5CiAgICAgICAgICAgICAgICBtYXhpbXVtOiA2NTUzNQogICAgICAgICAgICAgICAgbWluaW11bTogMQogICAgICAgICAgICAgICAgdHlwZTogaW50ZWdlcgogICAgICAgICAgICAgIGxvZ1NldmVyaXR5U2NyZWVuOgogICAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICdMb2dTZXZlcml0eVNjcmVlbiBpcyB0aGUgbG9nIHNldmVyaXR5IGFib3ZlIHdoaWNoIGxvZ3MKICAgICAgICAgICAgICAgICAgYXJlIHNlbnQgdG8gdGhlIHN0ZG91dC4gW0RlZmF1bHQ6IElORk9dJwogICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgbm9kZVRvTm9kZU1lc2hFbmFibGVkOgogICAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICdOb2RlVG9Ob2RlTWVzaEVuYWJsZWQgc2V0cyB3aGV0aGVyIGZ1bGwgbm9kZSB0byBub2RlCiAgICAgICAgICAgICAgICAgIEJHUCBtZXNoIGlzIGVuYWJsZWQuIFtEZWZhdWx0OiB0cnVlXScKICAgICAgICAgICAgICAgIHR5cGU6IGJvb2xlYW4KICAgICAgICAgICAgICBwcmVmaXhBZHZlcnRpc2VtZW50czoKICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBQcmVmaXhBZHZlcnRpc2VtZW50cyBjb250YWlucyBwZXItcHJlZml4IGFkdmVydGlzZW1lbnQKICAgICAgICAgICAgICAgICAgY29uZmlndXJhdGlvbi4KICAgICAgICAgICAgICAgIGl0ZW1zOgogICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogUHJlZml4QWR2ZXJ0aXNlbWVudCBjb25maWd1cmVzIGFkdmVydGlzZW1lbnQgcHJvcGVydGllcwogICAgICAgICAgICAgICAgICAgIGZvciB0aGUgc3BlY2lmaWVkIENJRFIuCiAgICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgICAgICAgICAgICAgY2lkcjoKICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBDSURSIGZvciB3aGljaCBwcm9wZXJ0aWVzIHNob3VsZCBiZSBhZHZlcnRpc2VkLgogICAgICAgICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgICAgICAgY29tbXVuaXRpZXM6CiAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogQ29tbXVuaXRpZXMgY2FuIGJlIGxpc3Qgb2YgZWl0aGVyIGNvbW11bml0eSBuYW1lcwogICAgICAgICAgICAgICAgICAgICAgICBhbHJlYWR5IGRlZmluZWQgaW4gYFNwZWNzLkNvbW11bml0aWVzYCBvciBjb21tdW5pdHkgdmFsdWUKICAgICAgICAgICAgICAgICAgICAgICAgb2YgZm9ybWF0IGBhYTpubmAgb3IgYGFhOm5uOm1tYC4gRm9yIHN0YW5kYXJkIGNvbW11bml0eSB1c2UKICAgICAgICAgICAgICAgICAgICAgICAgYGFhOm5uYCBmb3JtYXQsIHdoZXJlIGBhYWAgYW5kIGBubmAgYXJlIDE2IGJpdCBudW1iZXIuIEZvcgogICAgICAgICAgICAgICAgICAgICAgICBsYXJnZSBjb21tdW5pdHkgdXNlIGBhYTpubjptbWAgZm9ybWF0LCB3aGVyZSBgYWFgLCBgbm5gIGFuZAogICAgICAgICAgICAgICAgICAgICAgICBgbW1gIGFyZSAzMiBiaXQgbnVtYmVyLiBXaGVyZSxgYWFgIGlzIGFuIEFTIE51bWJlciwgYG5uYCBhbmQKICAgICAgICAgICAgICAgICAgICAgICAgYG1tYCBhcmUgcGVyLUFTIGlkZW50aWZpZXIuCiAgICAgICAgICAgICAgICAgICAgICBpdGVtczoKICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBhcnJheQogICAgICAgICAgICAgICAgICB0eXBlOiBvYmplY3QKICAgICAgICAgICAgICAgIHR5cGU6IGFycmF5CiAgICAgICAgICAgICAgc2VydmljZUNsdXN0ZXJJUHM6CiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogU2VydmljZUNsdXN0ZXJJUHMgYXJlIHRoZSBDSURSIGJsb2NrcyBmcm9tIHdoaWNoIHNlcnZpY2UKICAgICAgICAgICAgICAgICAgY2x1c3RlciBJUHMgYXJlIGFsbG9jYXRlZC4gSWYgc3BlY2lmaWVkLCBDYWxpY28gd2lsbCBhZHZlcnRpc2UgdGhlc2UKICAgICAgICAgICAgICAgICAgYmxvY2tzLCBhcyB3ZWxsIGFzIGFueSBjbHVzdGVyIElQcyB3aXRoaW4gdGhlbS4KICAgICAgICAgICAgICAgIGl0ZW1zOgogICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogU2VydmljZUNsdXN0ZXJJUEJsb2NrIHJlcHJlc2VudHMgYSBzaW5nbGUgYWxsb3dlZCBDbHVzdGVySVAKICAgICAgICAgICAgICAgICAgICBDSURSIGJsb2NrLgogICAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzOgogICAgICAgICAgICAgICAgICAgIGNpZHI6CiAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICAgICAgdHlwZTogb2JqZWN0CiAgICAgICAgICAgICAgICB0eXBlOiBhcnJheQogICAgICAgICAgICAgIHNlcnZpY2VFeHRlcm5hbElQczoKICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBTZXJ2aWNlRXh0ZXJuYWxJUHMgYXJlIHRoZSBDSURSIGJsb2NrcyBmb3IgS3ViZXJuZXRlcwogICAgICAgICAgICAgICAgICBTZXJ2aWNlIEV4dGVybmFsIElQcy4gS3ViZXJuZXRlcyBTZXJ2aWNlIEV4dGVybmFsSVBzIHdpbGwgb25seSBiZQogICAgICAgICAgICAgICAgICBhZHZlcnRpc2VkIGlmIHRoZXkgYXJlIHdpdGhpbiBvbmUgb2YgdGhlc2UgYmxvY2tzLgogICAgICAgICAgICAgICAgaXRlbXM6CiAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBTZXJ2aWNlRXh0ZXJuYWxJUEJsb2NrIHJlcHJlc2VudHMgYSBzaW5nbGUgYWxsb3dlZAogICAgICAgICAgICAgICAgICAgIEV4dGVybmFsIElQIENJRFIgYmxvY2suCiAgICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgICAgICAgICAgICAgY2lkcjoKICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgICAgICB0eXBlOiBvYmplY3QKICAgICAgICAgICAgICAgIHR5cGU6IGFycmF5CiAgICAgICAgICAgIHR5cGU6IG9iamVjdAogICAgICAgIHR5cGU6IG9iamVjdAogICAgc2VydmVkOiB0cnVlCiAgICBzdG9yYWdlOiB0cnVlCnN0YXR1czoKICBhY2NlcHRlZE5hbWVzOgogICAga2luZDogIiIKICAgIHBsdXJhbDogIiIKICBjb25kaXRpb25zOiBbXQogIHN0b3JlZFZlcnNpb25zOiBbXQoKLS0tCmFwaVZlcnNpb246IGFwaWV4dGVuc2lvbnMuazhzLmlvL3YxCmtpbmQ6IEN1c3RvbVJlc291cmNlRGVmaW5pdGlvbgptZXRhZGF0YToKICBuYW1lOiBiZ3BwZWVycy5jcmQucHJvamVjdGNhbGljby5vcmcKc3BlYzoKICBncm91cDogY3JkLnByb2plY3RjYWxpY28ub3JnCiAgbmFtZXM6CiAgICBraW5kOiBCR1BQZWVyCiAgICBsaXN0S2luZDogQkdQUGVlckxpc3QKICAgIHBsdXJhbDogYmdwcGVlcnMKICAgIHNpbmd1bGFyOiBiZ3BwZWVyCiAgc2NvcGU6IENsdXN0ZXIKICB2ZXJzaW9uczoKICAtIG5hbWU6IHYxCiAgICBzY2hlbWE6CiAgICAgIG9wZW5BUElWM1NjaGVtYToKICAgICAgICBwcm9wZXJ0aWVzOgogICAgICAgICAgYXBpVmVyc2lvbjoKICAgICAgICAgICAgZGVzY3JpcHRpb246ICdBUElWZXJzaW9uIGRlZmluZXMgdGhlIHZlcnNpb25lZCBzY2hlbWEgb2YgdGhpcyByZXByZXNlbnRhdGlvbgogICAgICAgICAgICAgIG9mIGFuIG9iamVjdC4gU2VydmVycyBzaG91bGQgY29udmVydCByZWNvZ25pemVkIHNjaGVtYXMgdG8gdGhlIGxhdGVzdAogICAgICAgICAgICAgIGludGVybmFsIHZhbHVlLCBhbmQgbWF5IHJlamVjdCB1bnJlY29nbml6ZWQgdmFsdWVzLiBNb3JlIGluZm86IGh0dHBzOi8vZ2l0Lms4cy5pby9jb21tdW5pdHkvY29udHJpYnV0b3JzL2RldmVsL3NpZy1hcmNoaXRlY3R1cmUvYXBpLWNvbnZlbnRpb25zLm1kI3Jlc291cmNlcycKICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICBraW5kOgogICAgICAgICAgICBkZXNjcmlwdGlvbjogJ0tpbmQgaXMgYSBzdHJpbmcgdmFsdWUgcmVwcmVzZW50aW5nIHRoZSBSRVNUIHJlc291cmNlIHRoaXMKICAgICAgICAgICAgICBvYmplY3QgcmVwcmVzZW50cy4gU2VydmVycyBtYXkgaW5mZXIgdGhpcyBmcm9tIHRoZSBlbmRwb2ludCB0aGUgY2xpZW50CiAgICAgICAgICAgICAgc3VibWl0cyByZXF1ZXN0cyB0by4gQ2Fubm90IGJlIHVwZGF0ZWQuIEluIENhbWVsQ2FzZS4gTW9yZSBpbmZvOiBodHRwczovL2dpdC5rOHMuaW8vY29tbXVuaXR5L2NvbnRyaWJ1dG9ycy9kZXZlbC9zaWctYXJjaGl0ZWN0dXJlL2FwaS1jb252ZW50aW9ucy5tZCN0eXBlcy1raW5kcycKICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICBtZXRhZGF0YToKICAgICAgICAgICAgdHlwZTogb2JqZWN0CiAgICAgICAgICBzcGVjOgogICAgICAgICAgICBkZXNjcmlwdGlvbjogQkdQUGVlclNwZWMgY29udGFpbnMgdGhlIHNwZWNpZmljYXRpb24gZm9yIGEgQkdQUGVlciByZXNvdXJjZS4KICAgICAgICAgICAgcHJvcGVydGllczoKICAgICAgICAgICAgICBhc051bWJlcjoKICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBUaGUgQVMgTnVtYmVyIG9mIHRoZSBwZWVyLgogICAgICAgICAgICAgICAgZm9ybWF0OiBpbnQzMgogICAgICAgICAgICAgICAgdHlwZTogaW50ZWdlcgogICAgICAgICAgICAgIGtlZXBPcmlnaW5hbE5leHRIb3A6CiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogT3B0aW9uIHRvIGtlZXAgdGhlIG9yaWdpbmFsIG5leHRob3AgZmllbGQgd2hlbiByb3V0ZXMKICAgICAgICAgICAgICAgICAgYXJlIHNlbnQgdG8gYSBCR1AgUGVlci4gU2V0dGluZyAidHJ1ZSIgY29uZmlndXJlcyB0aGUgc2VsZWN0ZWQgQkdQCiAgICAgICAgICAgICAgICAgIFBlZXJzIG5vZGUgdG8gdXNlIHRoZSAibmV4dCBob3Aga2VlcDsiIGluc3RlYWQgb2YgIm5leHQgaG9wIHNlbGY7IihkZWZhdWx0KQogICAgICAgICAgICAgICAgICBpbiB0aGUgc3BlY2lmaWMgYnJhbmNoIG9mIHRoZSBOb2RlIG9uICJiaXJkLmNmZyIuCiAgICAgICAgICAgICAgICB0eXBlOiBib29sZWFuCiAgICAgICAgICAgICAgbm9kZToKICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBUaGUgbm9kZSBuYW1lIGlkZW50aWZ5aW5nIHRoZSBDYWxpY28gbm9kZSBpbnN0YW5jZSB0aGF0CiAgICAgICAgICAgICAgICAgIGlzIHBlZXJpbmcgd2l0aCB0aGlzIHBlZXIuIElmIHRoaXMgaXMgbm90IHNldCwgdGhpcyByZXByZXNlbnRzIGEKICAgICAgICAgICAgICAgICAgZ2xvYmFsIHBlZXIsIGkuZS4gYSBwZWVyIHRoYXQgcGVlcnMgd2l0aCBldmVyeSBub2RlIGluIHRoZSBkZXBsb3ltZW50LgogICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgbm9kZVNlbGVjdG9yOgogICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IFNlbGVjdG9yIGZvciB0aGUgbm9kZXMgdGhhdCBzaG91bGQgaGF2ZSB0aGlzIHBlZXJpbmcuICBXaGVuCiAgICAgICAgICAgICAgICAgIHRoaXMgaXMgc2V0LCB0aGUgTm9kZSBmaWVsZCBtdXN0IGJlIGVtcHR5LgogICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgcGFzc3dvcmQ6CiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogT3B0aW9uYWwgQkdQIHBhc3N3b3JkIGZvciB0aGUgcGVlcmluZ3MgZ2VuZXJhdGVkIGJ5IHRoaXMKICAgICAgICAgICAgICAgICAgQkdQUGVlciByZXNvdXJjZS4KICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgICAgICAgICAgIHNlY3JldEtleVJlZjoKICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogU2VsZWN0cyBhIGtleSBvZiBhIHNlY3JldCBpbiB0aGUgbm9kZSBwb2QncyBuYW1lc3BhY2UuCiAgICAgICAgICAgICAgICAgICAgcHJvcGVydGllczoKICAgICAgICAgICAgICAgICAgICAgIGtleToKICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IFRoZSBrZXkgb2YgdGhlIHNlY3JldCB0byBzZWxlY3QgZnJvbS4gIE11c3QgYmUKICAgICAgICAgICAgICAgICAgICAgICAgICBhIHZhbGlkIHNlY3JldCBrZXkuCiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgICAgICAgICAgbmFtZToKICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICdOYW1lIG9mIHRoZSByZWZlcmVudC4gTW9yZSBpbmZvOiBodHRwczovL2t1YmVybmV0ZXMuaW8vZG9jcy9jb25jZXB0cy9vdmVydmlldy93b3JraW5nLXdpdGgtb2JqZWN0cy9uYW1lcy8jbmFtZXMKICAgICAgICAgICAgICAgICAgICAgICAgICBUT0RPOiBBZGQgb3RoZXIgdXNlZnVsIGZpZWxkcy4gYXBpVmVyc2lvbiwga2luZCwgdWlkPycKICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgICAgICAgICBvcHRpb25hbDoKICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IFNwZWNpZnkgd2hldGhlciB0aGUgU2VjcmV0IG9yIGl0cyBrZXkgbXVzdCBiZQogICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmluZWQKICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogYm9vbGVhbgogICAgICAgICAgICAgICAgICAgIHJlcXVpcmVkOgogICAgICAgICAgICAgICAgICAgIC0ga2V5CiAgICAgICAgICAgICAgICAgICAgdHlwZTogb2JqZWN0CiAgICAgICAgICAgICAgICB0eXBlOiBvYmplY3QKICAgICAgICAgICAgICBwZWVySVA6CiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogVGhlIElQIGFkZHJlc3Mgb2YgdGhlIHBlZXIgZm9sbG93ZWQgYnkgYW4gb3B0aW9uYWwgcG9ydAogICAgICAgICAgICAgICAgICBudW1iZXIgdG8gcGVlciB3aXRoLiBJZiBwb3J0IG51bWJlciBpcyBnaXZlbiwgZm9ybWF0IHNob3VsZCBiZSBgWzxJUHY2Pl06cG9ydGAKICAgICAgICAgICAgICAgICAgb3IgYDxJUHY0Pjo8cG9ydD5gIGZvciBJUHY0LiBJZiBvcHRpb25hbCBwb3J0IG51bWJlciBpcyBub3Qgc2V0LAogICAgICAgICAgICAgICAgICBhbmQgdGhpcyBwZWVyIElQIGFuZCBBU051bWJlciBiZWxvbmdzIHRvIGEgY2FsaWNvL25vZGUgd2l0aCBMaXN0ZW5Qb3J0CiAgICAgICAgICAgICAgICAgIHNldCBpbiBCR1BDb25maWd1cmF0aW9uLCB0aGVuIHdlIHVzZSB0aGF0IHBvcnQgdG8gcGVlci4KICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgIHBlZXJTZWxlY3RvcjoKICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBTZWxlY3RvciBmb3IgdGhlIHJlbW90ZSBub2RlcyB0byBwZWVyIHdpdGguICBXaGVuIHRoaXMKICAgICAgICAgICAgICAgICAgaXMgc2V0LCB0aGUgUGVlcklQIGFuZCBBU051bWJlciBmaWVsZHMgbXVzdCBiZSBlbXB0eS4gIEZvciBlYWNoCiAgICAgICAgICAgICAgICAgIHBlZXJpbmcgYmV0d2VlbiB0aGUgbG9jYWwgbm9kZSBhbmQgc2VsZWN0ZWQgcmVtb3RlIG5vZGVzLCB3ZSBjb25maWd1cmUKICAgICAgICAgICAgICAgICAgYW4gSVB2NCBwZWVyaW5nIGlmIGJvdGggZW5kcyBoYXZlIE5vZGVCR1BTcGVjLklQdjRBZGRyZXNzIHNwZWNpZmllZCwKICAgICAgICAgICAgICAgICAgYW5kIGFuIElQdjYgcGVlcmluZyBpZiBib3RoIGVuZHMgaGF2ZSBOb2RlQkdQU3BlYy5JUHY2QWRkcmVzcyBzcGVjaWZpZWQuICBUaGUKICAgICAgICAgICAgICAgICAgcmVtb3RlIEFTIG51bWJlciBjb21lcyBmcm9tIHRoZSByZW1vdGUgbm9kZeKAmXMgTm9kZUJHUFNwZWMuQVNOdW1iZXIsCiAgICAgICAgICAgICAgICAgIG9yIHRoZSBnbG9iYWwgZGVmYXVsdCBpZiB0aGF0IGlzIG5vdCBzZXQuCiAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgcmVxdWlyZWQ6CiAgICAgICAgICAgIC0gYXNOdW1iZXIKICAgICAgICAgICAgLSBwZWVySVAKICAgICAgICAgICAgdHlwZTogb2JqZWN0CiAgICAgICAgdHlwZTogb2JqZWN0CiAgICBzZXJ2ZWQ6IHRydWUKICAgIHN0b3JhZ2U6IHRydWUKc3RhdHVzOgogIGFjY2VwdGVkTmFtZXM6CiAgICBraW5kOiAiIgogICAgcGx1cmFsOiAiIgogIGNvbmRpdGlvbnM6IFtdCiAgc3RvcmVkVmVyc2lvbnM6IFtdCgotLS0KCi0tLQphcGlWZXJzaW9uOiBhcGlleHRlbnNpb25zLms4cy5pby92MQpraW5kOiBDdXN0b21SZXNvdXJjZURlZmluaXRpb24KbWV0YWRhdGE6CiAgbmFtZTogYmxvY2thZmZpbml0aWVzLmNyZC5wcm9qZWN0Y2FsaWNvLm9yZwpzcGVjOgogIGdyb3VwOiBjcmQucHJvamVjdGNhbGljby5vcmcKICBuYW1lczoKICAgIGtpbmQ6IEJsb2NrQWZmaW5pdHkKICAgIGxpc3RLaW5kOiBCbG9ja0FmZmluaXR5TGlzdAogICAgcGx1cmFsOiBibG9ja2FmZmluaXRpZXMKICAgIHNpbmd1bGFyOiBibG9ja2FmZmluaXR5CiAgc2NvcGU6IENsdXN0ZXIKICB2ZXJzaW9uczoKICAtIG5hbWU6IHYxCiAgICBzY2hlbWE6CiAgICAgIG9wZW5BUElWM1NjaGVtYToKICAgICAgICBwcm9wZXJ0aWVzOgogICAgICAgICAgYXBpVmVyc2lvbjoKICAgICAgICAgICAgZGVzY3JpcHRpb246ICdBUElWZXJzaW9uIGRlZmluZXMgdGhlIHZlcnNpb25lZCBzY2hlbWEgb2YgdGhpcyByZXByZXNlbnRhdGlvbgogICAgICAgICAgICAgIG9mIGFuIG9iamVjdC4gU2VydmVycyBzaG91bGQgY29udmVydCByZWNvZ25pemVkIHNjaGVtYXMgdG8gdGhlIGxhdGVzdAogICAgICAgICAgICAgIGludGVybmFsIHZhbHVlLCBhbmQgbWF5IHJlamVjdCB1bnJlY29nbml6ZWQgdmFsdWVzLiBNb3JlIGluZm86IGh0dHBzOi8vZ2l0Lms4cy5pby9jb21tdW5pdHkvY29udHJpYnV0b3JzL2RldmVsL3NpZy1hcmNoaXRlY3R1cmUvYXBpLWNvbnZlbnRpb25zLm1kI3Jlc291cmNlcycKICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICBraW5kOgogICAgICAgICAgICBkZXNjcmlwdGlvbjogJ0tpbmQgaXMgYSBzdHJpbmcgdmFsdWUgcmVwcmVzZW50aW5nIHRoZSBSRVNUIHJlc291cmNlIHRoaXMKICAgICAgICAgICAgICBvYmplY3QgcmVwcmVzZW50cy4gU2VydmVycyBtYXkgaW5mZXIgdGhpcyBmcm9tIHRoZSBlbmRwb2ludCB0aGUgY2xpZW50CiAgICAgICAgICAgICAgc3VibWl0cyByZXF1ZXN0cyB0by4gQ2Fubm90IGJlIHVwZGF0ZWQuIEluIENhbWVsQ2FzZS4gTW9yZSBpbmZvOiBodHRwczovL2dpdC5rOHMuaW8vY29tbXVuaXR5L2NvbnRyaWJ1dG9ycy9kZXZlbC9zaWctYXJjaGl0ZWN0dXJlL2FwaS1jb252ZW50aW9ucy5tZCN0eXBlcy1raW5kcycKICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICBtZXRhZGF0YToKICAgICAgICAgICAgdHlwZTogb2JqZWN0CiAgICAgICAgICBzcGVjOgogICAgICAgICAgICBkZXNjcmlwdGlvbjogQmxvY2tBZmZpbml0eVNwZWMgY29udGFpbnMgdGhlIHNwZWNpZmljYXRpb24gZm9yIGEgQmxvY2tBZmZpbml0eQogICAgICAgICAgICAgIHJlc291cmNlLgogICAgICAgICAgICBwcm9wZXJ0aWVzOgogICAgICAgICAgICAgIGNpZHI6CiAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICBkZWxldGVkOgogICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IERlbGV0ZWQgaW5kaWNhdGVzIHRoYXQgdGhpcyBibG9jayBhZmZpbml0eSBpcyBiZWluZyBkZWxldGVkLgogICAgICAgICAgICAgICAgICBUaGlzIGZpZWxkIGlzIGEgc3RyaW5nIGZvciBjb21wYXRpYmlsaXR5IHdpdGggb2xkZXIgcmVsZWFzZXMgdGhhdAogICAgICAgICAgICAgICAgICBtaXN0YWtlbmx5IHRyZWF0IHRoaXMgZmllbGQgYXMgYSBzdHJpbmcuCiAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICBub2RlOgogICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgc3RhdGU6CiAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgcmVxdWlyZWQ6CiAgICAgICAgICAgIC0gY2lkcgogICAgICAgICAgICAtIGRlbGV0ZWQKICAgICAgICAgICAgLSBub2RlCiAgICAgICAgICAgIC0gc3RhdGUKICAgICAgICAgICAgdHlwZTogb2JqZWN0CiAgICAgICAgdHlwZTogb2JqZWN0CiAgICBzZXJ2ZWQ6IHRydWUKICAgIHN0b3JhZ2U6IHRydWUKc3RhdHVzOgogIGFjY2VwdGVkTmFtZXM6CiAgICBraW5kOiAiIgogICAgcGx1cmFsOiAiIgogIGNvbmRpdGlvbnM6IFtdCiAgc3RvcmVkVmVyc2lvbnM6IFtdCgotLS0KCi0tLQphcGlWZXJzaW9uOiBhcGlleHRlbnNpb25zLms4cy5pby92MQpraW5kOiBDdXN0b21SZXNvdXJjZURlZmluaXRpb24KbWV0YWRhdGE6CiAgbmFtZTogY2x1c3RlcmluZm9ybWF0aW9ucy5jcmQucHJvamVjdGNhbGljby5vcmcKc3BlYzoKICBncm91cDogY3JkLnByb2plY3RjYWxpY28ub3JnCiAgbmFtZXM6CiAgICBraW5kOiBDbHVzdGVySW5mb3JtYXRpb24KICAgIGxpc3RLaW5kOiBDbHVzdGVySW5mb3JtYXRpb25MaXN0CiAgICBwbHVyYWw6IGNsdXN0ZXJpbmZvcm1hdGlvbnMKICAgIHNpbmd1bGFyOiBjbHVzdGVyaW5mb3JtYXRpb24KICBzY29wZTogQ2x1c3RlcgogIHZlcnNpb25zOgogIC0gbmFtZTogdjEKICAgIHNjaGVtYToKICAgICAgb3BlbkFQSVYzU2NoZW1hOgogICAgICAgIGRlc2NyaXB0aW9uOiBDbHVzdGVySW5mb3JtYXRpb24gY29udGFpbnMgdGhlIGNsdXN0ZXIgc3BlY2lmaWMgaW5mb3JtYXRpb24uCiAgICAgICAgcHJvcGVydGllczoKICAgICAgICAgIGFwaVZlcnNpb246CiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAnQVBJVmVyc2lvbiBkZWZpbmVzIHRoZSB2ZXJzaW9uZWQgc2NoZW1hIG9mIHRoaXMgcmVwcmVzZW50YXRpb24KICAgICAgICAgICAgICBvZiBhbiBvYmplY3QuIFNlcnZlcnMgc2hvdWxkIGNvbnZlcnQgcmVjb2duaXplZCBzY2hlbWFzIHRvIHRoZSBsYXRlc3QKICAgICAgICAgICAgICBpbnRlcm5hbCB2YWx1ZSwgYW5kIG1heSByZWplY3QgdW5yZWNvZ25pemVkIHZhbHVlcy4gTW9yZSBpbmZvOiBodHRwczovL2dpdC5rOHMuaW8vY29tbXVuaXR5L2NvbnRyaWJ1dG9ycy9kZXZlbC9zaWctYXJjaGl0ZWN0dXJlL2FwaS1jb252ZW50aW9ucy5tZCNyZXNvdXJjZXMnCiAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAga2luZDoKICAgICAgICAgICAgZGVzY3JpcHRpb246ICdLaW5kIGlzIGEgc3RyaW5nIHZhbHVlIHJlcHJlc2VudGluZyB0aGUgUkVTVCByZXNvdXJjZSB0aGlzCiAgICAgICAgICAgICAgb2JqZWN0IHJlcHJlc2VudHMuIFNlcnZlcnMgbWF5IGluZmVyIHRoaXMgZnJvbSB0aGUgZW5kcG9pbnQgdGhlIGNsaWVudAogICAgICAgICAgICAgIHN1Ym1pdHMgcmVxdWVzdHMgdG8uIENhbm5vdCBiZSB1cGRhdGVkLiBJbiBDYW1lbENhc2UuIE1vcmUgaW5mbzogaHR0cHM6Ly9naXQuazhzLmlvL2NvbW11bml0eS9jb250cmlidXRvcnMvZGV2ZWwvc2lnLWFyY2hpdGVjdHVyZS9hcGktY29udmVudGlvbnMubWQjdHlwZXMta2luZHMnCiAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgbWV0YWRhdGE6CiAgICAgICAgICAgIHR5cGU6IG9iamVjdAogICAgICAgICAgc3BlYzoKICAgICAgICAgICAgZGVzY3JpcHRpb246IENsdXN0ZXJJbmZvcm1hdGlvblNwZWMgY29udGFpbnMgdGhlIHZhbHVlcyBvZiBkZXNjcmliaW5nCiAgICAgICAgICAgICAgdGhlIGNsdXN0ZXIuCiAgICAgICAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgICAgICAgY2FsaWNvVmVyc2lvbjoKICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBDYWxpY29WZXJzaW9uIGlzIHRoZSB2ZXJzaW9uIG9mIENhbGljbyB0aGF0IHRoZSBjbHVzdGVyCiAgICAgICAgICAgICAgICAgIGlzIHJ1bm5pbmcKICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgIGNsdXN0ZXJHVUlEOgogICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IENsdXN0ZXJHVUlEIGlzIHRoZSBHVUlEIG9mIHRoZSBjbHVzdGVyCiAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICBjbHVzdGVyVHlwZToKICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBDbHVzdGVyVHlwZSBkZXNjcmliZXMgdGhlIHR5cGUgb2YgdGhlIGNsdXN0ZXIKICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgIGRhdGFzdG9yZVJlYWR5OgogICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IERhdGFzdG9yZVJlYWR5IGlzIHVzZWQgZHVyaW5nIHNpZ25pZmljYW50IGRhdGFzdG9yZSBtaWdyYXRpb25zCiAgICAgICAgICAgICAgICAgIHRvIHNpZ25hbCB0byBjb21wb25lbnRzIHN1Y2ggYXMgRmVsaXggdGhhdCBpdCBzaG91bGQgd2FpdCBiZWZvcmUKICAgICAgICAgICAgICAgICAgYWNjZXNzaW5nIHRoZSBkYXRhc3RvcmUuCiAgICAgICAgICAgICAgICB0eXBlOiBib29sZWFuCiAgICAgICAgICAgICAgdmFyaWFudDoKICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBWYXJpYW50IGRlY2xhcmVzIHdoaWNoIHZhcmlhbnQgb2YgQ2FsaWNvIHNob3VsZCBiZSBhY3RpdmUuCiAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgdHlwZTogb2JqZWN0CiAgICAgICAgdHlwZTogb2JqZWN0CiAgICBzZXJ2ZWQ6IHRydWUKICAgIHN0b3JhZ2U6IHRydWUKc3RhdHVzOgogIGFjY2VwdGVkTmFtZXM6CiAgICBraW5kOiAiIgogICAgcGx1cmFsOiAiIgogIGNvbmRpdGlvbnM6IFtdCiAgc3RvcmVkVmVyc2lvbnM6IFtdCgotLS0KCi0tLQphcGlWZXJzaW9uOiBhcGlleHRlbnNpb25zLms4cy5pby92MQpraW5kOiBDdXN0b21SZXNvdXJjZURlZmluaXRpb24KbWV0YWRhdGE6CiAgbmFtZTogZmVsaXhjb25maWd1cmF0aW9ucy5jcmQucHJvamVjdGNhbGljby5vcmcKc3BlYzoKICBncm91cDogY3JkLnByb2plY3RjYWxpY28ub3JnCiAgbmFtZXM6CiAgICBraW5kOiBGZWxpeENvbmZpZ3VyYXRpb24KICAgIGxpc3RLaW5kOiBGZWxpeENvbmZpZ3VyYXRpb25MaXN0CiAgICBwbHVyYWw6IGZlbGl4Y29uZmlndXJhdGlvbnMKICAgIHNpbmd1bGFyOiBmZWxpeGNvbmZpZ3VyYXRpb24KICBzY29wZTogQ2x1c3RlcgogIHZlcnNpb25zOgogIC0gbmFtZTogdjEKICAgIHNjaGVtYToKICAgICAgb3BlbkFQSVYzU2NoZW1hOgogICAgICAgIGRlc2NyaXB0aW9uOiBGZWxpeCBDb25maWd1cmF0aW9uIGNvbnRhaW5zIHRoZSBjb25maWd1cmF0aW9uIGZvciBGZWxpeC4KICAgICAgICBwcm9wZXJ0aWVzOgogICAgICAgICAgYXBpVmVyc2lvbjoKICAgICAgICAgICAgZGVzY3JpcHRpb246ICdBUElWZXJzaW9uIGRlZmluZXMgdGhlIHZlcnNpb25lZCBzY2hlbWEgb2YgdGhpcyByZXByZXNlbnRhdGlvbgogICAgICAgICAgICAgIG9mIGFuIG9iamVjdC4gU2VydmVycyBzaG91bGQgY29udmVydCByZWNvZ25pemVkIHNjaGVtYXMgdG8gdGhlIGxhdGVzdAogICAgICAgICAgICAgIGludGVybmFsIHZhbHVlLCBhbmQgbWF5IHJlamVjdCB1bnJlY29nbml6ZWQgdmFsdWVzLiBNb3JlIGluZm86IGh0dHBzOi8vZ2l0Lms4cy5pby9jb21tdW5pdHkvY29udHJpYnV0b3JzL2RldmVsL3NpZy1hcmNoaXRlY3R1cmUvYXBpLWNvbnZlbnRpb25zLm1kI3Jlc291cmNlcycKICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICBraW5kOgogICAgICAgICAgICBkZXNjcmlwdGlvbjogJ0tpbmQgaXMgYSBzdHJpbmcgdmFsdWUgcmVwcmVzZW50aW5nIHRoZSBSRVNUIHJlc291cmNlIHRoaXMKICAgICAgICAgICAgICBvYmplY3QgcmVwcmVzZW50cy4gU2VydmVycyBtYXkgaW5mZXIgdGhpcyBmcm9tIHRoZSBlbmRwb2ludCB0aGUgY2xpZW50CiAgICAgICAgICAgICAgc3VibWl0cyByZXF1ZXN0cyB0by4gQ2Fubm90IGJlIHVwZGF0ZWQuIEluIENhbWVsQ2FzZS4gTW9yZSBpbmZvOiBodHRwczovL2dpdC5rOHMuaW8vY29tbXVuaXR5L2NvbnRyaWJ1dG9ycy9kZXZlbC9zaWctYXJjaGl0ZWN0dXJlL2FwaS1jb252ZW50aW9ucy5tZCN0eXBlcy1raW5kcycKICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICBtZXRhZGF0YToKICAgICAgICAgICAgdHlwZTogb2JqZWN0CiAgICAgICAgICBzcGVjOgogICAgICAgICAgICBkZXNjcmlwdGlvbjogRmVsaXhDb25maWd1cmF0aW9uU3BlYyBjb250YWlucyB0aGUgdmFsdWVzIG9mIHRoZSBGZWxpeCBjb25maWd1cmF0aW9uLgogICAgICAgICAgICBwcm9wZXJ0aWVzOgogICAgICAgICAgICAgIGFsbG93SVBJUFBhY2tldHNGcm9tV29ya2xvYWRzOgogICAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICdBbGxvd0lQSVBQYWNrZXRzRnJvbVdvcmtsb2FkcyBjb250cm9scyB3aGV0aGVyIEZlbGl4CiAgICAgICAgICAgICAgICAgIHdpbGwgYWRkIGEgcnVsZSB0byBkcm9wIElQSVAgZW5jYXBzdWxhdGVkIHRyYWZmaWMgZnJvbSB3b3JrbG9hZHMKICAgICAgICAgICAgICAgICAgW0RlZmF1bHQ6IGZhbHNlXScKICAgICAgICAgICAgICAgIHR5cGU6IGJvb2xlYW4KICAgICAgICAgICAgICBhbGxvd1ZYTEFOUGFja2V0c0Zyb21Xb3JrbG9hZHM6CiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogJ0FsbG93VlhMQU5QYWNrZXRzRnJvbVdvcmtsb2FkcyBjb250cm9scyB3aGV0aGVyIEZlbGl4CiAgICAgICAgICAgICAgICAgIHdpbGwgYWRkIGEgcnVsZSB0byBkcm9wIFZYTEFOIGVuY2Fwc3VsYXRlZCB0cmFmZmljIGZyb20gd29ya2xvYWRzCiAgICAgICAgICAgICAgICAgIFtEZWZhdWx0OiBmYWxzZV0nCiAgICAgICAgICAgICAgICB0eXBlOiBib29sZWFuCiAgICAgICAgICAgICAgYXdzU3JjRHN0Q2hlY2s6CiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogJ1NldCBzb3VyY2UtZGVzdGluYXRpb24tY2hlY2sgb24gQVdTIEVDMiBpbnN0YW5jZXMuIEFjY2VwdGVkCiAgICAgICAgICAgICAgICAgIHZhbHVlIG11c3QgYmUgb25lIG9mICJEb05vdGhpbmciLCAiRW5hYmxlZCIgb3IgIkRpc2FibGVkIi4gW0RlZmF1bHQ6CiAgICAgICAgICAgICAgICAgIERvTm90aGluZ10nCiAgICAgICAgICAgICAgICBlbnVtOgogICAgICAgICAgICAgICAgLSBEb05vdGhpbmcKICAgICAgICAgICAgICAgIC0gRW5hYmxlCiAgICAgICAgICAgICAgICAtIERpc2FibGUKICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgIGJwZkNvbm5lY3RUaW1lTG9hZEJhbGFuY2luZ0VuYWJsZWQ6CiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogJ0JQRkNvbm5lY3RUaW1lTG9hZEJhbGFuY2luZ0VuYWJsZWQgd2hlbiBpbiBCUEYgbW9kZSwKICAgICAgICAgICAgICAgICAgY29udHJvbHMgd2hldGhlciBGZWxpeCBpbnN0YWxscyB0aGUgY29ubmVjdGlvbi10aW1lIGxvYWQgYmFsYW5jZXIuICBUaGUKICAgICAgICAgICAgICAgICAgY29ubmVjdC10aW1lIGxvYWQgYmFsYW5jZXIgaXMgcmVxdWlyZWQgZm9yIHRoZSBob3N0IHRvIGJlIGFibGUgdG8KICAgICAgICAgICAgICAgICAgcmVhY2ggS3ViZXJuZXRlcyBzZXJ2aWNlcyBhbmQgaXQgaW1wcm92ZXMgdGhlIHBlcmZvcm1hbmNlIG9mIHBvZC10by1zZXJ2aWNlCiAgICAgICAgICAgICAgICAgIGNvbm5lY3Rpb25zLiAgVGhlIG9ubHkgcmVhc29uIHRvIGRpc2FibGUgaXQgaXMgZm9yIGRlYnVnZ2luZyBwdXJwb3Nlcy4gIFtEZWZhdWx0OgogICAgICAgICAgICAgICAgICB0cnVlXScKICAgICAgICAgICAgICAgIHR5cGU6IGJvb2xlYW4KICAgICAgICAgICAgICBicGZEYXRhSWZhY2VQYXR0ZXJuOgogICAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICdCUEZEYXRhSWZhY2VQYXR0ZXJuIGlzIGEgcmVndWxhciBleHByZXNzaW9uIHRoYXQgY29udHJvbHMKICAgICAgICAgICAgICAgICAgd2hpY2ggaW50ZXJmYWNlcyBGZWxpeCBzaG91bGQgYXR0YWNoIEJQRiBwcm9ncmFtcyB0byBpbiBvcmRlciB0bwogICAgICAgICAgICAgICAgICBjYXRjaCB0cmFmZmljIHRvL2Zyb20gdGhlIG5ldHdvcmsuICBUaGlzIG5lZWRzIHRvIG1hdGNoIHRoZSBpbnRlcmZhY2VzCiAgICAgICAgICAgICAgICAgIHRoYXQgQ2FsaWNvIHdvcmtsb2FkIHRyYWZmaWMgZmxvd3Mgb3ZlciBhcyB3ZWxsIGFzIGFueSBpbnRlcmZhY2VzCiAgICAgICAgICAgICAgICAgIHRoYXQgaGFuZGxlIGluY29taW5nIHRyYWZmaWMgdG8gbm9kZXBvcnRzIGFuZCBzZXJ2aWNlcyBmcm9tIG91dHNpZGUKICAgICAgICAgICAgICAgICAgdGhlIGNsdXN0ZXIuICBJdCBzaG91bGQgbm90IG1hdGNoIHRoZSB3b3JrbG9hZCBpbnRlcmZhY2VzICh1c3VhbGx5CiAgICAgICAgICAgICAgICAgIG5hbWVkIGNhbGkuLi4pLiBbRGVmYXVsdDogXihlbi4qfGV0aC4qfHR1bmwwJCldJwogICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgYnBmRGlzYWJsZVVucHJpdmlsZWdlZDoKICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAnQlBGRGlzYWJsZVVucHJpdmlsZWdlZCwgaWYgZW5hYmxlZCwgRmVsaXggc2V0cyB0aGUga2VybmVsLnVucHJpdmlsZWdlZF9icGZfZGlzYWJsZWQKICAgICAgICAgICAgICAgICAgc3lzY3RsIHRvIGRpc2FibGUgdW5wcml2aWxlZ2VkIHVzZSBvZiBCUEYuICBUaGlzIGVuc3VyZXMgdGhhdCB1bnByaXZpbGVnZWQKICAgICAgICAgICAgICAgICAgdXNlcnMgY2Fubm90IGFjY2VzcyBDYWxpY28nJ3MgQlBGIG1hcHMgYW5kIGNhbm5vdCBpbnNlcnQgdGhlaXIgb3duCiAgICAgICAgICAgICAgICAgIEJQRiBwcm9ncmFtcyB0byBpbnRlcmZlcmUgd2l0aCBDYWxpY28nJ3MuIFtEZWZhdWx0OiB0cnVlXScKICAgICAgICAgICAgICAgIHR5cGU6IGJvb2xlYW4KICAgICAgICAgICAgICBicGZFbmFibGVkOgogICAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICdCUEZFbmFibGVkLCBpZiBlbmFibGVkIEZlbGl4IHdpbGwgdXNlIHRoZSBCUEYgZGF0YXBsYW5lLgogICAgICAgICAgICAgICAgICBbRGVmYXVsdDogZmFsc2VdJwogICAgICAgICAgICAgICAgdHlwZTogYm9vbGVhbgogICAgICAgICAgICAgIGJwZkV4dGVybmFsU2VydmljZU1vZGU6CiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogJ0JQRkV4dGVybmFsU2VydmljZU1vZGUgaW4gQlBGIG1vZGUsIGNvbnRyb2xzIGhvdyBjb25uZWN0aW9ucwogICAgICAgICAgICAgICAgICBmcm9tIG91dHNpZGUgdGhlIGNsdXN0ZXIgdG8gc2VydmljZXMgKG5vZGUgcG9ydHMgYW5kIGNsdXN0ZXIgSVBzKQogICAgICAgICAgICAgICAgICBhcmUgZm9yd2FyZGVkIHRvIHJlbW90ZSB3b3JrbG9hZHMuICBJZiBzZXQgdG8gIlR1bm5lbCIgdGhlbiBib3RoCiAgICAgICAgICAgICAgICAgIHJlcXVlc3QgYW5kIHJlc3BvbnNlIHRyYWZmaWMgaXMgdHVubmVsZWQgdG8gdGhlIHJlbW90ZSBub2RlLiAgSWYKICAgICAgICAgICAgICAgICAgc2V0IHRvICJEU1IiLCB0aGUgcmVxdWVzdCB0cmFmZmljIGlzIHR1bm5lbGVkIGJ1dCB0aGUgcmVzcG9uc2UgdHJhZmZpYwogICAgICAgICAgICAgICAgICBpcyBzZW50IGRpcmVjdGx5IGZyb20gdGhlIHJlbW90ZSBub2RlLiAgSW4gIkRTUiIgbW9kZSwgdGhlIHJlbW90ZQogICAgICAgICAgICAgICAgICBub2RlIGFwcGVhcnMgdG8gdXNlIHRoZSBJUCBvZiB0aGUgaW5ncmVzcyBub2RlOyB0aGlzIHJlcXVpcmVzIGEKICAgICAgICAgICAgICAgICAgcGVybWlzc2l2ZSBMMiBuZXR3b3JrLiAgW0RlZmF1bHQ6IFR1bm5lbF0nCiAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICBicGZLdWJlUHJveHlFbmRwb2ludFNsaWNlc0VuYWJsZWQ6CiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogQlBGS3ViZVByb3h5RW5kcG9pbnRTbGljZXNFbmFibGVkIGluIEJQRiBtb2RlLCBjb250cm9scwogICAgICAgICAgICAgICAgICB3aGV0aGVyIEZlbGl4J3MgZW1iZWRkZWQga3ViZS1wcm94eSBhY2NlcHRzIEVuZHBvaW50U2xpY2VzIG9yIG5vdC4KICAgICAgICAgICAgICAgIHR5cGU6IGJvb2xlYW4KICAgICAgICAgICAgICBicGZLdWJlUHJveHlJcHRhYmxlc0NsZWFudXBFbmFibGVkOgogICAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICdCUEZLdWJlUHJveHlJcHRhYmxlc0NsZWFudXBFbmFibGVkLCBpZiBlbmFibGVkIGluIEJQRgogICAgICAgICAgICAgICAgICBtb2RlLCBGZWxpeCB3aWxsIHByb2FjdGl2ZWx5IGNsZWFuIHVwIHRoZSB1cHN0cmVhbSBLdWJlcm5ldGVzIGt1YmUtcHJveHknJ3MKICAgICAgICAgICAgICAgICAgaXB0YWJsZXMgY2hhaW5zLiAgU2hvdWxkIG9ubHkgYmUgZW5hYmxlZCBpZiBrdWJlLXByb3h5IGlzIG5vdCBydW5uaW5nLiAgW0RlZmF1bHQ6CiAgICAgICAgICAgICAgICAgIHRydWVdJwogICAgICAgICAgICAgICAgdHlwZTogYm9vbGVhbgogICAgICAgICAgICAgIGJwZkt1YmVQcm94eU1pblN5bmNQZXJpb2Q6CiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogJ0JQRkt1YmVQcm94eU1pblN5bmNQZXJpb2QsIGluIEJQRiBtb2RlLCBjb250cm9scyB0aGUKICAgICAgICAgICAgICAgICAgbWluaW11bSB0aW1lIGJldHdlZW4gdXBkYXRlcyB0byB0aGUgZGF0YXBsYW5lIGZvciBGZWxpeCcncyBlbWJlZGRlZAogICAgICAgICAgICAgICAgICBrdWJlLXByb3h5LiAgTG93ZXIgdmFsdWVzIGdpdmUgcmVkdWNlZCBzZXQtdXAgbGF0ZW5jeS4gIEhpZ2hlciB2YWx1ZXMKICAgICAgICAgICAgICAgICAgcmVkdWNlIEZlbGl4IENQVSB1c2FnZSBieSBiYXRjaGluZyB1cCBtb3JlIHdvcmsuICBbRGVmYXVsdDogMXNdJwogICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgYnBmTG9nTGV2ZWw6CiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogJ0JQRkxvZ0xldmVsIGNvbnRyb2xzIHRoZSBsb2cgbGV2ZWwgb2YgdGhlIEJQRiBwcm9ncmFtcwogICAgICAgICAgICAgICAgICB3aGVuIGluIEJQRiBkYXRhcGxhbmUgbW9kZS4gIE9uZSBvZiAiT2ZmIiwgIkluZm8iLCBvciAiRGVidWciLiAgVGhlCiAgICAgICAgICAgICAgICAgIGxvZ3MgYXJlIGVtaXR0ZWQgdG8gdGhlIEJQRiB0cmFjZSBwaXBlLCBhY2Nlc3NpYmxlIHdpdGggdGhlIGNvbW1hbmQKICAgICAgICAgICAgICAgICAgYHRjIGV4ZWMgYnBmIGRlYnVnYC4gW0RlZmF1bHQ6IE9mZl0uJwogICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgY2hhaW5JbnNlcnRNb2RlOgogICAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICdDaGFpbkluc2VydE1vZGUgY29udHJvbHMgd2hldGhlciBGZWxpeCBob29rcyB0aGUga2VybmVs4oCZcwogICAgICAgICAgICAgICAgICB0b3AtbGV2ZWwgaXB0YWJsZXMgY2hhaW5zIGJ5IGluc2VydGluZyBhIHJ1bGUgYXQgdGhlIHRvcCBvZiB0aGUKICAgICAgICAgICAgICAgICAgY2hhaW4gb3IgYnkgYXBwZW5kaW5nIGEgcnVsZSBhdCB0aGUgYm90dG9tLiBpbnNlcnQgaXMgdGhlIHNhZmUgZGVmYXVsdAogICAgICAgICAgICAgICAgICBzaW5jZSBpdCBwcmV2ZW50cyBDYWxpY2/igJlzIHJ1bGVzIGZyb20gYmVpbmcgYnlwYXNzZWQuIElmIHlvdSBzd2l0Y2gKICAgICAgICAgICAgICAgICAgdG8gYXBwZW5kIG1vZGUsIGJlIHN1cmUgdGhhdCB0aGUgb3RoZXIgcnVsZXMgaW4gdGhlIGNoYWlucyBzaWduYWwKICAgICAgICAgICAgICAgICAgYWNjZXB0YW5jZSBieSBmYWxsaW5nIHRocm91Z2ggdG8gdGhlIENhbGljbyBydWxlcywgb3RoZXJ3aXNlIHRoZQogICAgICAgICAgICAgICAgICBDYWxpY28gcG9saWN5IHdpbGwgYmUgYnlwYXNzZWQuIFtEZWZhdWx0OiBpbnNlcnRdJwogICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgZGF0YXBsYW5lRHJpdmVyOgogICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgZGVidWdEaXNhYmxlTG9nRHJvcHBpbmc6CiAgICAgICAgICAgICAgICB0eXBlOiBib29sZWFuCiAgICAgICAgICAgICAgZGVidWdNZW1vcnlQcm9maWxlUGF0aDoKICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgIGRlYnVnU2ltdWxhdGVDYWxjR3JhcGhIYW5nQWZ0ZXI6CiAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICBkZWJ1Z1NpbXVsYXRlRGF0YXBsYW5lSGFuZ0FmdGVyOgogICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgZGVmYXVsdEVuZHBvaW50VG9Ib3N0QWN0aW9uOgogICAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICdEZWZhdWx0RW5kcG9pbnRUb0hvc3RBY3Rpb24gY29udHJvbHMgd2hhdCBoYXBwZW5zIHRvCiAgICAgICAgICAgICAgICAgIHRyYWZmaWMgdGhhdCBnb2VzIGZyb20gYSB3b3JrbG9hZCBlbmRwb2ludCB0byB0aGUgaG9zdCBpdHNlbGYgKGFmdGVyCiAgICAgICAgICAgICAgICAgIHRoZSB0cmFmZmljIGhpdHMgdGhlIGVuZHBvaW50IGVncmVzcyBwb2xpY3kpLiBCeSBkZWZhdWx0IENhbGljbwogICAgICAgICAgICAgICAgICBibG9ja3MgdHJhZmZpYyBmcm9tIHdvcmtsb2FkIGVuZHBvaW50cyB0byB0aGUgaG9zdCBpdHNlbGYgd2l0aCBhbgogICAgICAgICAgICAgICAgICBpcHRhYmxlcyDigJxEUk9Q4oCdIGFjdGlvbi4gSWYgeW91IHdhbnQgdG8gYWxsb3cgc29tZSBvciBhbGwgdHJhZmZpYwogICAgICAgICAgICAgICAgICBmcm9tIGVuZHBvaW50IHRvIGhvc3QsIHNldCB0aGlzIHBhcmFtZXRlciB0byBSRVRVUk4gb3IgQUNDRVBULiBVc2UKICAgICAgICAgICAgICAgICAgUkVUVVJOIGlmIHlvdSBoYXZlIHlvdXIgb3duIHJ1bGVzIGluIHRoZSBpcHRhYmxlcyDigJxJTlBVVOKAnSBjaGFpbjsKICAgICAgICAgICAgICAgICAgQ2FsaWNvIHdpbGwgaW5zZXJ0IGl0cyBydWxlcyBhdCB0aGUgdG9wIG9mIHRoYXQgY2hhaW4sIHRoZW4g4oCcUkVUVVJO4oCdCiAgICAgICAgICAgICAgICAgIHBhY2tldHMgdG8gdGhlIOKAnElOUFVU4oCdIGNoYWluIG9uY2UgaXQgaGFzIGNvbXBsZXRlZCBwcm9jZXNzaW5nIHdvcmtsb2FkCiAgICAgICAgICAgICAgICAgIGVuZHBvaW50IGVncmVzcyBwb2xpY3kuIFVzZSBBQ0NFUFQgdG8gdW5jb25kaXRpb25hbGx5IGFjY2VwdCBwYWNrZXRzCiAgICAgICAgICAgICAgICAgIGZyb20gd29ya2xvYWRzIGFmdGVyIHByb2Nlc3Npbmcgd29ya2xvYWQgZW5kcG9pbnQgZWdyZXNzIHBvbGljeS4KICAgICAgICAgICAgICAgICAgW0RlZmF1bHQ6IERyb3BdJwogICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgZGV2aWNlUm91dGVQcm90b2NvbDoKICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBUaGlzIGRlZmluZXMgdGhlIHJvdXRlIHByb3RvY29sIGFkZGVkIHRvIHByb2dyYW1tZWQgZGV2aWNlCiAgICAgICAgICAgICAgICAgIHJvdXRlcywgYnkgZGVmYXVsdCB0aGlzIHdpbGwgYmUgUlRQUk9UX0JPT1Qgd2hlbiBsZWZ0IGJsYW5rLgogICAgICAgICAgICAgICAgdHlwZTogaW50ZWdlcgogICAgICAgICAgICAgIGRldmljZVJvdXRlU291cmNlQWRkcmVzczoKICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBUaGlzIGlzIHRoZSBzb3VyY2UgYWRkcmVzcyB0byB1c2Ugb24gcHJvZ3JhbW1lZCBkZXZpY2UKICAgICAgICAgICAgICAgICAgcm91dGVzLiBCeSBkZWZhdWx0IHRoZSBzb3VyY2UgYWRkcmVzcyBpcyBsZWZ0IGJsYW5rLCBsZWF2aW5nIHRoZQogICAgICAgICAgICAgICAgICBrZXJuZWwgdG8gY2hvb3NlIHRoZSBzb3VyY2UgYWRkcmVzcyB1c2VkLgogICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgZGlzYWJsZUNvbm50cmFja0ludmFsaWRDaGVjazoKICAgICAgICAgICAgICAgIHR5cGU6IGJvb2xlYW4KICAgICAgICAgICAgICBlbmRwb2ludFJlcG9ydGluZ0RlbGF5OgogICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgZW5kcG9pbnRSZXBvcnRpbmdFbmFibGVkOgogICAgICAgICAgICAgICAgdHlwZTogYm9vbGVhbgogICAgICAgICAgICAgIGV4dGVybmFsTm9kZXNMaXN0OgogICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IEV4dGVybmFsTm9kZXNDSURSTGlzdCBpcyBhIGxpc3Qgb2YgQ0lEUidzIG9mIGV4dGVybmFsLW5vbi1jYWxpY28tbm9kZXMKICAgICAgICAgICAgICAgICAgd2hpY2ggbWF5IHNvdXJjZSB0dW5uZWwgdHJhZmZpYyBhbmQgaGF2ZSB0aGUgdHVubmVsZWQgdHJhZmZpYyBiZQogICAgICAgICAgICAgICAgICBhY2NlcHRlZCBhdCBjYWxpY28gbm9kZXMuCiAgICAgICAgICAgICAgICBpdGVtczoKICAgICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgICB0eXBlOiBhcnJheQogICAgICAgICAgICAgIGZhaWxzYWZlSW5ib3VuZEhvc3RQb3J0czoKICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAnRmFpbHNhZmVJbmJvdW5kSG9zdFBvcnRzIGlzIGEgY29tbWEtZGVsaW1pdGVkIGxpc3Qgb2YKICAgICAgICAgICAgICAgICAgVURQL1RDUCBwb3J0cyB0aGF0IEZlbGl4IHdpbGwgYWxsb3cgaW5jb21pbmcgdHJhZmZpYyB0byBob3N0IGVuZHBvaW50cwogICAgICAgICAgICAgICAgICBvbiBpcnJlc3BlY3RpdmUgb2YgdGhlIHNlY3VyaXR5IHBvbGljeS4gVGhpcyBpcyB1c2VmdWwgdG8gYXZvaWQKICAgICAgICAgICAgICAgICAgYWNjaWRlbnRhbGx5IGN1dHRpbmcgb2ZmIGEgaG9zdCB3aXRoIGluY29ycmVjdCBjb25maWd1cmF0aW9uLiBFYWNoCiAgICAgICAgICAgICAgICAgIHBvcnQgc2hvdWxkIGJlIHNwZWNpZmllZCBhcyB0Y3A6PHBvcnQtbnVtYmVyPiBvciB1ZHA6PHBvcnQtbnVtYmVyPi4KICAgICAgICAgICAgICAgICAgRm9yIGJhY2stY29tcGF0aWJpbGl0eSwgaWYgdGhlIHByb3RvY29sIGlzIG5vdCBzcGVjaWZpZWQsIGl0IGRlZmF1bHRzCiAgICAgICAgICAgICAgICAgIHRvIOKAnHRjcOKAnS4gVG8gZGlzYWJsZSBhbGwgaW5ib3VuZCBob3N0IHBvcnRzLCB1c2UgdGhlIHZhbHVlIG5vbmUuCiAgICAgICAgICAgICAgICAgIFRoZSBkZWZhdWx0IHZhbHVlIGFsbG93cyBzc2ggYWNjZXNzIGFuZCBESENQLiBbRGVmYXVsdDogdGNwOjIyLAogICAgICAgICAgICAgICAgICB1ZHA6NjgsIHRjcDoxNzksIHRjcDoyMzc5LCB0Y3A6MjM4MCwgdGNwOjY0NDMsIHRjcDo2NjY2LCB0Y3A6NjY2N10nCiAgICAgICAgICAgICAgICBpdGVtczoKICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IFByb3RvUG9ydCBpcyBjb21iaW5hdGlvbiBvZiBwcm90b2NvbCBhbmQgcG9ydCwgYm90aAogICAgICAgICAgICAgICAgICAgIG11c3QgYmUgc3BlY2lmaWVkLgogICAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzOgogICAgICAgICAgICAgICAgICAgIHBvcnQ6CiAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBpbnRlZ2VyCiAgICAgICAgICAgICAgICAgICAgcHJvdG9jb2w6CiAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICAgICAgcmVxdWlyZWQ6CiAgICAgICAgICAgICAgICAgIC0gcG9ydAogICAgICAgICAgICAgICAgICAtIHByb3RvY29sCiAgICAgICAgICAgICAgICAgIHR5cGU6IG9iamVjdAogICAgICAgICAgICAgICAgdHlwZTogYXJyYXkKICAgICAgICAgICAgICBmYWlsc2FmZU91dGJvdW5kSG9zdFBvcnRzOgogICAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICdGYWlsc2FmZU91dGJvdW5kSG9zdFBvcnRzIGlzIGEgY29tbWEtZGVsaW1pdGVkIGxpc3QKICAgICAgICAgICAgICAgICAgb2YgVURQL1RDUCBwb3J0cyB0aGF0IEZlbGl4IHdpbGwgYWxsb3cgb3V0Z29pbmcgdHJhZmZpYyBmcm9tIGhvc3QKICAgICAgICAgICAgICAgICAgZW5kcG9pbnRzIHRvIGlycmVzcGVjdGl2ZSBvZiB0aGUgc2VjdXJpdHkgcG9saWN5LiBUaGlzIGlzIHVzZWZ1bAogICAgICAgICAgICAgICAgICB0byBhdm9pZCBhY2NpZGVudGFsbHkgY3V0dGluZyBvZmYgYSBob3N0IHdpdGggaW5jb3JyZWN0IGNvbmZpZ3VyYXRpb24uCiAgICAgICAgICAgICAgICAgIEVhY2ggcG9ydCBzaG91bGQgYmUgc3BlY2lmaWVkIGFzIHRjcDo8cG9ydC1udW1iZXI+IG9yIHVkcDo8cG9ydC1udW1iZXI+LgogICAgICAgICAgICAgICAgICBGb3IgYmFjay1jb21wYXRpYmlsaXR5LCBpZiB0aGUgcHJvdG9jb2wgaXMgbm90IHNwZWNpZmllZCwgaXQgZGVmYXVsdHMKICAgICAgICAgICAgICAgICAgdG8g4oCcdGNw4oCdLiBUbyBkaXNhYmxlIGFsbCBvdXRib3VuZCBob3N0IHBvcnRzLCB1c2UgdGhlIHZhbHVlIG5vbmUuCiAgICAgICAgICAgICAgICAgIFRoZSBkZWZhdWx0IHZhbHVlIG9wZW5zIGV0Y2TigJlzIHN0YW5kYXJkIHBvcnRzIHRvIGVuc3VyZSB0aGF0IEZlbGl4CiAgICAgICAgICAgICAgICAgIGRvZXMgbm90IGdldCBjdXQgb2ZmIGZyb20gZXRjZCBhcyB3ZWxsIGFzIGFsbG93aW5nIERIQ1AgYW5kIEROUy4KICAgICAgICAgICAgICAgICAgW0RlZmF1bHQ6IHRjcDoxNzksIHRjcDoyMzc5LCB0Y3A6MjM4MCwgdGNwOjY0NDMsIHRjcDo2NjY2LCB0Y3A6NjY2NywKICAgICAgICAgICAgICAgICAgdWRwOjUzLCB1ZHA6NjddJwogICAgICAgICAgICAgICAgaXRlbXM6CiAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBQcm90b1BvcnQgaXMgY29tYmluYXRpb24gb2YgcHJvdG9jb2wgYW5kIHBvcnQsIGJvdGgKICAgICAgICAgICAgICAgICAgICBtdXN0IGJlIHNwZWNpZmllZC4KICAgICAgICAgICAgICAgICAgcHJvcGVydGllczoKICAgICAgICAgICAgICAgICAgICBwb3J0OgogICAgICAgICAgICAgICAgICAgICAgdHlwZTogaW50ZWdlcgogICAgICAgICAgICAgICAgICAgIHByb3RvY29sOgogICAgICAgICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgICAgIHJlcXVpcmVkOgogICAgICAgICAgICAgICAgICAtIHBvcnQKICAgICAgICAgICAgICAgICAgLSBwcm90b2NvbAogICAgICAgICAgICAgICAgICB0eXBlOiBvYmplY3QKICAgICAgICAgICAgICAgIHR5cGU6IGFycmF5CiAgICAgICAgICAgICAgZmVhdHVyZURldGVjdE92ZXJyaWRlOgogICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IEZlYXR1cmVEZXRlY3RPdmVycmlkZSBpcyB1c2VkIHRvIG92ZXJyaWRlIHRoZSBmZWF0dXJlCiAgICAgICAgICAgICAgICAgIGRldGVjdGlvbi4gVmFsdWVzIGFyZSBzcGVjaWZpZWQgaW4gYSBjb21tYSBzZXBhcmF0ZWQgbGlzdCB3aXRoIG5vCiAgICAgICAgICAgICAgICAgIHNwYWNlcywgZXhhbXBsZTsgIlNOQVRGdWxseVJhbmRvbT10cnVlLE1BU1FGdWxseVJhbmRvbT1mYWxzZSxSZXN0b3JlU3VwcG9ydHNMb2NrPSIuCiAgICAgICAgICAgICAgICAgICJ0cnVlIiBvciAiZmFsc2UiIHdpbGwgZm9yY2UgdGhlIGZlYXR1cmUsIGVtcHR5IG9yIG9taXR0ZWQgdmFsdWVzCiAgICAgICAgICAgICAgICAgIGFyZSBhdXRvLWRldGVjdGVkLgogICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgZ2VuZXJpY1hEUEVuYWJsZWQ6CiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogJ0dlbmVyaWNYRFBFbmFibGVkIGVuYWJsZXMgR2VuZXJpYyBYRFAgc28gbmV0d29yayBjYXJkcwogICAgICAgICAgICAgICAgICB0aGF0IGRvbicndCBzdXBwb3J0IFhEUCBvZmZsb2FkIG9yIGRyaXZlciBtb2RlcyBjYW4gdXNlIFhEUC4gVGhpcwogICAgICAgICAgICAgICAgICBpcyBub3QgcmVjb21tZW5kZWQgc2luY2UgaXQgZG9lc24nJ3QgcHJvdmlkZSBiZXR0ZXIgcGVyZm9ybWFuY2UKICAgICAgICAgICAgICAgICAgdGhhbiBpcHRhYmxlcy4gW0RlZmF1bHQ6IGZhbHNlXScKICAgICAgICAgICAgICAgIHR5cGU6IGJvb2xlYW4KICAgICAgICAgICAgICBoZWFsdGhFbmFibGVkOgogICAgICAgICAgICAgICAgdHlwZTogYm9vbGVhbgogICAgICAgICAgICAgIGhlYWx0aEhvc3Q6CiAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICBoZWFsdGhQb3J0OgogICAgICAgICAgICAgICAgdHlwZTogaW50ZWdlcgogICAgICAgICAgICAgIGludGVyZmFjZUV4Y2x1ZGU6CiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogJ0ludGVyZmFjZUV4Y2x1ZGUgaXMgYSBjb21tYS1zZXBhcmF0ZWQgbGlzdCBvZiBpbnRlcmZhY2VzCiAgICAgICAgICAgICAgICAgIHRoYXQgRmVsaXggc2hvdWxkIGV4Y2x1ZGUgd2hlbiBtb25pdG9yaW5nIGZvciBob3N0IGVuZHBvaW50cy4gVGhlCiAgICAgICAgICAgICAgICAgIGRlZmF1bHQgdmFsdWUgZW5zdXJlcyB0aGF0IEZlbGl4IGlnbm9yZXMgS3ViZXJuZXRlcycnIElQVlMgZHVtbXkKICAgICAgICAgICAgICAgICAgaW50ZXJmYWNlLCB3aGljaCBpcyB1c2VkIGludGVybmFsbHkgYnkga3ViZS1wcm94eS4gSWYgeW91IHdhbnQgdG8KICAgICAgICAgICAgICAgICAgZXhjbHVkZSBtdWx0aXBsZSBpbnRlcmZhY2UgbmFtZXMgdXNpbmcgYSBzaW5nbGUgdmFsdWUsIHRoZSBsaXN0CiAgICAgICAgICAgICAgICAgIHN1cHBvcnRzIHJlZ3VsYXIgZXhwcmVzc2lvbnMuIEZvciByZWd1bGFyIGV4cHJlc3Npb25zIHlvdSBtdXN0IHdyYXAKICAgICAgICAgICAgICAgICAgdGhlIHZhbHVlIHdpdGggJycvJycuIEZvciBleGFtcGxlIGhhdmluZyB2YWx1ZXMgJycvXmt1YmUvLHZldGgxJycKICAgICAgICAgICAgICAgICAgd2lsbCBleGNsdWRlIGFsbCBpbnRlcmZhY2VzIHRoYXQgYmVnaW4gd2l0aCAnJ2t1YmUnJyBhbmQgYWxzbyB0aGUKICAgICAgICAgICAgICAgICAgaW50ZXJmYWNlICcndmV0aDEnJy4gW0RlZmF1bHQ6IGt1YmUtaXB2czBdJwogICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgaW50ZXJmYWNlUHJlZml4OgogICAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICdJbnRlcmZhY2VQcmVmaXggaXMgdGhlIGludGVyZmFjZSBuYW1lIHByZWZpeCB0aGF0IGlkZW50aWZpZXMKICAgICAgICAgICAgICAgICAgd29ya2xvYWQgZW5kcG9pbnRzIGFuZCBzbyBkaXN0aW5ndWlzaGVzIHRoZW0gZnJvbSBob3N0IGVuZHBvaW50CiAgICAgICAgICAgICAgICAgIGludGVyZmFjZXMuIE5vdGU6IGluIGVudmlyb25tZW50cyBvdGhlciB0aGFuIGJhcmUgbWV0YWwsIHRoZSBvcmNoZXN0cmF0b3JzCiAgICAgICAgICAgICAgICAgIGNvbmZpZ3VyZSB0aGlzIGFwcHJvcHJpYXRlbHkuIEZvciBleGFtcGxlIG91ciBLdWJlcm5ldGVzIGFuZCBEb2NrZXIKICAgICAgICAgICAgICAgICAgaW50ZWdyYXRpb25zIHNldCB0aGUg4oCYY2FsaeKAmSB2YWx1ZSwgYW5kIG91ciBPcGVuU3RhY2sgaW50ZWdyYXRpb24KICAgICAgICAgICAgICAgICAgc2V0cyB0aGUg4oCYdGFw4oCZIHZhbHVlLiBbRGVmYXVsdDogY2FsaV0nCiAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICBpbnRlcmZhY2VSZWZyZXNoSW50ZXJ2YWw6CiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogSW50ZXJmYWNlUmVmcmVzaEludGVydmFsIGlzIHRoZSBwZXJpb2QgYXQgd2hpY2ggRmVsaXgKICAgICAgICAgICAgICAgICAgcmVzY2FucyBsb2NhbCBpbnRlcmZhY2VzIHRvIHZlcmlmeSB0aGVpciBzdGF0ZS4gVGhlIHJlc2NhbiBjYW4gYmUKICAgICAgICAgICAgICAgICAgZGlzYWJsZWQgYnkgc2V0dGluZyB0aGUgaW50ZXJ2YWwgdG8gMC4KICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgIGlwaXBFbmFibGVkOgogICAgICAgICAgICAgICAgdHlwZTogYm9vbGVhbgogICAgICAgICAgICAgIGlwaXBNVFU6CiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogJ0lQSVBNVFUgaXMgdGhlIE1UVSB0byBzZXQgb24gdGhlIHR1bm5lbCBkZXZpY2UuIFNlZQogICAgICAgICAgICAgICAgICBDb25maWd1cmluZyBNVFUgW0RlZmF1bHQ6IDE0NDBdJwogICAgICAgICAgICAgICAgdHlwZTogaW50ZWdlcgogICAgICAgICAgICAgIGlwc2V0c1JlZnJlc2hJbnRlcnZhbDoKICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAnSXBzZXRzUmVmcmVzaEludGVydmFsIGlzIHRoZSBwZXJpb2QgYXQgd2hpY2ggRmVsaXggcmUtY2hlY2tzCiAgICAgICAgICAgICAgICAgIGFsbCBpcHRhYmxlcyBzdGF0ZSB0byBlbnN1cmUgdGhhdCBubyBvdGhlciBwcm9jZXNzIGhhcyBhY2NpZGVudGFsbHkKICAgICAgICAgICAgICAgICAgYnJva2VuIENhbGljb+KAmXMgcnVsZXMuIFNldCB0byAwIHRvIGRpc2FibGUgaXB0YWJsZXMgcmVmcmVzaC4gW0RlZmF1bHQ6CiAgICAgICAgICAgICAgICAgIDkwc10nCiAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICBpcHRhYmxlc0JhY2tlbmQ6CiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogSXB0YWJsZXNCYWNrZW5kIHNwZWNpZmllcyB3aGljaCBiYWNrZW5kIG9mIGlwdGFibGVzIHdpbGwKICAgICAgICAgICAgICAgICAgYmUgdXNlZC4gVGhlIGRlZmF1bHQgaXMgbGVnYWN5LgogICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgaXB0YWJsZXNGaWx0ZXJBbGxvd0FjdGlvbjoKICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgIGlwdGFibGVzTG9ja0ZpbGVQYXRoOgogICAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICdJcHRhYmxlc0xvY2tGaWxlUGF0aCBpcyB0aGUgbG9jYXRpb24gb2YgdGhlIGlwdGFibGVzCiAgICAgICAgICAgICAgICAgIGxvY2sgZmlsZS4gWW91IG1heSBuZWVkIHRvIGNoYW5nZSB0aGlzIGlmIHRoZSBsb2NrIGZpbGUgaXMgbm90IGluCiAgICAgICAgICAgICAgICAgIGl0cyBzdGFuZGFyZCBsb2NhdGlvbiAoZm9yIGV4YW1wbGUgaWYgeW91IGhhdmUgbWFwcGVkIGl0IGludG8gRmVsaXjigJlzCiAgICAgICAgICAgICAgICAgIGNvbnRhaW5lciBhdCBhIGRpZmZlcmVudCBwYXRoKS4gW0RlZmF1bHQ6IC9ydW4veHRhYmxlcy5sb2NrXScKICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgIGlwdGFibGVzTG9ja1Byb2JlSW50ZXJ2YWw6CiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogJ0lwdGFibGVzTG9ja1Byb2JlSW50ZXJ2YWwgaXMgdGhlIHRpbWUgdGhhdCBGZWxpeCB3aWxsCiAgICAgICAgICAgICAgICAgIHdhaXQgYmV0d2VlbiBhdHRlbXB0cyB0byBhY3F1aXJlIHRoZSBpcHRhYmxlcyBsb2NrIGlmIGl0IGlzIG5vdAogICAgICAgICAgICAgICAgICBhdmFpbGFibGUuIExvd2VyIHZhbHVlcyBtYWtlIEZlbGl4IG1vcmUgcmVzcG9uc2l2ZSB3aGVuIHRoZSBsb2NrCiAgICAgICAgICAgICAgICAgIGlzIGNvbnRlbmRlZCwgYnV0IHVzZSBtb3JlIENQVS4gW0RlZmF1bHQ6IDUwbXNdJwogICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgaXB0YWJsZXNMb2NrVGltZW91dDoKICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAnSXB0YWJsZXNMb2NrVGltZW91dCBpcyB0aGUgdGltZSB0aGF0IEZlbGl4IHdpbGwgd2FpdAogICAgICAgICAgICAgICAgICBmb3IgdGhlIGlwdGFibGVzIGxvY2ssIG9yIDAsIHRvIGRpc2FibGUuIFRvIHVzZSB0aGlzIGZlYXR1cmUsIEZlbGl4CiAgICAgICAgICAgICAgICAgIG11c3Qgc2hhcmUgdGhlIGlwdGFibGVzIGxvY2sgZmlsZSB3aXRoIGFsbCBvdGhlciBwcm9jZXNzZXMgdGhhdAogICAgICAgICAgICAgICAgICBhbHNvIHRha2UgdGhlIGxvY2suIFdoZW4gcnVubmluZyBGZWxpeCBpbnNpZGUgYSBjb250YWluZXIsIHRoaXMKICAgICAgICAgICAgICAgICAgcmVxdWlyZXMgdGhlIC9ydW4gZGlyZWN0b3J5IG9mIHRoZSBob3N0IHRvIGJlIG1vdW50ZWQgaW50byB0aGUgY2FsaWNvL25vZGUKICAgICAgICAgICAgICAgICAgb3IgY2FsaWNvL2ZlbGl4IGNvbnRhaW5lci4gW0RlZmF1bHQ6IDBzIGRpc2FibGVkXScKICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgIGlwdGFibGVzTWFuZ2xlQWxsb3dBY3Rpb246CiAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICBpcHRhYmxlc01hcmtNYXNrOgogICAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICdJcHRhYmxlc01hcmtNYXNrIGlzIHRoZSBtYXNrIHRoYXQgRmVsaXggc2VsZWN0cyBpdHMKICAgICAgICAgICAgICAgICAgSVBUYWJsZXMgTWFyayBiaXRzIGZyb20uIFNob3VsZCBiZSBhIDMyIGJpdCBoZXhhZGVjaW1hbCBudW1iZXIgd2l0aAogICAgICAgICAgICAgICAgICBhdCBsZWFzdCA4IGJpdHMgc2V0LCBub25lIG9mIHdoaWNoIGNsYXNoIHdpdGggYW55IG90aGVyIG1hcmsgYml0cwogICAgICAgICAgICAgICAgICBpbiB1c2Ugb24gdGhlIHN5c3RlbS4gW0RlZmF1bHQ6IDB4ZmYwMDAwMDBdJwogICAgICAgICAgICAgICAgZm9ybWF0OiBpbnQzMgogICAgICAgICAgICAgICAgdHlwZTogaW50ZWdlcgogICAgICAgICAgICAgIGlwdGFibGVzTkFUT3V0Z29pbmdJbnRlcmZhY2VGaWx0ZXI6CiAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICBpcHRhYmxlc1Bvc3RXcml0ZUNoZWNrSW50ZXJ2YWw6CiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogJ0lwdGFibGVzUG9zdFdyaXRlQ2hlY2tJbnRlcnZhbCBpcyB0aGUgcGVyaW9kIGFmdGVyIEZlbGl4CiAgICAgICAgICAgICAgICAgIGhhcyBkb25lIGEgd3JpdGUgdG8gdGhlIGRhdGFwbGFuZSB0aGF0IGl0IHNjaGVkdWxlcyBhbiBleHRyYSByZWFkCiAgICAgICAgICAgICAgICAgIGJhY2sgaW4gb3JkZXIgdG8gY2hlY2sgdGhlIHdyaXRlIHdhcyBub3QgY2xvYmJlcmVkIGJ5IGFub3RoZXIgcHJvY2Vzcy4KICAgICAgICAgICAgICAgICAgVGhpcyBzaG91bGQgb25seSBvY2N1ciBpZiBhbm90aGVyIGFwcGxpY2F0aW9uIG9uIHRoZSBzeXN0ZW0gZG9lc27igJl0CiAgICAgICAgICAgICAgICAgIHJlc3BlY3QgdGhlIGlwdGFibGVzIGxvY2suIFtEZWZhdWx0OiAxc10nCiAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICBpcHRhYmxlc1JlZnJlc2hJbnRlcnZhbDoKICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAnSXB0YWJsZXNSZWZyZXNoSW50ZXJ2YWwgaXMgdGhlIHBlcmlvZCBhdCB3aGljaCBGZWxpeAogICAgICAgICAgICAgICAgICByZS1jaGVja3MgdGhlIElQIHNldHMgaW4gdGhlIGRhdGFwbGFuZSB0byBlbnN1cmUgdGhhdCBubyBvdGhlciBwcm9jZXNzCiAgICAgICAgICAgICAgICAgIGhhcyBhY2NpZGVudGFsbHkgYnJva2VuIENhbGljb+KAmXMgcnVsZXMuIFNldCB0byAwIHRvIGRpc2FibGUgSVAgc2V0cwogICAgICAgICAgICAgICAgICByZWZyZXNoLiBOb3RlOiB0aGUgZGVmYXVsdCBmb3IgdGhpcyB2YWx1ZSBpcyBsb3dlciB0aGFuIHRoZSBvdGhlcgogICAgICAgICAgICAgICAgICByZWZyZXNoIGludGVydmFscyBhcyBhIHdvcmthcm91bmQgZm9yIGEgTGludXgga2VybmVsIGJ1ZyB0aGF0IHdhcwogICAgICAgICAgICAgICAgICBmaXhlZCBpbiBrZXJuZWwgdmVyc2lvbiA0LjExLiBJZiB5b3UgYXJlIHVzaW5nIHY0LjExIG9yIGdyZWF0ZXIKICAgICAgICAgICAgICAgICAgeW91IG1heSB3YW50IHRvIHNldCB0aGlzIHRvLCBhIGhpZ2hlciB2YWx1ZSB0byByZWR1Y2UgRmVsaXggQ1BVCiAgICAgICAgICAgICAgICAgIHVzYWdlLiBbRGVmYXVsdDogMTBzXScKICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgIGlwdjZTdXBwb3J0OgogICAgICAgICAgICAgICAgdHlwZTogYm9vbGVhbgogICAgICAgICAgICAgIGt1YmVOb2RlUG9ydFJhbmdlczoKICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAnS3ViZU5vZGVQb3J0UmFuZ2VzIGhvbGRzIGxpc3Qgb2YgcG9ydCByYW5nZXMgdXNlZCBmb3IKICAgICAgICAgICAgICAgICAgc2VydmljZSBub2RlIHBvcnRzLiBPbmx5IHVzZWQgaWYgZmVsaXggZGV0ZWN0cyBrdWJlLXByb3h5IHJ1bm5pbmcKICAgICAgICAgICAgICAgICAgaW4gaXB2cyBtb2RlLiBGZWxpeCB1c2VzIHRoZXNlIHJhbmdlcyB0byBzZXBhcmF0ZSBob3N0IGFuZCB3b3JrbG9hZAogICAgICAgICAgICAgICAgICB0cmFmZmljLiBbRGVmYXVsdDogMzAwMDA6MzI3NjddLicKICAgICAgICAgICAgICAgIGl0ZW1zOgogICAgICAgICAgICAgICAgICBhbnlPZjoKICAgICAgICAgICAgICAgICAgLSB0eXBlOiBpbnRlZ2VyCiAgICAgICAgICAgICAgICAgIC0gdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgICAgIHBhdHRlcm46IF4uKgogICAgICAgICAgICAgICAgICB4LWt1YmVybmV0ZXMtaW50LW9yLXN0cmluZzogdHJ1ZQogICAgICAgICAgICAgICAgdHlwZTogYXJyYXkKICAgICAgICAgICAgICBsb2dGaWxlUGF0aDoKICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAnTG9nRmlsZVBhdGggaXMgdGhlIGZ1bGwgcGF0aCB0byB0aGUgRmVsaXggbG9nLiBTZXQgdG8KICAgICAgICAgICAgICAgICAgbm9uZSB0byBkaXNhYmxlIGZpbGUgbG9nZ2luZy4gW0RlZmF1bHQ6IC92YXIvbG9nL2NhbGljby9mZWxpeC5sb2ddJwogICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgbG9nUHJlZml4OgogICAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICdMb2dQcmVmaXggaXMgdGhlIGxvZyBwcmVmaXggdGhhdCBGZWxpeCB1c2VzIHdoZW4gcmVuZGVyaW5nCiAgICAgICAgICAgICAgICAgIExPRyBydWxlcy4gW0RlZmF1bHQ6IGNhbGljby1wYWNrZXRdJwogICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgbG9nU2V2ZXJpdHlGaWxlOgogICAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICdMb2dTZXZlcml0eUZpbGUgaXMgdGhlIGxvZyBzZXZlcml0eSBhYm92ZSB3aGljaCBsb2dzCiAgICAgICAgICAgICAgICAgIGFyZSBzZW50IHRvIHRoZSBsb2cgZmlsZS4gW0RlZmF1bHQ6IEluZm9dJwogICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgbG9nU2V2ZXJpdHlTY3JlZW46CiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogJ0xvZ1NldmVyaXR5U2NyZWVuIGlzIHRoZSBsb2cgc2V2ZXJpdHkgYWJvdmUgd2hpY2ggbG9ncwogICAgICAgICAgICAgICAgICBhcmUgc2VudCB0byB0aGUgc3Rkb3V0LiBbRGVmYXVsdDogSW5mb10nCiAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICBsb2dTZXZlcml0eVN5czoKICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAnTG9nU2V2ZXJpdHlTeXMgaXMgdGhlIGxvZyBzZXZlcml0eSBhYm92ZSB3aGljaCBsb2dzCiAgICAgICAgICAgICAgICAgIGFyZSBzZW50IHRvIHRoZSBzeXNsb2cuIFNldCB0byBOb25lIGZvciBubyBsb2dnaW5nIHRvIHN5c2xvZy4gW0RlZmF1bHQ6CiAgICAgICAgICAgICAgICAgIEluZm9dJwogICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgbWF4SXBzZXRTaXplOgogICAgICAgICAgICAgICAgdHlwZTogaW50ZWdlcgogICAgICAgICAgICAgIG1ldGFkYXRhQWRkcjoKICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAnTWV0YWRhdGFBZGRyIGlzIHRoZSBJUCBhZGRyZXNzIG9yIGRvbWFpbiBuYW1lIG9mIHRoZQogICAgICAgICAgICAgICAgICBzZXJ2ZXIgdGhhdCBjYW4gYW5zd2VyIFZNIHF1ZXJpZXMgZm9yIGNsb3VkLWluaXQgbWV0YWRhdGEuIEluIE9wZW5TdGFjaywKICAgICAgICAgICAgICAgICAgdGhpcyBjb3JyZXNwb25kcyB0byB0aGUgbWFjaGluZSBydW5uaW5nIG5vdmEtYXBpIChvciBpbiBVYnVudHUsCiAgICAgICAgICAgICAgICAgIG5vdmEtYXBpLW1ldGFkYXRhKS4gQSB2YWx1ZSBvZiBub25lIChjYXNlIGluc2Vuc2l0aXZlKSBtZWFucyB0aGF0CiAgICAgICAgICAgICAgICAgIEZlbGl4IHNob3VsZCBub3Qgc2V0IHVwIGFueSBOQVQgcnVsZSBmb3IgdGhlIG1ldGFkYXRhIHBhdGguIFtEZWZhdWx0OgogICAgICAgICAgICAgICAgICAxMjcuMC4wLjFdJwogICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgbWV0YWRhdGFQb3J0OgogICAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICdNZXRhZGF0YVBvcnQgaXMgdGhlIHBvcnQgb2YgdGhlIG1ldGFkYXRhIHNlcnZlci4gVGhpcywKICAgICAgICAgICAgICAgICAgY29tYmluZWQgd2l0aCBnbG9iYWwuTWV0YWRhdGFBZGRyIChpZiBub3Qg4oCYTm9uZeKAmSksIGlzIHVzZWQgdG8gc2V0CiAgICAgICAgICAgICAgICAgIHVwIGEgTkFUIHJ1bGUsIGZyb20gMTY5LjI1NC4xNjkuMjU0OjgwIHRvIE1ldGFkYXRhQWRkcjpNZXRhZGF0YVBvcnQuCiAgICAgICAgICAgICAgICAgIEluIG1vc3QgY2FzZXMgdGhpcyBzaG91bGQgbm90IG5lZWQgdG8gYmUgY2hhbmdlZCBbRGVmYXVsdDogODc3NV0uJwogICAgICAgICAgICAgICAgdHlwZTogaW50ZWdlcgogICAgICAgICAgICAgIG5hdE91dGdvaW5nQWRkcmVzczoKICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBOQVRPdXRnb2luZ0FkZHJlc3Mgc3BlY2lmaWVzIGFuIGFkZHJlc3MgdG8gdXNlIHdoZW4gcGVyZm9ybWluZwogICAgICAgICAgICAgICAgICBzb3VyY2UgTkFUIGZvciB0cmFmZmljIGluIGEgbmF0T3V0Z29pbmcgcG9vbCB0aGF0IGlzIGxlYXZpbmcgdGhlCiAgICAgICAgICAgICAgICAgIG5ldHdvcmsuIEJ5IGRlZmF1bHQgdGhlIGFkZHJlc3MgdXNlZCBpcyBhbiBhZGRyZXNzIG9uIHRoZSBpbnRlcmZhY2UKICAgICAgICAgICAgICAgICAgdGhlIHRyYWZmaWMgaXMgbGVhdmluZyBvbiAoaWUgaXQgdXNlcyB0aGUgaXB0YWJsZXMgTUFTUVVFUkFERSB0YXJnZXQpCiAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICBuYXRQb3J0UmFuZ2U6CiAgICAgICAgICAgICAgICBhbnlPZjoKICAgICAgICAgICAgICAgIC0gdHlwZTogaW50ZWdlcgogICAgICAgICAgICAgICAgLSB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBOQVRQb3J0UmFuZ2Ugc3BlY2lmaWVzIHRoZSByYW5nZSBvZiBwb3J0cyB0aGF0IGlzIHVzZWQKICAgICAgICAgICAgICAgICAgZm9yIHBvcnQgbWFwcGluZyB3aGVuIGRvaW5nIG91dGdvaW5nIE5BVC4gV2hlbiB1bnNldCB0aGUgZGVmYXVsdAogICAgICAgICAgICAgICAgICBiZWhhdmlvciBvZiB0aGUgbmV0d29yayBzdGFjayBpcyB1c2VkLgogICAgICAgICAgICAgICAgcGF0dGVybjogXi4qCiAgICAgICAgICAgICAgICB4LWt1YmVybmV0ZXMtaW50LW9yLXN0cmluZzogdHJ1ZQogICAgICAgICAgICAgIG5ldGxpbmtUaW1lb3V0OgogICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgb3BlbnN0YWNrUmVnaW9uOgogICAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICdPcGVuc3RhY2tSZWdpb24gaXMgdGhlIG5hbWUgb2YgdGhlIHJlZ2lvbiB0aGF0IGEgcGFydGljdWxhcgogICAgICAgICAgICAgICAgICBGZWxpeCBiZWxvbmdzIHRvLiBJbiBhIG11bHRpLXJlZ2lvbiBDYWxpY28vT3BlblN0YWNrIGRlcGxveW1lbnQsCiAgICAgICAgICAgICAgICAgIHRoaXMgbXVzdCBiZSBjb25maWd1cmVkIHNvbWVob3cgZm9yIGVhY2ggRmVsaXggKGhlcmUgaW4gdGhlIGRhdGFtb2RlbCwKICAgICAgICAgICAgICAgICAgb3IgaW4gZmVsaXguY2ZnIG9yIHRoZSBlbnZpcm9ubWVudCBvbiBlYWNoIGNvbXB1dGUgbm9kZSksIGFuZCBtdXN0CiAgICAgICAgICAgICAgICAgIG1hdGNoIHRoZSBbY2FsaWNvXSBvcGVuc3RhY2tfcmVnaW9uIHZhbHVlIGNvbmZpZ3VyZWQgaW4gbmV1dHJvbi5jb25mCiAgICAgICAgICAgICAgICAgIG9uIGVhY2ggbm9kZS4gW0RlZmF1bHQ6IEVtcHR5XScKICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgIHBvbGljeVN5bmNQYXRoUHJlZml4OgogICAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICdQb2xpY3lTeW5jUGF0aFByZWZpeCBpcyB1c2VkIHRvIGJ5IEZlbGl4IHRvIGNvbW11bmljYXRlCiAgICAgICAgICAgICAgICAgIHBvbGljeSBjaGFuZ2VzIHRvIGV4dGVybmFsIHNlcnZpY2VzLCBsaWtlIEFwcGxpY2F0aW9uIGxheWVyIHBvbGljeS4KICAgICAgICAgICAgICAgICAgW0RlZmF1bHQ6IEVtcHR5XScKICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgIHByb21ldGhldXNHb01ldHJpY3NFbmFibGVkOgogICAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICdQcm9tZXRoZXVzR29NZXRyaWNzRW5hYmxlZCBkaXNhYmxlcyBHbyBydW50aW1lIG1ldHJpY3MKICAgICAgICAgICAgICAgICAgY29sbGVjdGlvbiwgd2hpY2ggdGhlIFByb21ldGhldXMgY2xpZW50IGRvZXMgYnkgZGVmYXVsdCwgd2hlbiBzZXQKICAgICAgICAgICAgICAgICAgdG8gZmFsc2UuIFRoaXMgcmVkdWNlcyB0aGUgbnVtYmVyIG9mIG1ldHJpY3MgcmVwb3J0ZWQsIHJlZHVjaW5nCiAgICAgICAgICAgICAgICAgIFByb21ldGhldXMgbG9hZC4gW0RlZmF1bHQ6IHRydWVdJwogICAgICAgICAgICAgICAgdHlwZTogYm9vbGVhbgogICAgICAgICAgICAgIHByb21ldGhldXNNZXRyaWNzRW5hYmxlZDoKICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAnUHJvbWV0aGV1c01ldHJpY3NFbmFibGVkIGVuYWJsZXMgdGhlIFByb21ldGhldXMgbWV0cmljcwogICAgICAgICAgICAgICAgICBzZXJ2ZXIgaW4gRmVsaXggaWYgc2V0IHRvIHRydWUuIFtEZWZhdWx0OiBmYWxzZV0nCiAgICAgICAgICAgICAgICB0eXBlOiBib29sZWFuCiAgICAgICAgICAgICAgcHJvbWV0aGV1c01ldHJpY3NIb3N0OgogICAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICdQcm9tZXRoZXVzTWV0cmljc0hvc3QgaXMgdGhlIGhvc3QgdGhhdCB0aGUgUHJvbWV0aGV1cwogICAgICAgICAgICAgICAgICBtZXRyaWNzIHNlcnZlciBzaG91bGQgYmluZCB0by4gW0RlZmF1bHQ6IGVtcHR5XScKICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgIHByb21ldGhldXNNZXRyaWNzUG9ydDoKICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAnUHJvbWV0aGV1c01ldHJpY3NQb3J0IGlzIHRoZSBUQ1AgcG9ydCB0aGF0IHRoZSBQcm9tZXRoZXVzCiAgICAgICAgICAgICAgICAgIG1ldHJpY3Mgc2VydmVyIHNob3VsZCBiaW5kIHRvLiBbRGVmYXVsdDogOTA5MV0nCiAgICAgICAgICAgICAgICB0eXBlOiBpbnRlZ2VyCiAgICAgICAgICAgICAgcHJvbWV0aGV1c1Byb2Nlc3NNZXRyaWNzRW5hYmxlZDoKICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAnUHJvbWV0aGV1c1Byb2Nlc3NNZXRyaWNzRW5hYmxlZCBkaXNhYmxlcyBwcm9jZXNzIG1ldHJpY3MKICAgICAgICAgICAgICAgICAgY29sbGVjdGlvbiwgd2hpY2ggdGhlIFByb21ldGhldXMgY2xpZW50IGRvZXMgYnkgZGVmYXVsdCwgd2hlbiBzZXQKICAgICAgICAgICAgICAgICAgdG8gZmFsc2UuIFRoaXMgcmVkdWNlcyB0aGUgbnVtYmVyIG9mIG1ldHJpY3MgcmVwb3J0ZWQsIHJlZHVjaW5nCiAgICAgICAgICAgICAgICAgIFByb21ldGhldXMgbG9hZC4gW0RlZmF1bHQ6IHRydWVdJwogICAgICAgICAgICAgICAgdHlwZTogYm9vbGVhbgogICAgICAgICAgICAgIHJlbW92ZUV4dGVybmFsUm91dGVzOgogICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IFdoZXRoZXIgb3Igbm90IHRvIHJlbW92ZSBkZXZpY2Ugcm91dGVzIHRoYXQgaGF2ZSBub3QKICAgICAgICAgICAgICAgICAgYmVlbiBwcm9ncmFtbWVkIGJ5IEZlbGl4LiBEaXNhYmxpbmcgdGhpcyB3aWxsIGFsbG93IGV4dGVybmFsIGFwcGxpY2F0aW9ucwogICAgICAgICAgICAgICAgICB0byBhbHNvIGFkZCBkZXZpY2Ugcm91dGVzLiBUaGlzIGlzIGVuYWJsZWQgYnkgZGVmYXVsdCB3aGljaCBtZWFucwogICAgICAgICAgICAgICAgICB3ZSB3aWxsIHJlbW92ZSBleHRlcm5hbGx5IGFkZGVkIHJvdXRlcy4KICAgICAgICAgICAgICAgIHR5cGU6IGJvb2xlYW4KICAgICAgICAgICAgICByZXBvcnRpbmdJbnRlcnZhbDoKICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAnUmVwb3J0aW5nSW50ZXJ2YWwgaXMgdGhlIGludGVydmFsIGF0IHdoaWNoIEZlbGl4IHJlcG9ydHMKICAgICAgICAgICAgICAgICAgaXRzIHN0YXR1cyBpbnRvIHRoZSBkYXRhc3RvcmUgb3IgMCB0byBkaXNhYmxlLiBNdXN0IGJlIG5vbi16ZXJvCiAgICAgICAgICAgICAgICAgIGluIE9wZW5TdGFjayBkZXBsb3ltZW50cy4gW0RlZmF1bHQ6IDMwc10nCiAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICByZXBvcnRpbmdUVEw6CiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogJ1JlcG9ydGluZ1RUTCBpcyB0aGUgdGltZS10by1saXZlIHNldHRpbmcgZm9yIHByb2Nlc3Mtd2lkZQogICAgICAgICAgICAgICAgICBzdGF0dXMgcmVwb3J0cy4gW0RlZmF1bHQ6IDkwc10nCiAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICByb3V0ZVJlZnJlc2hJbnRlcnZhbDoKICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAnUm91dGVyZWZyZXNoSW50ZXJ2YWwgaXMgdGhlIHBlcmlvZCBhdCB3aGljaCBGZWxpeCByZS1jaGVja3MKICAgICAgICAgICAgICAgICAgdGhlIHJvdXRlcyBpbiB0aGUgZGF0YXBsYW5lIHRvIGVuc3VyZSB0aGF0IG5vIG90aGVyIHByb2Nlc3MgaGFzCiAgICAgICAgICAgICAgICAgIGFjY2lkZW50YWxseSBicm9rZW4gQ2FsaWNv4oCZcyBydWxlcy4gU2V0IHRvIDAgdG8gZGlzYWJsZSByb3V0ZSByZWZyZXNoLgogICAgICAgICAgICAgICAgICBbRGVmYXVsdDogOTBzXScKICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgIHJvdXRlU291cmNlOgogICAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICdSb3V0ZVNvdXJjZSBjb25maWd1cmVzIHdoZXJlIEZlbGl4IGdldHMgaXRzIHJvdXRpbmcKICAgICAgICAgICAgICAgICAgaW5mb3JtYXRpb24uIC0gV29ya2xvYWRJUHM6IHVzZSB3b3JrbG9hZCBlbmRwb2ludHMgdG8gY29uc3RydWN0CiAgICAgICAgICAgICAgICAgIHJvdXRlcy4gLSBDYWxpY29JUEFNOiB0aGUgZGVmYXVsdCAtIHVzZSBJUEFNIGRhdGEgdG8gY29uc3RydWN0IHJvdXRlcy4nCiAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICByb3V0ZVRhYmxlUmFuZ2U6CiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogQ2FsaWNvIHByb2dyYW1zIGFkZGl0aW9uYWwgTGludXggcm91dGUgdGFibGVzIGZvciB2YXJpb3VzCiAgICAgICAgICAgICAgICAgIHB1cnBvc2VzLiAgUm91dGVUYWJsZVJhbmdlIHNwZWNpZmllcyB0aGUgaW5kaWNlcyBvZiB0aGUgcm91dGUgdGFibGVzCiAgICAgICAgICAgICAgICAgIHRoYXQgQ2FsaWNvIHNob3VsZCB1c2UuCiAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzOgogICAgICAgICAgICAgICAgICBtYXg6CiAgICAgICAgICAgICAgICAgICAgdHlwZTogaW50ZWdlcgogICAgICAgICAgICAgICAgICBtaW46CiAgICAgICAgICAgICAgICAgICAgdHlwZTogaW50ZWdlcgogICAgICAgICAgICAgICAgcmVxdWlyZWQ6CiAgICAgICAgICAgICAgICAtIG1heAogICAgICAgICAgICAgICAgLSBtaW4KICAgICAgICAgICAgICAgIHR5cGU6IG9iamVjdAogICAgICAgICAgICAgIHNpZGVjYXJBY2NlbGVyYXRpb25FbmFibGVkOgogICAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICdTaWRlY2FyQWNjZWxlcmF0aW9uRW5hYmxlZCBlbmFibGVzIGV4cGVyaW1lbnRhbCBzaWRlY2FyCiAgICAgICAgICAgICAgICAgIGFjY2VsZXJhdGlvbiBbRGVmYXVsdDogZmFsc2VdJwogICAgICAgICAgICAgICAgdHlwZTogYm9vbGVhbgogICAgICAgICAgICAgIHVzYWdlUmVwb3J0aW5nRW5hYmxlZDoKICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAnVXNhZ2VSZXBvcnRpbmdFbmFibGVkIHJlcG9ydHMgYW5vbnltb3VzIENhbGljbyB2ZXJzaW9uCiAgICAgICAgICAgICAgICAgIG51bWJlciBhbmQgY2x1c3RlciBzaXplIHRvIHByb2plY3RjYWxpY28ub3JnLiBMb2dzIHdhcm5pbmdzIHJldHVybmVkCiAgICAgICAgICAgICAgICAgIGJ5IHRoZSB1c2FnZSBzZXJ2ZXIuIEZvciBleGFtcGxlLCBpZiBhIHNpZ25pZmljYW50IHNlY3VyaXR5IHZ1bG5lcmFiaWxpdHkKICAgICAgICAgICAgICAgICAgaGFzIGJlZW4gZGlzY292ZXJlZCBpbiB0aGUgdmVyc2lvbiBvZiBDYWxpY28gYmVpbmcgdXNlZC4gW0RlZmF1bHQ6CiAgICAgICAgICAgICAgICAgIHRydWVdJwogICAgICAgICAgICAgICAgdHlwZTogYm9vbGVhbgogICAgICAgICAgICAgIHVzYWdlUmVwb3J0aW5nSW5pdGlhbERlbGF5OgogICAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICdVc2FnZVJlcG9ydGluZ0luaXRpYWxEZWxheSBjb250cm9scyB0aGUgbWluaW11bSBkZWxheQogICAgICAgICAgICAgICAgICBiZWZvcmUgRmVsaXggbWFrZXMgYSByZXBvcnQuIFtEZWZhdWx0OiAzMDBzXScKICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgIHVzYWdlUmVwb3J0aW5nSW50ZXJ2YWw6CiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogJ1VzYWdlUmVwb3J0aW5nSW50ZXJ2YWwgY29udHJvbHMgdGhlIGludGVydmFsIGF0IHdoaWNoCiAgICAgICAgICAgICAgICAgIEZlbGl4IG1ha2VzIHJlcG9ydHMuIFtEZWZhdWx0OiA4NjQwMHNdJwogICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgdXNlSW50ZXJuYWxEYXRhcGxhbmVEcml2ZXI6CiAgICAgICAgICAgICAgICB0eXBlOiBib29sZWFuCiAgICAgICAgICAgICAgdnhsYW5FbmFibGVkOgogICAgICAgICAgICAgICAgdHlwZTogYm9vbGVhbgogICAgICAgICAgICAgIHZ4bGFuTVRVOgogICAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICdWWExBTk1UVSBpcyB0aGUgTVRVIHRvIHNldCBvbiB0aGUgdHVubmVsIGRldmljZS4gU2VlCiAgICAgICAgICAgICAgICAgIENvbmZpZ3VyaW5nIE1UVSBbRGVmYXVsdDogMTQ0MF0nCiAgICAgICAgICAgICAgICB0eXBlOiBpbnRlZ2VyCiAgICAgICAgICAgICAgdnhsYW5Qb3J0OgogICAgICAgICAgICAgICAgdHlwZTogaW50ZWdlcgogICAgICAgICAgICAgIHZ4bGFuVk5JOgogICAgICAgICAgICAgICAgdHlwZTogaW50ZWdlcgogICAgICAgICAgICAgIHdpcmVndWFyZEVuYWJsZWQ6CiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogJ1dpcmVndWFyZEVuYWJsZWQgY29udHJvbHMgd2hldGhlciBXaXJlZ3VhcmQgaXMgZW5hYmxlZC4KICAgICAgICAgICAgICAgICAgW0RlZmF1bHQ6IGZhbHNlXScKICAgICAgICAgICAgICAgIHR5cGU6IGJvb2xlYW4KICAgICAgICAgICAgICB3aXJlZ3VhcmRJbnRlcmZhY2VOYW1lOgogICAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICdXaXJlZ3VhcmRJbnRlcmZhY2VOYW1lIHNwZWNpZmllcyB0aGUgbmFtZSB0byB1c2UgZm9yCiAgICAgICAgICAgICAgICAgIHRoZSBXaXJlZ3VhcmQgaW50ZXJmYWNlLiBbRGVmYXVsdDogd2cuY2FsaWNvXScKICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgIHdpcmVndWFyZExpc3RlbmluZ1BvcnQ6CiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogJ1dpcmVndWFyZExpc3RlbmluZ1BvcnQgY29udHJvbHMgdGhlIGxpc3RlbmluZyBwb3J0IHVzZWQKICAgICAgICAgICAgICAgICAgYnkgV2lyZWd1YXJkLiBbRGVmYXVsdDogNTE4MjBdJwogICAgICAgICAgICAgICAgdHlwZTogaW50ZWdlcgogICAgICAgICAgICAgIHdpcmVndWFyZE1UVToKICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAnV2lyZWd1YXJkTVRVIGNvbnRyb2xzIHRoZSBNVFUgb24gdGhlIFdpcmVndWFyZCBpbnRlcmZhY2UuCiAgICAgICAgICAgICAgICAgIFNlZSBDb25maWd1cmluZyBNVFUgW0RlZmF1bHQ6IDE0MjBdJwogICAgICAgICAgICAgICAgdHlwZTogaW50ZWdlcgogICAgICAgICAgICAgIHdpcmVndWFyZFJvdXRpbmdSdWxlUHJpb3JpdHk6CiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogJ1dpcmVndWFyZFJvdXRpbmdSdWxlUHJpb3JpdHkgY29udHJvbHMgdGhlIHByaW9yaXR5IHZhbHVlCiAgICAgICAgICAgICAgICAgIHRvIHVzZSBmb3IgdGhlIFdpcmVndWFyZCByb3V0aW5nIHJ1bGUuIFtEZWZhdWx0OiA5OV0nCiAgICAgICAgICAgICAgICB0eXBlOiBpbnRlZ2VyCiAgICAgICAgICAgICAgeGRwRW5hYmxlZDoKICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAnWERQRW5hYmxlZCBlbmFibGVzIFhEUCBhY2NlbGVyYXRpb24gZm9yIHN1aXRhYmxlIHVudHJhY2tlZAogICAgICAgICAgICAgICAgICBpbmNvbWluZyBkZW55IHJ1bGVzLiBbRGVmYXVsdDogdHJ1ZV0nCiAgICAgICAgICAgICAgICB0eXBlOiBib29sZWFuCiAgICAgICAgICAgICAgeGRwUmVmcmVzaEludGVydmFsOgogICAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICdYRFBSZWZyZXNoSW50ZXJ2YWwgaXMgdGhlIHBlcmlvZCBhdCB3aGljaCBGZWxpeCByZS1jaGVja3MKICAgICAgICAgICAgICAgICAgYWxsIFhEUCBzdGF0ZSB0byBlbnN1cmUgdGhhdCBubyBvdGhlciBwcm9jZXNzIGhhcyBhY2NpZGVudGFsbHkgYnJva2VuCiAgICAgICAgICAgICAgICAgIENhbGljbycncyBCUEYgbWFwcyBvciBhdHRhY2hlZCBwcm9ncmFtcy4gU2V0IHRvIDAgdG8gZGlzYWJsZSBYRFAKICAgICAgICAgICAgICAgICAgcmVmcmVzaC4gW0RlZmF1bHQ6IDkwc10nCiAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgdHlwZTogb2JqZWN0CiAgICAgICAgdHlwZTogb2JqZWN0CiAgICBzZXJ2ZWQ6IHRydWUKICAgIHN0b3JhZ2U6IHRydWUKc3RhdHVzOgogIGFjY2VwdGVkTmFtZXM6CiAgICBraW5kOiAiIgogICAgcGx1cmFsOiAiIgogIGNvbmRpdGlvbnM6IFtdCiAgc3RvcmVkVmVyc2lvbnM6IFtdCgotLS0KCi0tLQphcGlWZXJzaW9uOiBhcGlleHRlbnNpb25zLms4cy5pby92MQpraW5kOiBDdXN0b21SZXNvdXJjZURlZmluaXRpb24KbWV0YWRhdGE6CiAgbmFtZTogZ2xvYmFsbmV0d29ya3BvbGljaWVzLmNyZC5wcm9qZWN0Y2FsaWNvLm9yZwpzcGVjOgogIGdyb3VwOiBjcmQucHJvamVjdGNhbGljby5vcmcKICBuYW1lczoKICAgIGtpbmQ6IEdsb2JhbE5ldHdvcmtQb2xpY3kKICAgIGxpc3RLaW5kOiBHbG9iYWxOZXR3b3JrUG9saWN5TGlzdAogICAgcGx1cmFsOiBnbG9iYWxuZXR3b3JrcG9saWNpZXMKICAgIHNpbmd1bGFyOiBnbG9iYWxuZXR3b3JrcG9saWN5CiAgc2NvcGU6IENsdXN0ZXIKICB2ZXJzaW9uczoKICAtIG5hbWU6IHYxCiAgICBzY2hlbWE6CiAgICAgIG9wZW5BUElWM1NjaGVtYToKICAgICAgICBwcm9wZXJ0aWVzOgogICAgICAgICAgYXBpVmVyc2lvbjoKICAgICAgICAgICAgZGVzY3JpcHRpb246ICdBUElWZXJzaW9uIGRlZmluZXMgdGhlIHZlcnNpb25lZCBzY2hlbWEgb2YgdGhpcyByZXByZXNlbnRhdGlvbgogICAgICAgICAgICAgIG9mIGFuIG9iamVjdC4gU2VydmVycyBzaG91bGQgY29udmVydCByZWNvZ25pemVkIHNjaGVtYXMgdG8gdGhlIGxhdGVzdAogICAgICAgICAgICAgIGludGVybmFsIHZhbHVlLCBhbmQgbWF5IHJlamVjdCB1bnJlY29nbml6ZWQgdmFsdWVzLiBNb3JlIGluZm86IGh0dHBzOi8vZ2l0Lms4cy5pby9jb21tdW5pdHkvY29udHJpYnV0b3JzL2RldmVsL3NpZy1hcmNoaXRlY3R1cmUvYXBpLWNvbnZlbnRpb25zLm1kI3Jlc291cmNlcycKICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICBraW5kOgogICAgICAgICAgICBkZXNjcmlwdGlvbjogJ0tpbmQgaXMgYSBzdHJpbmcgdmFsdWUgcmVwcmVzZW50aW5nIHRoZSBSRVNUIHJlc291cmNlIHRoaXMKICAgICAgICAgICAgICBvYmplY3QgcmVwcmVzZW50cy4gU2VydmVycyBtYXkgaW5mZXIgdGhpcyBmcm9tIHRoZSBlbmRwb2ludCB0aGUgY2xpZW50CiAgICAgICAgICAgICAgc3VibWl0cyByZXF1ZXN0cyB0by4gQ2Fubm90IGJlIHVwZGF0ZWQuIEluIENhbWVsQ2FzZS4gTW9yZSBpbmZvOiBodHRwczovL2dpdC5rOHMuaW8vY29tbXVuaXR5L2NvbnRyaWJ1dG9ycy9kZXZlbC9zaWctYXJjaGl0ZWN0dXJlL2FwaS1jb252ZW50aW9ucy5tZCN0eXBlcy1raW5kcycKICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICBtZXRhZGF0YToKICAgICAgICAgICAgdHlwZTogb2JqZWN0CiAgICAgICAgICBzcGVjOgogICAgICAgICAgICBwcm9wZXJ0aWVzOgogICAgICAgICAgICAgIGFwcGx5T25Gb3J3YXJkOgogICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IEFwcGx5T25Gb3J3YXJkIGluZGljYXRlcyB0byBhcHBseSB0aGUgcnVsZXMgaW4gdGhpcyBwb2xpY3kKICAgICAgICAgICAgICAgICAgb24gZm9yd2FyZCB0cmFmZmljLgogICAgICAgICAgICAgICAgdHlwZTogYm9vbGVhbgogICAgICAgICAgICAgIGRvTm90VHJhY2s6CiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogRG9Ob3RUcmFjayBpbmRpY2F0ZXMgd2hldGhlciBwYWNrZXRzIG1hdGNoZWQgYnkgdGhlIHJ1bGVzCiAgICAgICAgICAgICAgICAgIGluIHRoaXMgcG9saWN5IHNob3VsZCBnbyB0aHJvdWdoIHRoZSBkYXRhIHBsYW5lJ3MgY29ubmVjdGlvbiB0cmFja2luZywKICAgICAgICAgICAgICAgICAgc3VjaCBhcyBMaW51eCBjb25udHJhY2suICBJZiBUcnVlLCB0aGUgcnVsZXMgaW4gdGhpcyBwb2xpY3kgYXJlCiAgICAgICAgICAgICAgICAgIGFwcGxpZWQgYmVmb3JlIGFueSBkYXRhIHBsYW5lIGNvbm5lY3Rpb24gdHJhY2tpbmcsIGFuZCBwYWNrZXRzIGFsbG93ZWQKICAgICAgICAgICAgICAgICAgYnkgdGhpcyBwb2xpY3kgYXJlIG1hcmtlZCBhcyBub3QgdG8gYmUgdHJhY2tlZC4KICAgICAgICAgICAgICAgIHR5cGU6IGJvb2xlYW4KICAgICAgICAgICAgICBlZ3Jlc3M6CiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogVGhlIG9yZGVyZWQgc2V0IG9mIGVncmVzcyBydWxlcy4gIEVhY2ggcnVsZSBjb250YWlucwogICAgICAgICAgICAgICAgICBhIHNldCBvZiBwYWNrZXQgbWF0Y2ggY3JpdGVyaWEgYW5kIGEgY29ycmVzcG9uZGluZyBhY3Rpb24gdG8gYXBwbHkuCiAgICAgICAgICAgICAgICBpdGVtczoKICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICJBIFJ1bGUgZW5jYXBzdWxhdGVzIGEgc2V0IG9mIG1hdGNoIGNyaXRlcmlhIGFuZCBhbgogICAgICAgICAgICAgICAgICAgIGFjdGlvbi4gIEJvdGggc2VsZWN0b3ItYmFzZWQgc2VjdXJpdHkgUG9saWN5IGFuZCBzZWN1cml0eSBQcm9maWxlcwogICAgICAgICAgICAgICAgICAgIHJlZmVyZW5jZSBydWxlcyAtIHNlcGFyYXRlZCBvdXQgYXMgYSBsaXN0IG9mIHJ1bGVzIGZvciBib3RoIGluZ3Jlc3MKICAgICAgICAgICAgICAgICAgICBhbmQgZWdyZXNzIHBhY2tldCBtYXRjaGluZy4gXG4gRWFjaCBwb3NpdGl2ZSBtYXRjaCBjcml0ZXJpYSBoYXMKICAgICAgICAgICAgICAgICAgICBhIG5lZ2F0ZWQgdmVyc2lvbiwgcHJlZml4ZWQgd2l0aCDigJ1Ob3TigJ0uIEFsbCB0aGUgbWF0Y2ggY3JpdGVyaWEKICAgICAgICAgICAgICAgICAgICB3aXRoaW4gYSBydWxlIG11c3QgYmUgc2F0aXNmaWVkIGZvciBhIHBhY2tldCB0byBtYXRjaC4gQSBzaW5nbGUKICAgICAgICAgICAgICAgICAgICBydWxlIGNhbiBjb250YWluIHRoZSBwb3NpdGl2ZSBhbmQgbmVnYXRpdmUgdmVyc2lvbiBvZiBhIG1hdGNoCiAgICAgICAgICAgICAgICAgICAgYW5kIGJvdGggbXVzdCBiZSBzYXRpc2ZpZWQgZm9yIHRoZSBydWxlIHRvIG1hdGNoLiIKICAgICAgICAgICAgICAgICAgcHJvcGVydGllczoKICAgICAgICAgICAgICAgICAgICBhY3Rpb246CiAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICAgICAgICBkZXN0aW5hdGlvbjoKICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBEZXN0aW5hdGlvbiBjb250YWlucyB0aGUgbWF0Y2ggY3JpdGVyaWEgdGhhdCBhcHBseQogICAgICAgICAgICAgICAgICAgICAgICB0byBkZXN0aW5hdGlvbiBlbnRpdHkuCiAgICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzOgogICAgICAgICAgICAgICAgICAgICAgICBuYW1lc3BhY2VTZWxlY3RvcjoKICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogIk5hbWVzcGFjZVNlbGVjdG9yIGlzIGFuIG9wdGlvbmFsIGZpZWxkIHRoYXQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRhaW5zIGEgc2VsZWN0b3IgZXhwcmVzc2lvbi4gT25seSB0cmFmZmljIHRoYXQgb3JpZ2luYXRlcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJvbSAob3IgdGVybWluYXRlcyBhdCkgZW5kcG9pbnRzIHdpdGhpbiB0aGUgc2VsZWN0ZWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWVzcGFjZXMgd2lsbCBiZSBtYXRjaGVkLiBXaGVuIGJvdGggTmFtZXNwYWNlU2VsZWN0b3IKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuZCBTZWxlY3RvciBhcmUgZGVmaW5lZCBvbiB0aGUgc2FtZSBydWxlLCB0aGVuIG9ubHkgd29ya2xvYWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZHBvaW50cyB0aGF0IGFyZSBtYXRjaGVkIGJ5IGJvdGggc2VsZWN0b3JzIHdpbGwgYmUgc2VsZWN0ZWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ5IHRoZSBydWxlLiBcbiBGb3IgTmV0d29ya1BvbGljeSwgYW4gZW1wdHkgTmFtZXNwYWNlU2VsZWN0b3IKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGltcGxpZXMgdGhhdCB0aGUgU2VsZWN0b3IgaXMgbGltaXRlZCB0byBzZWxlY3Rpbmcgb25seQogICAgICAgICAgICAgICAgICAgICAgICAgICAgd29ya2xvYWQgZW5kcG9pbnRzIGluIHRoZSBzYW1lIG5hbWVzcGFjZSBhcyB0aGUgTmV0d29ya1BvbGljeS4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuIEZvciBOZXR3b3JrUG9saWN5LCBgZ2xvYmFsKClgIE5hbWVzcGFjZVNlbGVjdG9yIGltcGxpZXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQgdGhlIFNlbGVjdG9yIGlzIGxpbWl0ZWQgdG8gc2VsZWN0aW5nIG9ubHkgR2xvYmFsTmV0d29ya1NldAogICAgICAgICAgICAgICAgICAgICAgICAgICAgb3IgSG9zdEVuZHBvaW50LiBcbiBGb3IgR2xvYmFsTmV0d29ya1BvbGljeSwgYW4gZW1wdHkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIE5hbWVzcGFjZVNlbGVjdG9yIGltcGxpZXMgdGhlIFNlbGVjdG9yIGFwcGxpZXMgdG8gd29ya2xvYWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZHBvaW50cyBhY3Jvc3MgYWxsIG5hbWVzcGFjZXMuIgogICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgICAgICAgICAgICBuZXRzOgogICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBOZXRzIGlzIGFuIG9wdGlvbmFsIGZpZWxkIHRoYXQgcmVzdHJpY3RzIHRoZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcnVsZSB0byBvbmx5IGFwcGx5IHRvIHRyYWZmaWMgdGhhdCBvcmlnaW5hdGVzIGZyb20gKG9yCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXJtaW5hdGVzIGF0KSBJUCBhZGRyZXNzZXMgaW4gYW55IG9mIHRoZSBnaXZlbiBzdWJuZXRzLgogICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogYXJyYXkKICAgICAgICAgICAgICAgICAgICAgICAgbm90TmV0czoKICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogTm90TmV0cyBpcyB0aGUgbmVnYXRlZCB2ZXJzaW9uIG9mIHRoZSBOZXRzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWVsZC4KICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtczoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IGFycmF5CiAgICAgICAgICAgICAgICAgICAgICAgIG5vdFBvcnRzOgogICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBOb3RQb3J0cyBpcyB0aGUgbmVnYXRlZCB2ZXJzaW9uIG9mIHRoZSBQb3J0cwogICAgICAgICAgICAgICAgICAgICAgICAgICAgZmllbGQuIFNpbmNlIG9ubHkgc29tZSBwcm90b2NvbHMgaGF2ZSBwb3J0cywgaWYgYW55IHBvcnRzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmUgc3BlY2lmaWVkIGl0IHJlcXVpcmVzIHRoZSBQcm90b2NvbCBtYXRjaCBpbiB0aGUgUnVsZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8gYmUgc2V0IHRvICJUQ1AiIG9yICJVRFAiLgogICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgYW55T2Y6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtIHR5cGU6IGludGVnZXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0gdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXR0ZXJuOiBeLioKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHgta3ViZXJuZXRlcy1pbnQtb3Itc3RyaW5nOiB0cnVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogYXJyYXkKICAgICAgICAgICAgICAgICAgICAgICAgbm90U2VsZWN0b3I6CiAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IE5vdFNlbGVjdG9yIGlzIHRoZSBuZWdhdGVkIHZlcnNpb24gb2YgdGhlIFNlbGVjdG9yCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWVsZC4gIFNlZSBTZWxlY3RvciBmaWVsZCBmb3Igc3VidGxldGllcyB3aXRoIG5lZ2F0ZWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdG9ycy4KICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICAgICAgICAgICAgcG9ydHM6CiAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICJQb3J0cyBpcyBhbiBvcHRpb25hbCBmaWVsZCB0aGF0IHJlc3RyaWN0cwogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlIHJ1bGUgdG8gb25seSBhcHBseSB0byB0cmFmZmljIHRoYXQgaGFzIGEgc291cmNlIChkZXN0aW5hdGlvbikKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvcnQgdGhhdCBtYXRjaGVzIG9uZSBvZiB0aGVzZSByYW5nZXMvdmFsdWVzLiBUaGlzIHZhbHVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpcyBhIGxpc3Qgb2YgaW50ZWdlcnMgb3Igc3RyaW5ncyB0aGF0IHJlcHJlc2VudCByYW5nZXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mIHBvcnRzLiBcbiBTaW5jZSBvbmx5IHNvbWUgcHJvdG9jb2xzIGhhdmUgcG9ydHMsIGlmCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbnkgcG9ydHMgYXJlIHNwZWNpZmllZCBpdCByZXF1aXJlcyB0aGUgUHJvdG9jb2wgbWF0Y2gKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluIHRoZSBSdWxlIHRvIGJlIHNldCB0byBcIlRDUFwiIG9yIFwiVURQXCIuIgogICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgYW55T2Y6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtIHR5cGU6IGludGVnZXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0gdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXR0ZXJuOiBeLioKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHgta3ViZXJuZXRlcy1pbnQtb3Itc3RyaW5nOiB0cnVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogYXJyYXkKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0b3I6CiAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICJTZWxlY3RvciBpcyBhbiBvcHRpb25hbCBmaWVsZCB0aGF0IGNvbnRhaW5zCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhIHNlbGVjdG9yIGV4cHJlc3Npb24gKHNlZSBQb2xpY3kgZm9yIHNhbXBsZSBzeW50YXgpLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgXCBPbmx5IHRyYWZmaWMgdGhhdCBvcmlnaW5hdGVzIGZyb20gKHRlcm1pbmF0ZXMgYXQpIGVuZHBvaW50cwogICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hpbmcgdGhlIHNlbGVjdG9yIHdpbGwgYmUgbWF0Y2hlZC4gXG4gTm90ZSB0aGF0OiBpbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkaXRpb24gdG8gdGhlIG5lZ2F0ZWQgdmVyc2lvbiBvZiB0aGUgU2VsZWN0b3IgKHNlZSBOb3RTZWxlY3RvcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgYmVsb3cpLCB0aGUgc2VsZWN0b3IgZXhwcmVzc2lvbiBzeW50YXggaXRzZWxmIHN1cHBvcnRzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZWdhdGlvbi4gIFRoZSB0d28gdHlwZXMgb2YgbmVnYXRpb24gYXJlIHN1YnRseSBkaWZmZXJlbnQuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBPbmUgbmVnYXRlcyB0aGUgc2V0IG9mIG1hdGNoZWQgZW5kcG9pbnRzLCB0aGUgb3RoZXIgbmVnYXRlcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlIHdob2xlIG1hdGNoOiBcbiBcdFNlbGVjdG9yID0gXCIhaGFzKG15X2xhYmVsKVwiIG1hdGNoZXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhY2tldHMgdGhhdCBhcmUgZnJvbSBvdGhlciBDYWxpY28tY29udHJvbGxlZCBcdGVuZHBvaW50cwogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhhdCBkbyBub3QgaGF2ZSB0aGUgbGFiZWwg4oCcbXlfbGFiZWzigJ0uIFxuIFx0Tm90U2VsZWN0b3IKICAgICAgICAgICAgICAgICAgICAgICAgICAgID0gXCJoYXMobXlfbGFiZWwpXCIgbWF0Y2hlcyBwYWNrZXRzIHRoYXQgYXJlIG5vdCBmcm9tCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBDYWxpY28tY29udHJvbGxlZCBcdGVuZHBvaW50cyB0aGF0IGRvIGhhdmUgdGhlIGxhYmVsIOKAnG15X2xhYmVs4oCdLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gVGhlIGVmZmVjdCBpcyB0aGF0IHRoZSBsYXR0ZXIgd2lsbCBhY2NlcHQgcGFja2V0cyBmcm9tCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBub24tQ2FsaWNvIHNvdXJjZXMgd2hlcmVhcyB0aGUgZm9ybWVyIGlzIGxpbWl0ZWQgdG8gcGFja2V0cwogICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJvbSBDYWxpY28tY29udHJvbGxlZCBlbmRwb2ludHMuIgogICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgICAgICAgICAgICBzZXJ2aWNlQWNjb3VudHM6CiAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IFNlcnZpY2VBY2NvdW50cyBpcyBhbiBvcHRpb25hbCBmaWVsZCB0aGF0IHJlc3RyaWN0cwogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlIHJ1bGUgdG8gb25seSBhcHBseSB0byB0cmFmZmljIHRoYXQgb3JpZ2luYXRlcyBmcm9tCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAob3IgdGVybWluYXRlcyBhdCkgYSBwb2QgcnVubmluZyBhcyBhIG1hdGNoaW5nIHNlcnZpY2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjY291bnQuCiAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvcGVydGllczoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWVzOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogTmFtZXMgaXMgYW4gb3B0aW9uYWwgZmllbGQgdGhhdCByZXN0cmljdHMKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGUgcnVsZSB0byBvbmx5IGFwcGx5IHRvIHRyYWZmaWMgdGhhdCBvcmlnaW5hdGVzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJvbSAob3IgdGVybWluYXRlcyBhdCkgYSBwb2QgcnVubmluZyBhcyBhIHNlcnZpY2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY2NvdW50IHdob3NlIG5hbWUgaXMgaW4gdGhlIGxpc3QuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBhcnJheQogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0b3I6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBTZWxlY3RvciBpcyBhbiBvcHRpb25hbCBmaWVsZCB0aGF0IHJlc3RyaWN0cwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBydWxlIHRvIG9ubHkgYXBwbHkgdG8gdHJhZmZpYyB0aGF0IG9yaWdpbmF0ZXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcm9tIChvciB0ZXJtaW5hdGVzIGF0KSBhIHBvZCBydW5uaW5nIGFzIGEgc2VydmljZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjY291bnQgdGhhdCBtYXRjaGVzIHRoZSBnaXZlbiBsYWJlbCBzZWxlY3Rvci4gSWYKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBib3RoIE5hbWVzIGFuZCBTZWxlY3RvciBhcmUgc3BlY2lmaWVkIHRoZW4gdGhleSBhcmUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBTkQnZWQuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IG9iamVjdAogICAgICAgICAgICAgICAgICAgICAgdHlwZTogb2JqZWN0CiAgICAgICAgICAgICAgICAgICAgaHR0cDoKICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBIVFRQIGNvbnRhaW5zIG1hdGNoIGNyaXRlcmlhIHRoYXQgYXBwbHkgdG8gSFRUUAogICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0cy4KICAgICAgICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgICAgICAgICAgICAgICAgIG1ldGhvZHM6CiAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IE1ldGhvZHMgaXMgYW4gb3B0aW9uYWwgZmllbGQgdGhhdCByZXN0cmljdHMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBydWxlIHRvIGFwcGx5IG9ubHkgdG8gSFRUUCByZXF1ZXN0cyB0aGF0IHVzZSBvbmUgb2YKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBsaXN0ZWQgSFRUUCBNZXRob2RzIChlLmcuIEdFVCwgUFVULCBldGMuKSBNdWx0aXBsZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgbWV0aG9kcyBhcmUgT1InZCB0b2dldGhlci4KICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtczoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IGFycmF5CiAgICAgICAgICAgICAgICAgICAgICAgIHBhdGhzOgogICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAnUGF0aHMgaXMgYW4gb3B0aW9uYWwgZmllbGQgdGhhdCByZXN0cmljdHMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBydWxlIHRvIGFwcGx5IHRvIEhUVFAgcmVxdWVzdHMgdGhhdCB1c2Ugb25lIG9mIHRoZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgbGlzdGVkIEhUVFAgUGF0aHMuIE11bHRpcGxlIHBhdGhzIGFyZSBPUicnZCB0b2dldGhlci4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUuZzogLSBleGFjdDogL2ZvbyAtIHByZWZpeDogL2JhciBOT1RFOiBFYWNoIGVudHJ5IG1heQogICAgICAgICAgICAgICAgICAgICAgICAgICAgT05MWSBzcGVjaWZ5IGVpdGhlciBhIGBleGFjdGAgb3IgYSBgcHJlZml4YCBtYXRjaC4gVGhlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0b3Igd2lsbCBjaGVjayBmb3IgaXQuJwogICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICdIVFRQUGF0aCBzcGVjaWZpZXMgYW4gSFRUUCBwYXRoIHRvIG1hdGNoLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJdCBtYXkgYmUgZWl0aGVyIG9mIHRoZSBmb3JtOiBleGFjdDogPHBhdGg+OiB3aGljaCBtYXRjaGVzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBwYXRoIGV4YWN0bHkgb3IgcHJlZml4OiA8cGF0aC1wcmVmaXg+OiB3aGljaCBtYXRjaGVzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBwYXRoIHByZWZpeCcKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4YWN0OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmVmaXg6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBvYmplY3QKICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBhcnJheQogICAgICAgICAgICAgICAgICAgICAgdHlwZTogb2JqZWN0CiAgICAgICAgICAgICAgICAgICAgaWNtcDoKICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBJQ01QIGlzIGFuIG9wdGlvbmFsIGZpZWxkIHRoYXQgcmVzdHJpY3RzIHRoZSBydWxlCiAgICAgICAgICAgICAgICAgICAgICAgIHRvIGFwcGx5IHRvIGEgc3BlY2lmaWMgdHlwZSBhbmQgY29kZSBvZiBJQ01QIHRyYWZmaWMuICBUaGlzCiAgICAgICAgICAgICAgICAgICAgICAgIHNob3VsZCBvbmx5IGJlIHNwZWNpZmllZCBpZiB0aGUgUHJvdG9jb2wgZmllbGQgaXMgc2V0IHRvICJJQ01QIgogICAgICAgICAgICAgICAgICAgICAgICBvciAiSUNNUHY2Ii4KICAgICAgICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6CiAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IE1hdGNoIG9uIGEgc3BlY2lmaWMgSUNNUCBjb2RlLiAgSWYgc3BlY2lmaWVkLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlIFR5cGUgdmFsdWUgbXVzdCBhbHNvIGJlIHNwZWNpZmllZC4gVGhpcyBpcyBhIHRlY2huaWNhbAogICAgICAgICAgICAgICAgICAgICAgICAgICAgbGltaXRhdGlvbiBpbXBvc2VkIGJ5IHRoZSBrZXJuZWzigJlzIGlwdGFibGVzIGZpcmV3YWxsLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpY2ggQ2FsaWNvIHVzZXMgdG8gZW5mb3JjZSB0aGUgcnVsZS4KICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBpbnRlZ2VyCiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6CiAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IE1hdGNoIG9uIGEgc3BlY2lmaWMgSUNNUCB0eXBlLiAgRm9yIGV4YW1wbGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEgdmFsdWUgb2YgOCByZWZlcnMgdG8gSUNNUCBFY2hvIFJlcXVlc3QgKGkuZS4gcGluZ3MpLgogICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IGludGVnZXIKICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IG9iamVjdAogICAgICAgICAgICAgICAgICAgIGlwVmVyc2lvbjoKICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBJUFZlcnNpb24gaXMgYW4gb3B0aW9uYWwgZmllbGQgdGhhdCByZXN0cmljdHMgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIHJ1bGUgdG8gb25seSBtYXRjaCBhIHNwZWNpZmljIElQIHZlcnNpb24uCiAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBpbnRlZ2VyCiAgICAgICAgICAgICAgICAgICAgbWV0YWRhdGE6CiAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogTWV0YWRhdGEgY29udGFpbnMgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiBmb3IgdGhpcwogICAgICAgICAgICAgICAgICAgICAgICBydWxlCiAgICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzOgogICAgICAgICAgICAgICAgICAgICAgICBhbm5vdGF0aW9uczoKICAgICAgICAgICAgICAgICAgICAgICAgICBhZGRpdGlvbmFsUHJvcGVydGllczoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBBbm5vdGF0aW9ucyBpcyBhIHNldCBvZiBrZXkgdmFsdWUgcGFpcnMgdGhhdAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2l2ZSBleHRyYSBpbmZvcm1hdGlvbiBhYm91dCB0aGUgcnVsZQogICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IG9iamVjdAogICAgICAgICAgICAgICAgICAgICAgdHlwZTogb2JqZWN0CiAgICAgICAgICAgICAgICAgICAgbm90SUNNUDoKICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBOb3RJQ01QIGlzIHRoZSBuZWdhdGVkIHZlcnNpb24gb2YgdGhlIElDTVAgZmllbGQuCiAgICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzOgogICAgICAgICAgICAgICAgICAgICAgICBjb2RlOgogICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBNYXRjaCBvbiBhIHNwZWNpZmljIElDTVAgY29kZS4gIElmIHNwZWNpZmllZCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBUeXBlIHZhbHVlIG11c3QgYWxzbyBiZSBzcGVjaWZpZWQuIFRoaXMgaXMgYSB0ZWNobmljYWwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbWl0YXRpb24gaW1wb3NlZCBieSB0aGUga2VybmVs4oCZcyBpcHRhYmxlcyBmaXJld2FsbCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWNoIENhbGljbyB1c2VzIHRvIGVuZm9yY2UgdGhlIHJ1bGUuCiAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogaW50ZWdlcgogICAgICAgICAgICAgICAgICAgICAgICB0eXBlOgogICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBNYXRjaCBvbiBhIHNwZWNpZmljIElDTVAgdHlwZS4gIEZvciBleGFtcGxlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhIHZhbHVlIG9mIDggcmVmZXJzIHRvIElDTVAgRWNobyBSZXF1ZXN0IChpLmUuIHBpbmdzKS4KICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBpbnRlZ2VyCiAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBvYmplY3QKICAgICAgICAgICAgICAgICAgICBub3RQcm90b2NvbDoKICAgICAgICAgICAgICAgICAgICAgIGFueU9mOgogICAgICAgICAgICAgICAgICAgICAgLSB0eXBlOiBpbnRlZ2VyCiAgICAgICAgICAgICAgICAgICAgICAtIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IE5vdFByb3RvY29sIGlzIHRoZSBuZWdhdGVkIHZlcnNpb24gb2YgdGhlIFByb3RvY29sCiAgICAgICAgICAgICAgICAgICAgICAgIGZpZWxkLgogICAgICAgICAgICAgICAgICAgICAgcGF0dGVybjogXi4qCiAgICAgICAgICAgICAgICAgICAgICB4LWt1YmVybmV0ZXMtaW50LW9yLXN0cmluZzogdHJ1ZQogICAgICAgICAgICAgICAgICAgIHByb3RvY29sOgogICAgICAgICAgICAgICAgICAgICAgYW55T2Y6CiAgICAgICAgICAgICAgICAgICAgICAtIHR5cGU6IGludGVnZXIKICAgICAgICAgICAgICAgICAgICAgIC0gdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogIlByb3RvY29sIGlzIGFuIG9wdGlvbmFsIGZpZWxkIHRoYXQgcmVzdHJpY3RzIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBydWxlIHRvIG9ubHkgYXBwbHkgdG8gdHJhZmZpYyBvZiBhIHNwZWNpZmljIElQIHByb3RvY29sLiBSZXF1aXJlZAogICAgICAgICAgICAgICAgICAgICAgICBpZiBhbnkgb2YgdGhlIEVudGl0eVJ1bGVzIGNvbnRhaW4gUG9ydHMgKGJlY2F1c2UgcG9ydHMgb25seQogICAgICAgICAgICAgICAgICAgICAgICBhcHBseSB0byBjZXJ0YWluIHByb3RvY29scykuIFxuIE11c3QgYmUgb25lIG9mIHRoZXNlIHN0cmluZwogICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZXM6IFwiVENQXCIsIFwiVURQXCIsIFwiSUNNUFwiLCBcIklDTVB2NlwiLCBcIlNDVFBcIiwKICAgICAgICAgICAgICAgICAgICAgICAgXCJVRFBMaXRlXCIgb3IgYW4gaW50ZWdlciBpbiB0aGUgcmFuZ2UgMS0yNTUuIgogICAgICAgICAgICAgICAgICAgICAgcGF0dGVybjogXi4qCiAgICAgICAgICAgICAgICAgICAgICB4LWt1YmVybmV0ZXMtaW50LW9yLXN0cmluZzogdHJ1ZQogICAgICAgICAgICAgICAgICAgIHNvdXJjZToKICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBTb3VyY2UgY29udGFpbnMgdGhlIG1hdGNoIGNyaXRlcmlhIHRoYXQgYXBwbHkgdG8KICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlIGVudGl0eS4KICAgICAgICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWVzcGFjZVNlbGVjdG9yOgogICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAiTmFtZXNwYWNlU2VsZWN0b3IgaXMgYW4gb3B0aW9uYWwgZmllbGQgdGhhdAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGFpbnMgYSBzZWxlY3RvciBleHByZXNzaW9uLiBPbmx5IHRyYWZmaWMgdGhhdCBvcmlnaW5hdGVzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcm9tIChvciB0ZXJtaW5hdGVzIGF0KSBlbmRwb2ludHMgd2l0aGluIHRoZSBzZWxlY3RlZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZXNwYWNlcyB3aWxsIGJlIG1hdGNoZWQuIFdoZW4gYm90aCBOYW1lc3BhY2VTZWxlY3RvcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5kIFNlbGVjdG9yIGFyZSBkZWZpbmVkIG9uIHRoZSBzYW1lIHJ1bGUsIHRoZW4gb25seSB3b3JrbG9hZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kcG9pbnRzIHRoYXQgYXJlIG1hdGNoZWQgYnkgYm90aCBzZWxlY3RvcnMgd2lsbCBiZSBzZWxlY3RlZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgYnkgdGhlIHJ1bGUuIFxuIEZvciBOZXR3b3JrUG9saWN5LCBhbiBlbXB0eSBOYW1lc3BhY2VTZWxlY3RvcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaW1wbGllcyB0aGF0IHRoZSBTZWxlY3RvciBpcyBsaW1pdGVkIHRvIHNlbGVjdGluZyBvbmx5CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3b3JrbG9hZCBlbmRwb2ludHMgaW4gdGhlIHNhbWUgbmFtZXNwYWNlIGFzIHRoZSBOZXR3b3JrUG9saWN5LgogICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gRm9yIE5ldHdvcmtQb2xpY3ksIGBnbG9iYWwoKWAgTmFtZXNwYWNlU2VsZWN0b3IgaW1wbGllcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhhdCB0aGUgU2VsZWN0b3IgaXMgbGltaXRlZCB0byBzZWxlY3Rpbmcgb25seSBHbG9iYWxOZXR3b3JrU2V0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvciBIb3N0RW5kcG9pbnQuIFxuIEZvciBHbG9iYWxOZXR3b3JrUG9saWN5LCBhbiBlbXB0eQogICAgICAgICAgICAgICAgICAgICAgICAgICAgTmFtZXNwYWNlU2VsZWN0b3IgaW1wbGllcyB0aGUgU2VsZWN0b3IgYXBwbGllcyB0byB3b3JrbG9hZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kcG9pbnRzIGFjcm9zcyBhbGwgbmFtZXNwYWNlcy4iCiAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgICAgICAgICAgIG5ldHM6CiAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IE5ldHMgaXMgYW4gb3B0aW9uYWwgZmllbGQgdGhhdCByZXN0cmljdHMgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBydWxlIHRvIG9ubHkgYXBwbHkgdG8gdHJhZmZpYyB0aGF0IG9yaWdpbmF0ZXMgZnJvbSAob3IKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlcm1pbmF0ZXMgYXQpIElQIGFkZHJlc3NlcyBpbiBhbnkgb2YgdGhlIGdpdmVuIHN1Ym5ldHMuCiAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXM6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBhcnJheQogICAgICAgICAgICAgICAgICAgICAgICBub3ROZXRzOgogICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBOb3ROZXRzIGlzIHRoZSBuZWdhdGVkIHZlcnNpb24gb2YgdGhlIE5ldHMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpZWxkLgogICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogYXJyYXkKICAgICAgICAgICAgICAgICAgICAgICAgbm90UG9ydHM6CiAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IE5vdFBvcnRzIGlzIHRoZSBuZWdhdGVkIHZlcnNpb24gb2YgdGhlIFBvcnRzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWVsZC4gU2luY2Ugb25seSBzb21lIHByb3RvY29scyBoYXZlIHBvcnRzLCBpZiBhbnkgcG9ydHMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyZSBzcGVjaWZpZWQgaXQgcmVxdWlyZXMgdGhlIFByb3RvY29sIG1hdGNoIGluIHRoZSBSdWxlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byBiZSBzZXQgdG8gIlRDUCIgb3IgIlVEUCIuCiAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXM6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbnlPZjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0gdHlwZTogaW50ZWdlcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgLSB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhdHRlcm46IF4uKgogICAgICAgICAgICAgICAgICAgICAgICAgICAgeC1rdWJlcm5ldGVzLWludC1vci1zdHJpbmc6IHRydWUKICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBhcnJheQogICAgICAgICAgICAgICAgICAgICAgICBub3RTZWxlY3RvcjoKICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogTm90U2VsZWN0b3IgaXMgdGhlIG5lZ2F0ZWQgdmVyc2lvbiBvZiB0aGUgU2VsZWN0b3IKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpZWxkLiAgU2VlIFNlbGVjdG9yIGZpZWxkIGZvciBzdWJ0bGV0aWVzIHdpdGggbmVnYXRlZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0b3JzLgogICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgICAgICAgICAgICBwb3J0czoKICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogIlBvcnRzIGlzIGFuIG9wdGlvbmFsIGZpZWxkIHRoYXQgcmVzdHJpY3RzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGUgcnVsZSB0byBvbmx5IGFwcGx5IHRvIHRyYWZmaWMgdGhhdCBoYXMgYSBzb3VyY2UgKGRlc3RpbmF0aW9uKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9ydCB0aGF0IG1hdGNoZXMgb25lIG9mIHRoZXNlIHJhbmdlcy92YWx1ZXMuIFRoaXMgdmFsdWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzIGEgbGlzdCBvZiBpbnRlZ2VycyBvciBzdHJpbmdzIHRoYXQgcmVwcmVzZW50IHJhbmdlcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgb2YgcG9ydHMuIFxuIFNpbmNlIG9ubHkgc29tZSBwcm90b2NvbHMgaGF2ZSBwb3J0cywgaWYKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFueSBwb3J0cyBhcmUgc3BlY2lmaWVkIGl0IHJlcXVpcmVzIHRoZSBQcm90b2NvbCBtYXRjaAogICAgICAgICAgICAgICAgICAgICAgICAgICAgaW4gdGhlIFJ1bGUgdG8gYmUgc2V0IHRvIFwiVENQXCIgb3IgXCJVRFBcIi4iCiAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXM6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbnlPZjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0gdHlwZTogaW50ZWdlcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgLSB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhdHRlcm46IF4uKgogICAgICAgICAgICAgICAgICAgICAgICAgICAgeC1rdWJlcm5ldGVzLWludC1vci1zdHJpbmc6IHRydWUKICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBhcnJheQogICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RvcjoKICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogIlNlbGVjdG9yIGlzIGFuIG9wdGlvbmFsIGZpZWxkIHRoYXQgY29udGFpbnMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEgc2VsZWN0b3IgZXhwcmVzc2lvbiAoc2VlIFBvbGljeSBmb3Igc2FtcGxlIHN5bnRheCkuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIE9ubHkgdHJhZmZpYyB0aGF0IG9yaWdpbmF0ZXMgZnJvbSAodGVybWluYXRlcyBhdCkgZW5kcG9pbnRzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRjaGluZyB0aGUgc2VsZWN0b3Igd2lsbCBiZSBtYXRjaGVkLiBcbiBOb3RlIHRoYXQ6IGluCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGRpdGlvbiB0byB0aGUgbmVnYXRlZCB2ZXJzaW9uIG9mIHRoZSBTZWxlY3RvciAoc2VlIE5vdFNlbGVjdG9yCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZWxvdyksIHRoZSBzZWxlY3RvciBleHByZXNzaW9uIHN5bnRheCBpdHNlbGYgc3VwcG9ydHMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5lZ2F0aW9uLiAgVGhlIHR3byB0eXBlcyBvZiBuZWdhdGlvbiBhcmUgc3VidGx5IGRpZmZlcmVudC4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9uZSBuZWdhdGVzIHRoZSBzZXQgb2YgbWF0Y2hlZCBlbmRwb2ludHMsIHRoZSBvdGhlciBuZWdhdGVzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGUgd2hvbGUgbWF0Y2g6IFxuIFx0U2VsZWN0b3IgPSBcIiFoYXMobXlfbGFiZWwpXCIgbWF0Y2hlcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFja2V0cyB0aGF0IGFyZSBmcm9tIG90aGVyIENhbGljby1jb250cm9sbGVkIFx0ZW5kcG9pbnRzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGF0IGRvIG5vdCBoYXZlIHRoZSBsYWJlbCDigJxteV9sYWJlbOKAnS4gXG4gXHROb3RTZWxlY3RvcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPSBcImhhcyhteV9sYWJlbClcIiBtYXRjaGVzIHBhY2tldHMgdGhhdCBhcmUgbm90IGZyb20KICAgICAgICAgICAgICAgICAgICAgICAgICAgIENhbGljby1jb250cm9sbGVkIFx0ZW5kcG9pbnRzIHRoYXQgZG8gaGF2ZSB0aGUgbGFiZWwg4oCcbXlfbGFiZWzigJ0uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiBUaGUgZWZmZWN0IGlzIHRoYXQgdGhlIGxhdHRlciB3aWxsIGFjY2VwdCBwYWNrZXRzIGZyb20KICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vbi1DYWxpY28gc291cmNlcyB3aGVyZWFzIHRoZSBmb3JtZXIgaXMgbGltaXRlZCB0byBwYWNrZXRzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcm9tIENhbGljby1jb250cm9sbGVkIGVuZHBvaW50cy4iCiAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgICAgICAgICAgIHNlcnZpY2VBY2NvdW50czoKICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogU2VydmljZUFjY291bnRzIGlzIGFuIG9wdGlvbmFsIGZpZWxkIHRoYXQgcmVzdHJpY3RzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGUgcnVsZSB0byBvbmx5IGFwcGx5IHRvIHRyYWZmaWMgdGhhdCBvcmlnaW5hdGVzIGZyb20KICAgICAgICAgICAgICAgICAgICAgICAgICAgIChvciB0ZXJtaW5hdGVzIGF0KSBhIHBvZCBydW5uaW5nIGFzIGEgbWF0Y2hpbmcgc2VydmljZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgYWNjb3VudC4KICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZXM6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBOYW1lcyBpcyBhbiBvcHRpb25hbCBmaWVsZCB0aGF0IHJlc3RyaWN0cwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBydWxlIHRvIG9ubHkgYXBwbHkgdG8gdHJhZmZpYyB0aGF0IG9yaWdpbmF0ZXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcm9tIChvciB0ZXJtaW5hdGVzIGF0KSBhIHBvZCBydW5uaW5nIGFzIGEgc2VydmljZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjY291bnQgd2hvc2UgbmFtZSBpcyBpbiB0aGUgbGlzdC4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXM6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IGFycmF5CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RvcjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IFNlbGVjdG9yIGlzIGFuIG9wdGlvbmFsIGZpZWxkIHRoYXQgcmVzdHJpY3RzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlIHJ1bGUgdG8gb25seSBhcHBseSB0byB0cmFmZmljIHRoYXQgb3JpZ2luYXRlcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyb20gKG9yIHRlcm1pbmF0ZXMgYXQpIGEgcG9kIHJ1bm5pbmcgYXMgYSBzZXJ2aWNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWNjb3VudCB0aGF0IG1hdGNoZXMgdGhlIGdpdmVuIGxhYmVsIHNlbGVjdG9yLiBJZgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvdGggTmFtZXMgYW5kIFNlbGVjdG9yIGFyZSBzcGVjaWZpZWQgdGhlbiB0aGV5IGFyZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFORCdlZC4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogb2JqZWN0CiAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBvYmplY3QKICAgICAgICAgICAgICAgICAgcmVxdWlyZWQ6CiAgICAgICAgICAgICAgICAgIC0gYWN0aW9uCiAgICAgICAgICAgICAgICAgIHR5cGU6IG9iamVjdAogICAgICAgICAgICAgICAgdHlwZTogYXJyYXkKICAgICAgICAgICAgICBpbmdyZXNzOgogICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IFRoZSBvcmRlcmVkIHNldCBvZiBpbmdyZXNzIHJ1bGVzLiAgRWFjaCBydWxlIGNvbnRhaW5zCiAgICAgICAgICAgICAgICAgIGEgc2V0IG9mIHBhY2tldCBtYXRjaCBjcml0ZXJpYSBhbmQgYSBjb3JyZXNwb25kaW5nIGFjdGlvbiB0byBhcHBseS4KICAgICAgICAgICAgICAgIGl0ZW1zOgogICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogIkEgUnVsZSBlbmNhcHN1bGF0ZXMgYSBzZXQgb2YgbWF0Y2ggY3JpdGVyaWEgYW5kIGFuCiAgICAgICAgICAgICAgICAgICAgYWN0aW9uLiAgQm90aCBzZWxlY3Rvci1iYXNlZCBzZWN1cml0eSBQb2xpY3kgYW5kIHNlY3VyaXR5IFByb2ZpbGVzCiAgICAgICAgICAgICAgICAgICAgcmVmZXJlbmNlIHJ1bGVzIC0gc2VwYXJhdGVkIG91dCBhcyBhIGxpc3Qgb2YgcnVsZXMgZm9yIGJvdGggaW5ncmVzcwogICAgICAgICAgICAgICAgICAgIGFuZCBlZ3Jlc3MgcGFja2V0IG1hdGNoaW5nLiBcbiBFYWNoIHBvc2l0aXZlIG1hdGNoIGNyaXRlcmlhIGhhcwogICAgICAgICAgICAgICAgICAgIGEgbmVnYXRlZCB2ZXJzaW9uLCBwcmVmaXhlZCB3aXRoIOKAnU5vdOKAnS4gQWxsIHRoZSBtYXRjaCBjcml0ZXJpYQogICAgICAgICAgICAgICAgICAgIHdpdGhpbiBhIHJ1bGUgbXVzdCBiZSBzYXRpc2ZpZWQgZm9yIGEgcGFja2V0IHRvIG1hdGNoLiBBIHNpbmdsZQogICAgICAgICAgICAgICAgICAgIHJ1bGUgY2FuIGNvbnRhaW4gdGhlIHBvc2l0aXZlIGFuZCBuZWdhdGl2ZSB2ZXJzaW9uIG9mIGEgbWF0Y2gKICAgICAgICAgICAgICAgICAgICBhbmQgYm90aCBtdXN0IGJlIHNhdGlzZmllZCBmb3IgdGhlIHJ1bGUgdG8gbWF0Y2guIgogICAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzOgogICAgICAgICAgICAgICAgICAgIGFjdGlvbjoKICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uOgogICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IERlc3RpbmF0aW9uIGNvbnRhaW5zIHRoZSBtYXRjaCBjcml0ZXJpYSB0aGF0IGFwcGx5CiAgICAgICAgICAgICAgICAgICAgICAgIHRvIGRlc3RpbmF0aW9uIGVudGl0eS4KICAgICAgICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWVzcGFjZVNlbGVjdG9yOgogICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAiTmFtZXNwYWNlU2VsZWN0b3IgaXMgYW4gb3B0aW9uYWwgZmllbGQgdGhhdAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGFpbnMgYSBzZWxlY3RvciBleHByZXNzaW9uLiBPbmx5IHRyYWZmaWMgdGhhdCBvcmlnaW5hdGVzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcm9tIChvciB0ZXJtaW5hdGVzIGF0KSBlbmRwb2ludHMgd2l0aGluIHRoZSBzZWxlY3RlZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZXNwYWNlcyB3aWxsIGJlIG1hdGNoZWQuIFdoZW4gYm90aCBOYW1lc3BhY2VTZWxlY3RvcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5kIFNlbGVjdG9yIGFyZSBkZWZpbmVkIG9uIHRoZSBzYW1lIHJ1bGUsIHRoZW4gb25seSB3b3JrbG9hZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kcG9pbnRzIHRoYXQgYXJlIG1hdGNoZWQgYnkgYm90aCBzZWxlY3RvcnMgd2lsbCBiZSBzZWxlY3RlZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgYnkgdGhlIHJ1bGUuIFxuIEZvciBOZXR3b3JrUG9saWN5LCBhbiBlbXB0eSBOYW1lc3BhY2VTZWxlY3RvcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaW1wbGllcyB0aGF0IHRoZSBTZWxlY3RvciBpcyBsaW1pdGVkIHRvIHNlbGVjdGluZyBvbmx5CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3b3JrbG9hZCBlbmRwb2ludHMgaW4gdGhlIHNhbWUgbmFtZXNwYWNlIGFzIHRoZSBOZXR3b3JrUG9saWN5LgogICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gRm9yIE5ldHdvcmtQb2xpY3ksIGBnbG9iYWwoKWAgTmFtZXNwYWNlU2VsZWN0b3IgaW1wbGllcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhhdCB0aGUgU2VsZWN0b3IgaXMgbGltaXRlZCB0byBzZWxlY3Rpbmcgb25seSBHbG9iYWxOZXR3b3JrU2V0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvciBIb3N0RW5kcG9pbnQuIFxuIEZvciBHbG9iYWxOZXR3b3JrUG9saWN5LCBhbiBlbXB0eQogICAgICAgICAgICAgICAgICAgICAgICAgICAgTmFtZXNwYWNlU2VsZWN0b3IgaW1wbGllcyB0aGUgU2VsZWN0b3IgYXBwbGllcyB0byB3b3JrbG9hZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kcG9pbnRzIGFjcm9zcyBhbGwgbmFtZXNwYWNlcy4iCiAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgICAgICAgICAgIG5ldHM6CiAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IE5ldHMgaXMgYW4gb3B0aW9uYWwgZmllbGQgdGhhdCByZXN0cmljdHMgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBydWxlIHRvIG9ubHkgYXBwbHkgdG8gdHJhZmZpYyB0aGF0IG9yaWdpbmF0ZXMgZnJvbSAob3IKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlcm1pbmF0ZXMgYXQpIElQIGFkZHJlc3NlcyBpbiBhbnkgb2YgdGhlIGdpdmVuIHN1Ym5ldHMuCiAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXM6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBhcnJheQogICAgICAgICAgICAgICAgICAgICAgICBub3ROZXRzOgogICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBOb3ROZXRzIGlzIHRoZSBuZWdhdGVkIHZlcnNpb24gb2YgdGhlIE5ldHMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpZWxkLgogICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogYXJyYXkKICAgICAgICAgICAgICAgICAgICAgICAgbm90UG9ydHM6CiAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IE5vdFBvcnRzIGlzIHRoZSBuZWdhdGVkIHZlcnNpb24gb2YgdGhlIFBvcnRzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWVsZC4gU2luY2Ugb25seSBzb21lIHByb3RvY29scyBoYXZlIHBvcnRzLCBpZiBhbnkgcG9ydHMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyZSBzcGVjaWZpZWQgaXQgcmVxdWlyZXMgdGhlIFByb3RvY29sIG1hdGNoIGluIHRoZSBSdWxlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byBiZSBzZXQgdG8gIlRDUCIgb3IgIlVEUCIuCiAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXM6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbnlPZjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0gdHlwZTogaW50ZWdlcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgLSB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhdHRlcm46IF4uKgogICAgICAgICAgICAgICAgICAgICAgICAgICAgeC1rdWJlcm5ldGVzLWludC1vci1zdHJpbmc6IHRydWUKICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBhcnJheQogICAgICAgICAgICAgICAgICAgICAgICBub3RTZWxlY3RvcjoKICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogTm90U2VsZWN0b3IgaXMgdGhlIG5lZ2F0ZWQgdmVyc2lvbiBvZiB0aGUgU2VsZWN0b3IKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpZWxkLiAgU2VlIFNlbGVjdG9yIGZpZWxkIGZvciBzdWJ0bGV0aWVzIHdpdGggbmVnYXRlZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0b3JzLgogICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgICAgICAgICAgICBwb3J0czoKICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogIlBvcnRzIGlzIGFuIG9wdGlvbmFsIGZpZWxkIHRoYXQgcmVzdHJpY3RzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGUgcnVsZSB0byBvbmx5IGFwcGx5IHRvIHRyYWZmaWMgdGhhdCBoYXMgYSBzb3VyY2UgKGRlc3RpbmF0aW9uKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9ydCB0aGF0IG1hdGNoZXMgb25lIG9mIHRoZXNlIHJhbmdlcy92YWx1ZXMuIFRoaXMgdmFsdWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzIGEgbGlzdCBvZiBpbnRlZ2VycyBvciBzdHJpbmdzIHRoYXQgcmVwcmVzZW50IHJhbmdlcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgb2YgcG9ydHMuIFxuIFNpbmNlIG9ubHkgc29tZSBwcm90b2NvbHMgaGF2ZSBwb3J0cywgaWYKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFueSBwb3J0cyBhcmUgc3BlY2lmaWVkIGl0IHJlcXVpcmVzIHRoZSBQcm90b2NvbCBtYXRjaAogICAgICAgICAgICAgICAgICAgICAgICAgICAgaW4gdGhlIFJ1bGUgdG8gYmUgc2V0IHRvIFwiVENQXCIgb3IgXCJVRFBcIi4iCiAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXM6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbnlPZjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0gdHlwZTogaW50ZWdlcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgLSB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhdHRlcm46IF4uKgogICAgICAgICAgICAgICAgICAgICAgICAgICAgeC1rdWJlcm5ldGVzLWludC1vci1zdHJpbmc6IHRydWUKICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBhcnJheQogICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RvcjoKICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogIlNlbGVjdG9yIGlzIGFuIG9wdGlvbmFsIGZpZWxkIHRoYXQgY29udGFpbnMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEgc2VsZWN0b3IgZXhwcmVzc2lvbiAoc2VlIFBvbGljeSBmb3Igc2FtcGxlIHN5bnRheCkuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIE9ubHkgdHJhZmZpYyB0aGF0IG9yaWdpbmF0ZXMgZnJvbSAodGVybWluYXRlcyBhdCkgZW5kcG9pbnRzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRjaGluZyB0aGUgc2VsZWN0b3Igd2lsbCBiZSBtYXRjaGVkLiBcbiBOb3RlIHRoYXQ6IGluCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGRpdGlvbiB0byB0aGUgbmVnYXRlZCB2ZXJzaW9uIG9mIHRoZSBTZWxlY3RvciAoc2VlIE5vdFNlbGVjdG9yCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZWxvdyksIHRoZSBzZWxlY3RvciBleHByZXNzaW9uIHN5bnRheCBpdHNlbGYgc3VwcG9ydHMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5lZ2F0aW9uLiAgVGhlIHR3byB0eXBlcyBvZiBuZWdhdGlvbiBhcmUgc3VidGx5IGRpZmZlcmVudC4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9uZSBuZWdhdGVzIHRoZSBzZXQgb2YgbWF0Y2hlZCBlbmRwb2ludHMsIHRoZSBvdGhlciBuZWdhdGVzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGUgd2hvbGUgbWF0Y2g6IFxuIFx0U2VsZWN0b3IgPSBcIiFoYXMobXlfbGFiZWwpXCIgbWF0Y2hlcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFja2V0cyB0aGF0IGFyZSBmcm9tIG90aGVyIENhbGljby1jb250cm9sbGVkIFx0ZW5kcG9pbnRzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGF0IGRvIG5vdCBoYXZlIHRoZSBsYWJlbCDigJxteV9sYWJlbOKAnS4gXG4gXHROb3RTZWxlY3RvcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPSBcImhhcyhteV9sYWJlbClcIiBtYXRjaGVzIHBhY2tldHMgdGhhdCBhcmUgbm90IGZyb20KICAgICAgICAgICAgICAgICAgICAgICAgICAgIENhbGljby1jb250cm9sbGVkIFx0ZW5kcG9pbnRzIHRoYXQgZG8gaGF2ZSB0aGUgbGFiZWwg4oCcbXlfbGFiZWzigJ0uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiBUaGUgZWZmZWN0IGlzIHRoYXQgdGhlIGxhdHRlciB3aWxsIGFjY2VwdCBwYWNrZXRzIGZyb20KICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vbi1DYWxpY28gc291cmNlcyB3aGVyZWFzIHRoZSBmb3JtZXIgaXMgbGltaXRlZCB0byBwYWNrZXRzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcm9tIENhbGljby1jb250cm9sbGVkIGVuZHBvaW50cy4iCiAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgICAgICAgICAgIHNlcnZpY2VBY2NvdW50czoKICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogU2VydmljZUFjY291bnRzIGlzIGFuIG9wdGlvbmFsIGZpZWxkIHRoYXQgcmVzdHJpY3RzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGUgcnVsZSB0byBvbmx5IGFwcGx5IHRvIHRyYWZmaWMgdGhhdCBvcmlnaW5hdGVzIGZyb20KICAgICAgICAgICAgICAgICAgICAgICAgICAgIChvciB0ZXJtaW5hdGVzIGF0KSBhIHBvZCBydW5uaW5nIGFzIGEgbWF0Y2hpbmcgc2VydmljZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgYWNjb3VudC4KICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZXM6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBOYW1lcyBpcyBhbiBvcHRpb25hbCBmaWVsZCB0aGF0IHJlc3RyaWN0cwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBydWxlIHRvIG9ubHkgYXBwbHkgdG8gdHJhZmZpYyB0aGF0IG9yaWdpbmF0ZXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcm9tIChvciB0ZXJtaW5hdGVzIGF0KSBhIHBvZCBydW5uaW5nIGFzIGEgc2VydmljZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjY291bnQgd2hvc2UgbmFtZSBpcyBpbiB0aGUgbGlzdC4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXM6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IGFycmF5CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RvcjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IFNlbGVjdG9yIGlzIGFuIG9wdGlvbmFsIGZpZWxkIHRoYXQgcmVzdHJpY3RzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlIHJ1bGUgdG8gb25seSBhcHBseSB0byB0cmFmZmljIHRoYXQgb3JpZ2luYXRlcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyb20gKG9yIHRlcm1pbmF0ZXMgYXQpIGEgcG9kIHJ1bm5pbmcgYXMgYSBzZXJ2aWNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWNjb3VudCB0aGF0IG1hdGNoZXMgdGhlIGdpdmVuIGxhYmVsIHNlbGVjdG9yLiBJZgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvdGggTmFtZXMgYW5kIFNlbGVjdG9yIGFyZSBzcGVjaWZpZWQgdGhlbiB0aGV5IGFyZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFORCdlZC4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogb2JqZWN0CiAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBvYmplY3QKICAgICAgICAgICAgICAgICAgICBodHRwOgogICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IEhUVFAgY29udGFpbnMgbWF0Y2ggY3JpdGVyaWEgdGhhdCBhcHBseSB0byBIVFRQCiAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3RzLgogICAgICAgICAgICAgICAgICAgICAgcHJvcGVydGllczoKICAgICAgICAgICAgICAgICAgICAgICAgbWV0aG9kczoKICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogTWV0aG9kcyBpcyBhbiBvcHRpb25hbCBmaWVsZCB0aGF0IHJlc3RyaWN0cwogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlIHJ1bGUgdG8gYXBwbHkgb25seSB0byBIVFRQIHJlcXVlc3RzIHRoYXQgdXNlIG9uZSBvZgogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlIGxpc3RlZCBIVFRQIE1ldGhvZHMgKGUuZy4gR0VULCBQVVQsIGV0Yy4pIE11bHRpcGxlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXRob2RzIGFyZSBPUidkIHRvZ2V0aGVyLgogICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogYXJyYXkKICAgICAgICAgICAgICAgICAgICAgICAgcGF0aHM6CiAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICdQYXRocyBpcyBhbiBvcHRpb25hbCBmaWVsZCB0aGF0IHJlc3RyaWN0cwogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlIHJ1bGUgdG8gYXBwbHkgdG8gSFRUUCByZXF1ZXN0cyB0aGF0IHVzZSBvbmUgb2YgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaXN0ZWQgSFRUUCBQYXRocy4gTXVsdGlwbGUgcGF0aHMgYXJlIE9SJydkIHRvZ2V0aGVyLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5nOiAtIGV4YWN0OiAvZm9vIC0gcHJlZml4OiAvYmFyIE5PVEU6IEVhY2ggZW50cnkgbWF5CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBPTkxZIHNwZWNpZnkgZWl0aGVyIGEgYGV4YWN0YCBvciBhIGBwcmVmaXhgIG1hdGNoLiBUaGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRvciB3aWxsIGNoZWNrIGZvciBpdC4nCiAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXM6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogJ0hUVFBQYXRoIHNwZWNpZmllcyBhbiBIVFRQIHBhdGggdG8gbWF0Y2guCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEl0IG1heSBiZSBlaXRoZXIgb2YgdGhlIGZvcm06IGV4YWN0OiA8cGF0aD46IHdoaWNoIG1hdGNoZXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlIHBhdGggZXhhY3RseSBvciBwcmVmaXg6IDxwYXRoLXByZWZpeD46IHdoaWNoIG1hdGNoZXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlIHBhdGggcHJlZml4JwogICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvcGVydGllczoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhhY3Q6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZWZpeDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IG9iamVjdAogICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IGFycmF5CiAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBvYmplY3QKICAgICAgICAgICAgICAgICAgICBpY21wOgogICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IElDTVAgaXMgYW4gb3B0aW9uYWwgZmllbGQgdGhhdCByZXN0cmljdHMgdGhlIHJ1bGUKICAgICAgICAgICAgICAgICAgICAgICAgdG8gYXBwbHkgdG8gYSBzcGVjaWZpYyB0eXBlIGFuZCBjb2RlIG9mIElDTVAgdHJhZmZpYy4gIFRoaXMKICAgICAgICAgICAgICAgICAgICAgICAgc2hvdWxkIG9ubHkgYmUgc3BlY2lmaWVkIGlmIHRoZSBQcm90b2NvbCBmaWVsZCBpcyBzZXQgdG8gIklDTVAiCiAgICAgICAgICAgICAgICAgICAgICAgIG9yICJJQ01QdjYiLgogICAgICAgICAgICAgICAgICAgICAgcHJvcGVydGllczoKICAgICAgICAgICAgICAgICAgICAgICAgY29kZToKICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogTWF0Y2ggb24gYSBzcGVjaWZpYyBJQ01QIGNvZGUuICBJZiBzcGVjaWZpZWQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGUgVHlwZSB2YWx1ZSBtdXN0IGFsc28gYmUgc3BlY2lmaWVkLiBUaGlzIGlzIGEgdGVjaG5pY2FsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW1pdGF0aW9uIGltcG9zZWQgYnkgdGhlIGtlcm5lbOKAmXMgaXB0YWJsZXMgZmlyZXdhbGwsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGljaCBDYWxpY28gdXNlcyB0byBlbmZvcmNlIHRoZSBydWxlLgogICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IGludGVnZXIKICAgICAgICAgICAgICAgICAgICAgICAgdHlwZToKICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogTWF0Y2ggb24gYSBzcGVjaWZpYyBJQ01QIHR5cGUuICBGb3IgZXhhbXBsZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgYSB2YWx1ZSBvZiA4IHJlZmVycyB0byBJQ01QIEVjaG8gUmVxdWVzdCAoaS5lLiBwaW5ncykuCiAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogaW50ZWdlcgogICAgICAgICAgICAgICAgICAgICAgdHlwZTogb2JqZWN0CiAgICAgICAgICAgICAgICAgICAgaXBWZXJzaW9uOgogICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IElQVmVyc2lvbiBpcyBhbiBvcHRpb25hbCBmaWVsZCB0aGF0IHJlc3RyaWN0cyB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgcnVsZSB0byBvbmx5IG1hdGNoIGEgc3BlY2lmaWMgSVAgdmVyc2lvbi4KICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IGludGVnZXIKICAgICAgICAgICAgICAgICAgICBtZXRhZGF0YToKICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBNZXRhZGF0YSBjb250YWlucyBhZGRpdGlvbmFsIGluZm9ybWF0aW9uIGZvciB0aGlzCiAgICAgICAgICAgICAgICAgICAgICAgIHJ1bGUKICAgICAgICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgICAgICAgICAgICAgICAgIGFubm90YXRpb25zOgogICAgICAgICAgICAgICAgICAgICAgICAgIGFkZGl0aW9uYWxQcm9wZXJ0aWVzOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IEFubm90YXRpb25zIGlzIGEgc2V0IG9mIGtleSB2YWx1ZSBwYWlycyB0aGF0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnaXZlIGV4dHJhIGluZm9ybWF0aW9uIGFib3V0IHRoZSBydWxlCiAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogb2JqZWN0CiAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBvYmplY3QKICAgICAgICAgICAgICAgICAgICBub3RJQ01QOgogICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IE5vdElDTVAgaXMgdGhlIG5lZ2F0ZWQgdmVyc2lvbiBvZiB0aGUgSUNNUCBmaWVsZC4KICAgICAgICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6CiAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IE1hdGNoIG9uIGEgc3BlY2lmaWMgSUNNUCBjb2RlLiAgSWYgc3BlY2lmaWVkLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlIFR5cGUgdmFsdWUgbXVzdCBhbHNvIGJlIHNwZWNpZmllZC4gVGhpcyBpcyBhIHRlY2huaWNhbAogICAgICAgICAgICAgICAgICAgICAgICAgICAgbGltaXRhdGlvbiBpbXBvc2VkIGJ5IHRoZSBrZXJuZWzigJlzIGlwdGFibGVzIGZpcmV3YWxsLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpY2ggQ2FsaWNvIHVzZXMgdG8gZW5mb3JjZSB0aGUgcnVsZS4KICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBpbnRlZ2VyCiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6CiAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IE1hdGNoIG9uIGEgc3BlY2lmaWMgSUNNUCB0eXBlLiAgRm9yIGV4YW1wbGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEgdmFsdWUgb2YgOCByZWZlcnMgdG8gSUNNUCBFY2hvIFJlcXVlc3QgKGkuZS4gcGluZ3MpLgogICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IGludGVnZXIKICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IG9iamVjdAogICAgICAgICAgICAgICAgICAgIG5vdFByb3RvY29sOgogICAgICAgICAgICAgICAgICAgICAgYW55T2Y6CiAgICAgICAgICAgICAgICAgICAgICAtIHR5cGU6IGludGVnZXIKICAgICAgICAgICAgICAgICAgICAgIC0gdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogTm90UHJvdG9jb2wgaXMgdGhlIG5lZ2F0ZWQgdmVyc2lvbiBvZiB0aGUgUHJvdG9jb2wKICAgICAgICAgICAgICAgICAgICAgICAgZmllbGQuCiAgICAgICAgICAgICAgICAgICAgICBwYXR0ZXJuOiBeLioKICAgICAgICAgICAgICAgICAgICAgIHgta3ViZXJuZXRlcy1pbnQtb3Itc3RyaW5nOiB0cnVlCiAgICAgICAgICAgICAgICAgICAgcHJvdG9jb2w6CiAgICAgICAgICAgICAgICAgICAgICBhbnlPZjoKICAgICAgICAgICAgICAgICAgICAgIC0gdHlwZTogaW50ZWdlcgogICAgICAgICAgICAgICAgICAgICAgLSB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAiUHJvdG9jb2wgaXMgYW4gb3B0aW9uYWwgZmllbGQgdGhhdCByZXN0cmljdHMgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIHJ1bGUgdG8gb25seSBhcHBseSB0byB0cmFmZmljIG9mIGEgc3BlY2lmaWMgSVAgcHJvdG9jb2wuIFJlcXVpcmVkCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIGFueSBvZiB0aGUgRW50aXR5UnVsZXMgY29udGFpbiBQb3J0cyAoYmVjYXVzZSBwb3J0cyBvbmx5CiAgICAgICAgICAgICAgICAgICAgICAgIGFwcGx5IHRvIGNlcnRhaW4gcHJvdG9jb2xzKS4gXG4gTXVzdCBiZSBvbmUgb2YgdGhlc2Ugc3RyaW5nCiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlczogXCJUQ1BcIiwgXCJVRFBcIiwgXCJJQ01QXCIsIFwiSUNNUHY2XCIsIFwiU0NUUFwiLAogICAgICAgICAgICAgICAgICAgICAgICBcIlVEUExpdGVcIiBvciBhbiBpbnRlZ2VyIGluIHRoZSByYW5nZSAxLTI1NS4iCiAgICAgICAgICAgICAgICAgICAgICBwYXR0ZXJuOiBeLioKICAgICAgICAgICAgICAgICAgICAgIHgta3ViZXJuZXRlcy1pbnQtb3Itc3RyaW5nOiB0cnVlCiAgICAgICAgICAgICAgICAgICAgc291cmNlOgogICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IFNvdXJjZSBjb250YWlucyB0aGUgbWF0Y2ggY3JpdGVyaWEgdGhhdCBhcHBseSB0bwogICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2UgZW50aXR5LgogICAgICAgICAgICAgICAgICAgICAgcHJvcGVydGllczoKICAgICAgICAgICAgICAgICAgICAgICAgbmFtZXNwYWNlU2VsZWN0b3I6CiAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICJOYW1lc3BhY2VTZWxlY3RvciBpcyBhbiBvcHRpb25hbCBmaWVsZCB0aGF0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250YWlucyBhIHNlbGVjdG9yIGV4cHJlc3Npb24uIE9ubHkgdHJhZmZpYyB0aGF0IG9yaWdpbmF0ZXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyb20gKG9yIHRlcm1pbmF0ZXMgYXQpIGVuZHBvaW50cyB3aXRoaW4gdGhlIHNlbGVjdGVkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lc3BhY2VzIHdpbGwgYmUgbWF0Y2hlZC4gV2hlbiBib3RoIE5hbWVzcGFjZVNlbGVjdG9yCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmQgU2VsZWN0b3IgYXJlIGRlZmluZWQgb24gdGhlIHNhbWUgcnVsZSwgdGhlbiBvbmx5IHdvcmtsb2FkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmRwb2ludHMgdGhhdCBhcmUgbWF0Y2hlZCBieSBib3RoIHNlbGVjdG9ycyB3aWxsIGJlIHNlbGVjdGVkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBieSB0aGUgcnVsZS4gXG4gRm9yIE5ldHdvcmtQb2xpY3ksIGFuIGVtcHR5IE5hbWVzcGFjZVNlbGVjdG9yCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbXBsaWVzIHRoYXQgdGhlIFNlbGVjdG9yIGlzIGxpbWl0ZWQgdG8gc2VsZWN0aW5nIG9ubHkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdvcmtsb2FkIGVuZHBvaW50cyBpbiB0aGUgc2FtZSBuYW1lc3BhY2UgYXMgdGhlIE5ldHdvcmtQb2xpY3kuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiBGb3IgTmV0d29ya1BvbGljeSwgYGdsb2JhbCgpYCBOYW1lc3BhY2VTZWxlY3RvciBpbXBsaWVzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGF0IHRoZSBTZWxlY3RvciBpcyBsaW1pdGVkIHRvIHNlbGVjdGluZyBvbmx5IEdsb2JhbE5ldHdvcmtTZXQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9yIEhvc3RFbmRwb2ludC4gXG4gRm9yIEdsb2JhbE5ldHdvcmtQb2xpY3ksIGFuIGVtcHR5CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBOYW1lc3BhY2VTZWxlY3RvciBpbXBsaWVzIHRoZSBTZWxlY3RvciBhcHBsaWVzIHRvIHdvcmtsb2FkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmRwb2ludHMgYWNyb3NzIGFsbCBuYW1lc3BhY2VzLiIKICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICAgICAgICAgICAgbmV0czoKICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogTmV0cyBpcyBhbiBvcHRpb25hbCBmaWVsZCB0aGF0IHJlc3RyaWN0cyB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJ1bGUgdG8gb25seSBhcHBseSB0byB0cmFmZmljIHRoYXQgb3JpZ2luYXRlcyBmcm9tIChvcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVybWluYXRlcyBhdCkgSVAgYWRkcmVzc2VzIGluIGFueSBvZiB0aGUgZ2l2ZW4gc3VibmV0cy4KICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtczoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IGFycmF5CiAgICAgICAgICAgICAgICAgICAgICAgIG5vdE5ldHM6CiAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IE5vdE5ldHMgaXMgdGhlIG5lZ2F0ZWQgdmVyc2lvbiBvZiB0aGUgTmV0cwogICAgICAgICAgICAgICAgICAgICAgICAgICAgZmllbGQuCiAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXM6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBhcnJheQogICAgICAgICAgICAgICAgICAgICAgICBub3RQb3J0czoKICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogTm90UG9ydHMgaXMgdGhlIG5lZ2F0ZWQgdmVyc2lvbiBvZiB0aGUgUG9ydHMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpZWxkLiBTaW5jZSBvbmx5IHNvbWUgcHJvdG9jb2xzIGhhdmUgcG9ydHMsIGlmIGFueSBwb3J0cwogICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJlIHNwZWNpZmllZCBpdCByZXF1aXJlcyB0aGUgUHJvdG9jb2wgbWF0Y2ggaW4gdGhlIFJ1bGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIGJlIHNldCB0byAiVENQIiBvciAiVURQIi4KICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtczoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFueU9mOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgLSB0eXBlOiBpbnRlZ2VyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF0dGVybjogXi4qCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4LWt1YmVybmV0ZXMtaW50LW9yLXN0cmluZzogdHJ1ZQogICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IGFycmF5CiAgICAgICAgICAgICAgICAgICAgICAgIG5vdFNlbGVjdG9yOgogICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBOb3RTZWxlY3RvciBpcyB0aGUgbmVnYXRlZCB2ZXJzaW9uIG9mIHRoZSBTZWxlY3RvcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgZmllbGQuICBTZWUgU2VsZWN0b3IgZmllbGQgZm9yIHN1YnRsZXRpZXMgd2l0aCBuZWdhdGVkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RvcnMuCiAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgICAgICAgICAgIHBvcnRzOgogICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAiUG9ydHMgaXMgYW4gb3B0aW9uYWwgZmllbGQgdGhhdCByZXN0cmljdHMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBydWxlIHRvIG9ubHkgYXBwbHkgdG8gdHJhZmZpYyB0aGF0IGhhcyBhIHNvdXJjZSAoZGVzdGluYXRpb24pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3J0IHRoYXQgbWF0Y2hlcyBvbmUgb2YgdGhlc2UgcmFuZ2VzL3ZhbHVlcy4gVGhpcyB2YWx1ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaXMgYSBsaXN0IG9mIGludGVnZXJzIG9yIHN0cmluZ3MgdGhhdCByZXByZXNlbnQgcmFuZ2VzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZiBwb3J0cy4gXG4gU2luY2Ugb25seSBzb21lIHByb3RvY29scyBoYXZlIHBvcnRzLCBpZgogICAgICAgICAgICAgICAgICAgICAgICAgICAgYW55IHBvcnRzIGFyZSBzcGVjaWZpZWQgaXQgcmVxdWlyZXMgdGhlIFByb3RvY29sIG1hdGNoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbiB0aGUgUnVsZSB0byBiZSBzZXQgdG8gXCJUQ1BcIiBvciBcIlVEUFwiLiIKICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtczoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFueU9mOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgLSB0eXBlOiBpbnRlZ2VyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF0dGVybjogXi4qCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4LWt1YmVybmV0ZXMtaW50LW9yLXN0cmluZzogdHJ1ZQogICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IGFycmF5CiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yOgogICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAiU2VsZWN0b3IgaXMgYW4gb3B0aW9uYWwgZmllbGQgdGhhdCBjb250YWlucwogICAgICAgICAgICAgICAgICAgICAgICAgICAgYSBzZWxlY3RvciBleHByZXNzaW9uIChzZWUgUG9saWN5IGZvciBzYW1wbGUgc3ludGF4KS4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwgT25seSB0cmFmZmljIHRoYXQgb3JpZ2luYXRlcyBmcm9tICh0ZXJtaW5hdGVzIGF0KSBlbmRwb2ludHMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoaW5nIHRoZSBzZWxlY3RvciB3aWxsIGJlIG1hdGNoZWQuIFxuIE5vdGUgdGhhdDogaW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZGl0aW9uIHRvIHRoZSBuZWdhdGVkIHZlcnNpb24gb2YgdGhlIFNlbGVjdG9yIChzZWUgTm90U2VsZWN0b3IKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJlbG93KSwgdGhlIHNlbGVjdG9yIGV4cHJlc3Npb24gc3ludGF4IGl0c2VsZiBzdXBwb3J0cwogICAgICAgICAgICAgICAgICAgICAgICAgICAgbmVnYXRpb24uICBUaGUgdHdvIHR5cGVzIG9mIG5lZ2F0aW9uIGFyZSBzdWJ0bHkgZGlmZmVyZW50LgogICAgICAgICAgICAgICAgICAgICAgICAgICAgT25lIG5lZ2F0ZXMgdGhlIHNldCBvZiBtYXRjaGVkIGVuZHBvaW50cywgdGhlIG90aGVyIG5lZ2F0ZXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZSB3aG9sZSBtYXRjaDogXG4gXHRTZWxlY3RvciA9IFwiIWhhcyhteV9sYWJlbClcIiBtYXRjaGVzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWNrZXRzIHRoYXQgYXJlIGZyb20gb3RoZXIgQ2FsaWNvLWNvbnRyb2xsZWQgXHRlbmRwb2ludHMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQgZG8gbm90IGhhdmUgdGhlIGxhYmVsIOKAnG15X2xhYmVs4oCdLiBcbiBcdE5vdFNlbGVjdG9yCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA9IFwiaGFzKG15X2xhYmVsKVwiIG1hdGNoZXMgcGFja2V0cyB0aGF0IGFyZSBub3QgZnJvbQogICAgICAgICAgICAgICAgICAgICAgICAgICAgQ2FsaWNvLWNvbnRyb2xsZWQgXHRlbmRwb2ludHMgdGhhdCBkbyBoYXZlIHRoZSBsYWJlbCDigJxteV9sYWJlbOKAnS4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuIFRoZSBlZmZlY3QgaXMgdGhhdCB0aGUgbGF0dGVyIHdpbGwgYWNjZXB0IHBhY2tldHMgZnJvbQogICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9uLUNhbGljbyBzb3VyY2VzIHdoZXJlYXMgdGhlIGZvcm1lciBpcyBsaW1pdGVkIHRvIHBhY2tldHMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyb20gQ2FsaWNvLWNvbnRyb2xsZWQgZW5kcG9pbnRzLiIKICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICAgICAgICAgICAgc2VydmljZUFjY291bnRzOgogICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBTZXJ2aWNlQWNjb3VudHMgaXMgYW4gb3B0aW9uYWwgZmllbGQgdGhhdCByZXN0cmljdHMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBydWxlIHRvIG9ubHkgYXBwbHkgdG8gdHJhZmZpYyB0aGF0IG9yaWdpbmF0ZXMgZnJvbQogICAgICAgICAgICAgICAgICAgICAgICAgICAgKG9yIHRlcm1pbmF0ZXMgYXQpIGEgcG9kIHJ1bm5pbmcgYXMgYSBtYXRjaGluZyBzZXJ2aWNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY2NvdW50LgogICAgICAgICAgICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lczoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IE5hbWVzIGlzIGFuIG9wdGlvbmFsIGZpZWxkIHRoYXQgcmVzdHJpY3RzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlIHJ1bGUgdG8gb25seSBhcHBseSB0byB0cmFmZmljIHRoYXQgb3JpZ2luYXRlcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyb20gKG9yIHRlcm1pbmF0ZXMgYXQpIGEgcG9kIHJ1bm5pbmcgYXMgYSBzZXJ2aWNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWNjb3VudCB3aG9zZSBuYW1lIGlzIGluIHRoZSBsaXN0LgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtczoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogYXJyYXkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogU2VsZWN0b3IgaXMgYW4gb3B0aW9uYWwgZmllbGQgdGhhdCByZXN0cmljdHMKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGUgcnVsZSB0byBvbmx5IGFwcGx5IHRvIHRyYWZmaWMgdGhhdCBvcmlnaW5hdGVzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJvbSAob3IgdGVybWluYXRlcyBhdCkgYSBwb2QgcnVubmluZyBhcyBhIHNlcnZpY2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY2NvdW50IHRoYXQgbWF0Y2hlcyB0aGUgZ2l2ZW4gbGFiZWwgc2VsZWN0b3IuIElmCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYm90aCBOYW1lcyBhbmQgU2VsZWN0b3IgYXJlIHNwZWNpZmllZCB0aGVuIHRoZXkgYXJlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQU5EJ2VkLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBvYmplY3QKICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IG9iamVjdAogICAgICAgICAgICAgICAgICByZXF1aXJlZDoKICAgICAgICAgICAgICAgICAgLSBhY3Rpb24KICAgICAgICAgICAgICAgICAgdHlwZTogb2JqZWN0CiAgICAgICAgICAgICAgICB0eXBlOiBhcnJheQogICAgICAgICAgICAgIG5hbWVzcGFjZVNlbGVjdG9yOgogICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IE5hbWVzcGFjZVNlbGVjdG9yIGlzIGFuIG9wdGlvbmFsIGZpZWxkIGZvciBhbiBleHByZXNzaW9uCiAgICAgICAgICAgICAgICAgIHVzZWQgdG8gc2VsZWN0IGEgcG9kIGJhc2VkIG9uIG5hbWVzcGFjZXMuCiAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICBvcmRlcjoKICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBPcmRlciBpcyBhbiBvcHRpb25hbCBmaWVsZCB0aGF0IHNwZWNpZmllcyB0aGUgb3JkZXIgaW4KICAgICAgICAgICAgICAgICAgd2hpY2ggdGhlIHBvbGljeSBpcyBhcHBsaWVkLiBQb2xpY2llcyB3aXRoIGhpZ2hlciAib3JkZXIiIGFyZSBhcHBsaWVkCiAgICAgICAgICAgICAgICAgIGFmdGVyIHRob3NlIHdpdGggbG93ZXIgb3JkZXIuICBJZiB0aGUgb3JkZXIgaXMgb21pdHRlZCwgaXQgbWF5IGJlCiAgICAgICAgICAgICAgICAgIGNvbnNpZGVyZWQgdG8gYmUgImluZmluaXRlIiAtIGkuZS4gdGhlIHBvbGljeSB3aWxsIGJlIGFwcGxpZWQgbGFzdC4gIFBvbGljaWVzCiAgICAgICAgICAgICAgICAgIHdpdGggaWRlbnRpY2FsIG9yZGVyIHdpbGwgYmUgYXBwbGllZCBpbiBhbHBoYW51bWVyaWNhbCBvcmRlciBiYXNlZAogICAgICAgICAgICAgICAgICBvbiB0aGUgUG9saWN5ICJOYW1lIi4KICAgICAgICAgICAgICAgIHR5cGU6IG51bWJlcgogICAgICAgICAgICAgIHByZUROQVQ6CiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogUHJlRE5BVCBpbmRpY2F0ZXMgdG8gYXBwbHkgdGhlIHJ1bGVzIGluIHRoaXMgcG9saWN5IGJlZm9yZQogICAgICAgICAgICAgICAgICBhbnkgRE5BVC4KICAgICAgICAgICAgICAgIHR5cGU6IGJvb2xlYW4KICAgICAgICAgICAgICBzZWxlY3RvcjoKICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAiVGhlIHNlbGVjdG9yIGlzIGFuIGV4cHJlc3Npb24gdXNlZCB0byBwaWNrIHBpY2sgb3V0CiAgICAgICAgICAgICAgICAgIHRoZSBlbmRwb2ludHMgdGhhdCB0aGUgcG9saWN5IHNob3VsZCBiZSBhcHBsaWVkIHRvLiBcbiBTZWxlY3RvcgogICAgICAgICAgICAgICAgICBleHByZXNzaW9ucyBmb2xsb3cgdGhpcyBzeW50YXg6IFxuIFx0bGFiZWwgPT0gXCJzdHJpbmdfbGl0ZXJhbFwiCiAgICAgICAgICAgICAgICAgIFwgLT4gIGNvbXBhcmlzb24sIGUuZy4gbXlfbGFiZWwgPT0gXCJmb28gYmFyXCIgXHRsYWJlbCAhPSBcInN0cmluZ19saXRlcmFsXCIKICAgICAgICAgICAgICAgICAgXCAgLT4gIG5vdCBlcXVhbDsgYWxzbyBtYXRjaGVzIGlmIGxhYmVsIGlzIG5vdCBwcmVzZW50IFx0bGFiZWwgaW4KICAgICAgICAgICAgICAgICAgeyBcImFcIiwgXCJiXCIsIFwiY1wiLCAuLi4gfSAgLT4gIHRydWUgaWYgdGhlIHZhbHVlIG9mIGxhYmVsIFggaXMKICAgICAgICAgICAgICAgICAgb25lIG9mIFwiYVwiLCBcImJcIiwgXCJjXCIgXHRsYWJlbCBub3QgaW4geyBcImFcIiwgXCJiXCIsIFwiY1wiLAogICAgICAgICAgICAgICAgICAuLi4gfSAgLT4gIHRydWUgaWYgdGhlIHZhbHVlIG9mIGxhYmVsIFggaXMgbm90IG9uZSBvZiBcImFcIiwgXCJiXCIsCiAgICAgICAgICAgICAgICAgIFwiY1wiIFx0aGFzKGxhYmVsX25hbWUpICAtPiBUcnVlIGlmIHRoYXQgbGFiZWwgaXMgcHJlc2VudCBcdCEgZXhwcgogICAgICAgICAgICAgICAgICAtPiBuZWdhdGlvbiBvZiBleHByIFx0ZXhwciAmJiBleHByICAtPiBTaG9ydC1jaXJjdWl0IGFuZCBcdGV4cHIKICAgICAgICAgICAgICAgICAgfHwgZXhwciAgLT4gU2hvcnQtY2lyY3VpdCBvciBcdCggZXhwciApIC0+IHBhcmVucyBmb3IgZ3JvdXBpbmcgXHRhbGwoKQogICAgICAgICAgICAgICAgICBvciB0aGUgZW1wdHkgc2VsZWN0b3IgLT4gbWF0Y2hlcyBhbGwgZW5kcG9pbnRzLiBcbiBMYWJlbCBuYW1lcyBhcmUKICAgICAgICAgICAgICAgICAgYWxsb3dlZCB0byBjb250YWluIGFscGhhbnVtZXJpY3MsIC0sIF8gYW5kIC8uIFN0cmluZyBsaXRlcmFscyBhcmUKICAgICAgICAgICAgICAgICAgbW9yZSBwZXJtaXNzaXZlIGJ1dCB0aGV5IGRvIG5vdCBzdXBwb3J0IGVzY2FwZSBjaGFyYWN0ZXJzLiBcbiBFeGFtcGxlcwogICAgICAgICAgICAgICAgICAod2l0aCBtYWRlLXVwIGxhYmVscyk6IFxuIFx0dHlwZSA9PSBcIndlYnNlcnZlclwiICYmIGRlcGxveW1lbnQKICAgICAgICAgICAgICAgICAgPT0gXCJwcm9kXCIgXHR0eXBlIGluIHtcImZyb250ZW5kXCIsIFwiYmFja2VuZFwifSBcdGRlcGxveW1lbnQgIT0KICAgICAgICAgICAgICAgICAgXCJkZXZcIiBcdCEgaGFzKGxhYmVsX25hbWUpIgogICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgc2VydmljZUFjY291bnRTZWxlY3RvcjoKICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBTZXJ2aWNlQWNjb3VudFNlbGVjdG9yIGlzIGFuIG9wdGlvbmFsIGZpZWxkIGZvciBhbiBleHByZXNzaW9uCiAgICAgICAgICAgICAgICAgIHVzZWQgdG8gc2VsZWN0IGEgcG9kIGJhc2VkIG9uIHNlcnZpY2UgYWNjb3VudHMuCiAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICB0eXBlczoKICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAiVHlwZXMgaW5kaWNhdGVzIHdoZXRoZXIgdGhpcyBwb2xpY3kgYXBwbGllcyB0byBpbmdyZXNzLAogICAgICAgICAgICAgICAgICBvciB0byBlZ3Jlc3MsIG9yIHRvIGJvdGguICBXaGVuIG5vdCBleHBsaWNpdGx5IHNwZWNpZmllZCAoYW5kIHNvCiAgICAgICAgICAgICAgICAgIHRoZSB2YWx1ZSBvbiBjcmVhdGlvbiBpcyBlbXB0eSBvciBuaWwpLCBDYWxpY28gZGVmYXVsdHMgVHlwZXMgYWNjb3JkaW5nCiAgICAgICAgICAgICAgICAgIHRvIHdoYXQgSW5ncmVzcyBhbmQgRWdyZXNzIHJ1bGVzIGFyZSBwcmVzZW50IGluIHRoZSBwb2xpY3kuICBUaGUKICAgICAgICAgICAgICAgICAgZGVmYXVsdCBpczogXG4gLSBbIFBvbGljeVR5cGVJbmdyZXNzIF0sIGlmIHRoZXJlIGFyZSBubyBFZ3Jlc3MgcnVsZXMKICAgICAgICAgICAgICAgICAgKGluY2x1ZGluZyB0aGUgY2FzZSB3aGVyZSB0aGVyZSBhcmUgICBhbHNvIG5vIEluZ3Jlc3MgcnVsZXMpIFxuCiAgICAgICAgICAgICAgICAgIC0gWyBQb2xpY3lUeXBlRWdyZXNzIF0sIGlmIHRoZXJlIGFyZSBFZ3Jlc3MgcnVsZXMgYnV0IG5vIEluZ3Jlc3MKICAgICAgICAgICAgICAgICAgcnVsZXMgXG4gLSBbIFBvbGljeVR5cGVJbmdyZXNzLCBQb2xpY3lUeXBlRWdyZXNzIF0sIGlmIHRoZXJlIGFyZQogICAgICAgICAgICAgICAgICBib3RoIEluZ3Jlc3MgYW5kIEVncmVzcyBydWxlcy4gXG4gV2hlbiB0aGUgcG9saWN5IGlzIHJlYWQgYmFjayBhZ2FpbiwKICAgICAgICAgICAgICAgICAgVHlwZXMgd2lsbCBhbHdheXMgYmUgb25lIG9mIHRoZXNlIHZhbHVlcywgbmV2ZXIgZW1wdHkgb3IgbmlsLiIKICAgICAgICAgICAgICAgIGl0ZW1zOgogICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogUG9saWN5VHlwZSBlbnVtZXJhdGVzIHRoZSBwb3NzaWJsZSB2YWx1ZXMgb2YgdGhlIFBvbGljeVNwZWMKICAgICAgICAgICAgICAgICAgICBUeXBlcyBmaWVsZC4KICAgICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgICB0eXBlOiBhcnJheQogICAgICAgICAgICB0eXBlOiBvYmplY3QKICAgICAgICB0eXBlOiBvYmplY3QKICAgIHNlcnZlZDogdHJ1ZQogICAgc3RvcmFnZTogdHJ1ZQpzdGF0dXM6CiAgYWNjZXB0ZWROYW1lczoKICAgIGtpbmQ6ICIiCiAgICBwbHVyYWw6ICIiCiAgY29uZGl0aW9uczogW10KICBzdG9yZWRWZXJzaW9uczogW10KCi0tLQoKLS0tCmFwaVZlcnNpb246IGFwaWV4dGVuc2lvbnMuazhzLmlvL3YxCmtpbmQ6IEN1c3RvbVJlc291cmNlRGVmaW5pdGlvbgptZXRhZGF0YToKICBuYW1lOiBnbG9iYWxuZXR3b3Jrc2V0cy5jcmQucHJvamVjdGNhbGljby5vcmcKc3BlYzoKICBncm91cDogY3JkLnByb2plY3RjYWxpY28ub3JnCiAgbmFtZXM6CiAgICBraW5kOiBHbG9iYWxOZXR3b3JrU2V0CiAgICBsaXN0S2luZDogR2xvYmFsTmV0d29ya1NldExpc3QKICAgIHBsdXJhbDogZ2xvYmFsbmV0d29ya3NldHMKICAgIHNpbmd1bGFyOiBnbG9iYWxuZXR3b3Jrc2V0CiAgc2NvcGU6IENsdXN0ZXIKICB2ZXJzaW9uczoKICAtIG5hbWU6IHYxCiAgICBzY2hlbWE6CiAgICAgIG9wZW5BUElWM1NjaGVtYToKICAgICAgICBkZXNjcmlwdGlvbjogR2xvYmFsTmV0d29ya1NldCBjb250YWlucyBhIHNldCBvZiBhcmJpdHJhcnkgSVAgc3ViLW5ldHdvcmtzL0NJRFJzCiAgICAgICAgICB0aGF0IHNoYXJlIGxhYmVscyB0byBhbGxvdyBydWxlcyB0byByZWZlciB0byB0aGVtIHZpYSBzZWxlY3RvcnMuICBUaGUgbGFiZWxzCiAgICAgICAgICBvZiBHbG9iYWxOZXR3b3JrU2V0IGFyZSBub3QgbmFtZXNwYWNlZC4KICAgICAgICBwcm9wZXJ0aWVzOgogICAgICAgICAgYXBpVmVyc2lvbjoKICAgICAgICAgICAgZGVzY3JpcHRpb246ICdBUElWZXJzaW9uIGRlZmluZXMgdGhlIHZlcnNpb25lZCBzY2hlbWEgb2YgdGhpcyByZXByZXNlbnRhdGlvbgogICAgICAgICAgICAgIG9mIGFuIG9iamVjdC4gU2VydmVycyBzaG91bGQgY29udmVydCByZWNvZ25pemVkIHNjaGVtYXMgdG8gdGhlIGxhdGVzdAogICAgICAgICAgICAgIGludGVybmFsIHZhbHVlLCBhbmQgbWF5IHJlamVjdCB1bnJlY29nbml6ZWQgdmFsdWVzLiBNb3JlIGluZm86IGh0dHBzOi8vZ2l0Lms4cy5pby9jb21tdW5pdHkvY29udHJpYnV0b3JzL2RldmVsL3NpZy1hcmNoaXRlY3R1cmUvYXBpLWNvbnZlbnRpb25zLm1kI3Jlc291cmNlcycKICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICBraW5kOgogICAgICAgICAgICBkZXNjcmlwdGlvbjogJ0tpbmQgaXMgYSBzdHJpbmcgdmFsdWUgcmVwcmVzZW50aW5nIHRoZSBSRVNUIHJlc291cmNlIHRoaXMKICAgICAgICAgICAgICBvYmplY3QgcmVwcmVzZW50cy4gU2VydmVycyBtYXkgaW5mZXIgdGhpcyBmcm9tIHRoZSBlbmRwb2ludCB0aGUgY2xpZW50CiAgICAgICAgICAgICAgc3VibWl0cyByZXF1ZXN0cyB0by4gQ2Fubm90IGJlIHVwZGF0ZWQuIEluIENhbWVsQ2FzZS4gTW9yZSBpbmZvOiBodHRwczovL2dpdC5rOHMuaW8vY29tbXVuaXR5L2NvbnRyaWJ1dG9ycy9kZXZlbC9zaWctYXJjaGl0ZWN0dXJlL2FwaS1jb252ZW50aW9ucy5tZCN0eXBlcy1raW5kcycKICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICBtZXRhZGF0YToKICAgICAgICAgICAgdHlwZTogb2JqZWN0CiAgICAgICAgICBzcGVjOgogICAgICAgICAgICBkZXNjcmlwdGlvbjogR2xvYmFsTmV0d29ya1NldFNwZWMgY29udGFpbnMgdGhlIHNwZWNpZmljYXRpb24gZm9yIGEgTmV0d29ya1NldAogICAgICAgICAgICAgIHJlc291cmNlLgogICAgICAgICAgICBwcm9wZXJ0aWVzOgogICAgICAgICAgICAgIG5ldHM6CiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogVGhlIGxpc3Qgb2YgSVAgbmV0d29ya3MgdGhhdCBiZWxvbmcgdG8gdGhpcyBzZXQuCiAgICAgICAgICAgICAgICBpdGVtczoKICAgICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgICB0eXBlOiBhcnJheQogICAgICAgICAgICB0eXBlOiBvYmplY3QKICAgICAgICB0eXBlOiBvYmplY3QKICAgIHNlcnZlZDogdHJ1ZQogICAgc3RvcmFnZTogdHJ1ZQpzdGF0dXM6CiAgYWNjZXB0ZWROYW1lczoKICAgIGtpbmQ6ICIiCiAgICBwbHVyYWw6ICIiCiAgY29uZGl0aW9uczogW10KICBzdG9yZWRWZXJzaW9uczogW10KCi0tLQoKLS0tCmFwaVZlcnNpb246IGFwaWV4dGVuc2lvbnMuazhzLmlvL3YxCmtpbmQ6IEN1c3RvbVJlc291cmNlRGVmaW5pdGlvbgptZXRhZGF0YToKICBuYW1lOiBob3N0ZW5kcG9pbnRzLmNyZC5wcm9qZWN0Y2FsaWNvLm9yZwpzcGVjOgogIGdyb3VwOiBjcmQucHJvamVjdGNhbGljby5vcmcKICBuYW1lczoKICAgIGtpbmQ6IEhvc3RFbmRwb2ludAogICAgbGlzdEtpbmQ6IEhvc3RFbmRwb2ludExpc3QKICAgIHBsdXJhbDogaG9zdGVuZHBvaW50cwogICAgc2luZ3VsYXI6IGhvc3RlbmRwb2ludAogIHNjb3BlOiBDbHVzdGVyCiAgdmVyc2lvbnM6CiAgLSBuYW1lOiB2MQogICAgc2NoZW1hOgogICAgICBvcGVuQVBJVjNTY2hlbWE6CiAgICAgICAgcHJvcGVydGllczoKICAgICAgICAgIGFwaVZlcnNpb246CiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAnQVBJVmVyc2lvbiBkZWZpbmVzIHRoZSB2ZXJzaW9uZWQgc2NoZW1hIG9mIHRoaXMgcmVwcmVzZW50YXRpb24KICAgICAgICAgICAgICBvZiBhbiBvYmplY3QuIFNlcnZlcnMgc2hvdWxkIGNvbnZlcnQgcmVjb2duaXplZCBzY2hlbWFzIHRvIHRoZSBsYXRlc3QKICAgICAgICAgICAgICBpbnRlcm5hbCB2YWx1ZSwgYW5kIG1heSByZWplY3QgdW5yZWNvZ25pemVkIHZhbHVlcy4gTW9yZSBpbmZvOiBodHRwczovL2dpdC5rOHMuaW8vY29tbXVuaXR5L2NvbnRyaWJ1dG9ycy9kZXZlbC9zaWctYXJjaGl0ZWN0dXJlL2FwaS1jb252ZW50aW9ucy5tZCNyZXNvdXJjZXMnCiAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAga2luZDoKICAgICAgICAgICAgZGVzY3JpcHRpb246ICdLaW5kIGlzIGEgc3RyaW5nIHZhbHVlIHJlcHJlc2VudGluZyB0aGUgUkVTVCByZXNvdXJjZSB0aGlzCiAgICAgICAgICAgICAgb2JqZWN0IHJlcHJlc2VudHMuIFNlcnZlcnMgbWF5IGluZmVyIHRoaXMgZnJvbSB0aGUgZW5kcG9pbnQgdGhlIGNsaWVudAogICAgICAgICAgICAgIHN1Ym1pdHMgcmVxdWVzdHMgdG8uIENhbm5vdCBiZSB1cGRhdGVkLiBJbiBDYW1lbENhc2UuIE1vcmUgaW5mbzogaHR0cHM6Ly9naXQuazhzLmlvL2NvbW11bml0eS9jb250cmlidXRvcnMvZGV2ZWwvc2lnLWFyY2hpdGVjdHVyZS9hcGktY29udmVudGlvbnMubWQjdHlwZXMta2luZHMnCiAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgbWV0YWRhdGE6CiAgICAgICAgICAgIHR5cGU6IG9iamVjdAogICAgICAgICAgc3BlYzoKICAgICAgICAgICAgZGVzY3JpcHRpb246IEhvc3RFbmRwb2ludFNwZWMgY29udGFpbnMgdGhlIHNwZWNpZmljYXRpb24gZm9yIGEgSG9zdEVuZHBvaW50CiAgICAgICAgICAgICAgcmVzb3VyY2UuCiAgICAgICAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgICAgICAgZXhwZWN0ZWRJUHM6CiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogIlRoZSBleHBlY3RlZCBJUCBhZGRyZXNzZXMgKElQdjQgYW5kIElQdjYpIG9mIHRoZSBlbmRwb2ludC4KICAgICAgICAgICAgICAgICAgSWYgXCJJbnRlcmZhY2VOYW1lXCIgaXMgbm90IHByZXNlbnQsIENhbGljbyB3aWxsIGxvb2sgZm9yIGFuIGludGVyZmFjZQogICAgICAgICAgICAgICAgICBtYXRjaGluZyBhbnkgb2YgdGhlIElQcyBpbiB0aGUgbGlzdCBhbmQgYXBwbHkgcG9saWN5IHRvIHRoYXQuIE5vdGU6CiAgICAgICAgICAgICAgICAgIFx0V2hlbiB1c2luZyB0aGUgc2VsZWN0b3IgbWF0Y2ggY3JpdGVyaWEgaW4gYW4gaW5ncmVzcyBvciBlZ3Jlc3MKICAgICAgICAgICAgICAgICAgc2VjdXJpdHkgUG9saWN5IFx0b3IgUHJvZmlsZSwgQ2FsaWNvIGNvbnZlcnRzIHRoZSBzZWxlY3RvciBpbnRvCiAgICAgICAgICAgICAgICAgIGEgc2V0IG9mIElQIGFkZHJlc3Nlcy4gRm9yIGhvc3QgXHRlbmRwb2ludHMsIHRoZSBFeHBlY3RlZElQcyBmaWVsZAogICAgICAgICAgICAgICAgICBpcyB1c2VkIGZvciB0aGF0IHB1cnBvc2UuIChJZiBvbmx5IHRoZSBpbnRlcmZhY2UgXHRuYW1lIGlzIHNwZWNpZmllZCwKICAgICAgICAgICAgICAgICAgQ2FsaWNvIGRvZXMgbm90IGxlYXJuIHRoZSBJUHMgb2YgdGhlIGludGVyZmFjZSBmb3IgdXNlIGluIG1hdGNoCiAgICAgICAgICAgICAgICAgIFx0Y3JpdGVyaWEuKSIKICAgICAgICAgICAgICAgIGl0ZW1zOgogICAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICAgIHR5cGU6IGFycmF5CiAgICAgICAgICAgICAgaW50ZXJmYWNlTmFtZToKICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAiRWl0aGVyIFwiKlwiLCBvciB0aGUgbmFtZSBvZiBhIHNwZWNpZmljIExpbnV4IGludGVyZmFjZQogICAgICAgICAgICAgICAgICB0byBhcHBseSBwb2xpY3kgdG87IG9yIGVtcHR5LiAgXCIqXCIgaW5kaWNhdGVzIHRoYXQgdGhpcyBIb3N0RW5kcG9pbnQKICAgICAgICAgICAgICAgICAgZ292ZXJucyBhbGwgdHJhZmZpYyB0bywgZnJvbSBvciB0aHJvdWdoIHRoZSBkZWZhdWx0IG5ldHdvcmsgbmFtZXNwYWNlCiAgICAgICAgICAgICAgICAgIG9mIHRoZSBob3N0IG5hbWVkIGJ5IHRoZSBcIk5vZGVcIiBmaWVsZDsgZW50ZXJpbmcgYW5kIGxlYXZpbmcgdGhhdAogICAgICAgICAgICAgICAgICBuYW1lc3BhY2UgdmlhIGFueSBpbnRlcmZhY2UsIGluY2x1ZGluZyB0aG9zZSBmcm9tL3RvIG5vbi1ob3N0LW5ldHdvcmtlZAogICAgICAgICAgICAgICAgICBsb2NhbCB3b3JrbG9hZHMuIFxuIElmIEludGVyZmFjZU5hbWUgaXMgbm90IFwiKlwiLCB0aGlzIEhvc3RFbmRwb2ludAogICAgICAgICAgICAgICAgICBvbmx5IGdvdmVybnMgdHJhZmZpYyB0aGF0IGVudGVycyBvciBsZWF2ZXMgdGhlIGhvc3QgdGhyb3VnaCB0aGUKICAgICAgICAgICAgICAgICAgc3BlY2lmaWMgaW50ZXJmYWNlIG5hbWVkIGJ5IEludGVyZmFjZU5hbWUsIG9yIC0gd2hlbiBJbnRlcmZhY2VOYW1lCiAgICAgICAgICAgICAgICAgIGlzIGVtcHR5IC0gdGhyb3VnaCB0aGUgc3BlY2lmaWMgaW50ZXJmYWNlIHRoYXQgaGFzIG9uZSBvZiB0aGUgSVBzCiAgICAgICAgICAgICAgICAgIGluIEV4cGVjdGVkSVBzLiBUaGVyZWZvcmUsIHdoZW4gSW50ZXJmYWNlTmFtZSBpcyBlbXB0eSwgYXQgbGVhc3QKICAgICAgICAgICAgICAgICAgb25lIGV4cGVjdGVkIElQIG11c3QgYmUgc3BlY2lmaWVkLiAgT25seSBleHRlcm5hbCBpbnRlcmZhY2VzIChzdWNoCiAgICAgICAgICAgICAgICAgIGFzIOKAnGV0aDDigJ0pIGFyZSBzdXBwb3J0ZWQgaGVyZTsgaXQgaXNuJ3QgcG9zc2libGUgZm9yIGEgSG9zdEVuZHBvaW50CiAgICAgICAgICAgICAgICAgIHRvIHByb3RlY3QgdHJhZmZpYyB0aHJvdWdoIGEgc3BlY2lmaWMgbG9jYWwgd29ya2xvYWQgaW50ZXJmYWNlLgogICAgICAgICAgICAgICAgICBcbiBOb3RlOiBPbmx5IHNvbWUga2luZHMgb2YgcG9saWN5IGFyZSBpbXBsZW1lbnRlZCBmb3IgXCIqXCIgSG9zdEVuZHBvaW50czsKICAgICAgICAgICAgICAgICAgaW5pdGlhbGx5IGp1c3QgcHJlLUROQVQgcG9saWN5LiAgUGxlYXNlIGNoZWNrIENhbGljbyBkb2N1bWVudGF0aW9uCiAgICAgICAgICAgICAgICAgIGZvciB0aGUgbGF0ZXN0IHBvc2l0aW9uLiIKICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgIG5vZGU6CiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogVGhlIG5vZGUgbmFtZSBpZGVudGlmeWluZyB0aGUgQ2FsaWNvIG5vZGUgaW5zdGFuY2UuCiAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICBwb3J0czoKICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBQb3J0cyBjb250YWlucyB0aGUgZW5kcG9pbnQncyBuYW1lZCBwb3J0cywgd2hpY2ggbWF5CiAgICAgICAgICAgICAgICAgIGJlIHJlZmVyZW5jZWQgaW4gc2VjdXJpdHkgcG9saWN5IHJ1bGVzLgogICAgICAgICAgICAgICAgaXRlbXM6CiAgICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgICAgICAgICAgICAgbmFtZToKICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgICAgICAgIHBvcnQ6CiAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBpbnRlZ2VyCiAgICAgICAgICAgICAgICAgICAgcHJvdG9jb2w6CiAgICAgICAgICAgICAgICAgICAgICBhbnlPZjoKICAgICAgICAgICAgICAgICAgICAgIC0gdHlwZTogaW50ZWdlcgogICAgICAgICAgICAgICAgICAgICAgLSB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICAgICAgICAgIHBhdHRlcm46IF4uKgogICAgICAgICAgICAgICAgICAgICAgeC1rdWJlcm5ldGVzLWludC1vci1zdHJpbmc6IHRydWUKICAgICAgICAgICAgICAgICAgcmVxdWlyZWQ6CiAgICAgICAgICAgICAgICAgIC0gbmFtZQogICAgICAgICAgICAgICAgICAtIHBvcnQKICAgICAgICAgICAgICAgICAgLSBwcm90b2NvbAogICAgICAgICAgICAgICAgICB0eXBlOiBvYmplY3QKICAgICAgICAgICAgICAgIHR5cGU6IGFycmF5CiAgICAgICAgICAgICAgcHJvZmlsZXM6CiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogQSBsaXN0IG9mIGlkZW50aWZpZXJzIG9mIHNlY3VyaXR5IFByb2ZpbGUgb2JqZWN0cyB0aGF0CiAgICAgICAgICAgICAgICAgIGFwcGx5IHRvIHRoaXMgZW5kcG9pbnQuIEVhY2ggcHJvZmlsZSBpcyBhcHBsaWVkIGluIHRoZSBvcmRlciB0aGF0CiAgICAgICAgICAgICAgICAgIHRoZXkgYXBwZWFyIGluIHRoaXMgbGlzdC4gIFByb2ZpbGUgcnVsZXMgYXJlIGFwcGxpZWQgYWZ0ZXIgdGhlIHNlbGVjdG9yLWJhc2VkCiAgICAgICAgICAgICAgICAgIHNlY3VyaXR5IHBvbGljeS4KICAgICAgICAgICAgICAgIGl0ZW1zOgogICAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICAgIHR5cGU6IGFycmF5CiAgICAgICAgICAgIHR5cGU6IG9iamVjdAogICAgICAgIHR5cGU6IG9iamVjdAogICAgc2VydmVkOiB0cnVlCiAgICBzdG9yYWdlOiB0cnVlCnN0YXR1czoKICBhY2NlcHRlZE5hbWVzOgogICAga2luZDogIiIKICAgIHBsdXJhbDogIiIKICBjb25kaXRpb25zOiBbXQogIHN0b3JlZFZlcnNpb25zOiBbXQoKLS0tCgotLS0KYXBpVmVyc2lvbjogYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjEKa2luZDogQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uCm1ldGFkYXRhOgogIG5hbWU6IGlwYW1ibG9ja3MuY3JkLnByb2plY3RjYWxpY28ub3JnCnNwZWM6CiAgZ3JvdXA6IGNyZC5wcm9qZWN0Y2FsaWNvLm9yZwogIG5hbWVzOgogICAga2luZDogSVBBTUJsb2NrCiAgICBsaXN0S2luZDogSVBBTUJsb2NrTGlzdAogICAgcGx1cmFsOiBpcGFtYmxvY2tzCiAgICBzaW5ndWxhcjogaXBhbWJsb2NrCiAgc2NvcGU6IENsdXN0ZXIKICB2ZXJzaW9uczoKICAtIG5hbWU6IHYxCiAgICBzY2hlbWE6CiAgICAgIG9wZW5BUElWM1NjaGVtYToKICAgICAgICBwcm9wZXJ0aWVzOgogICAgICAgICAgYXBpVmVyc2lvbjoKICAgICAgICAgICAgZGVzY3JpcHRpb246ICdBUElWZXJzaW9uIGRlZmluZXMgdGhlIHZlcnNpb25lZCBzY2hlbWEgb2YgdGhpcyByZXByZXNlbnRhdGlvbgogICAgICAgICAgICAgIG9mIGFuIG9iamVjdC4gU2VydmVycyBzaG91bGQgY29udmVydCByZWNvZ25pemVkIHNjaGVtYXMgdG8gdGhlIGxhdGVzdAogICAgICAgICAgICAgIGludGVybmFsIHZhbHVlLCBhbmQgbWF5IHJlamVjdCB1bnJlY29nbml6ZWQgdmFsdWVzLiBNb3JlIGluZm86IGh0dHBzOi8vZ2l0Lms4cy5pby9jb21tdW5pdHkvY29udHJpYnV0b3JzL2RldmVsL3NpZy1hcmNoaXRlY3R1cmUvYXBpLWNvbnZlbnRpb25zLm1kI3Jlc291cmNlcycKICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICBraW5kOgogICAgICAgICAgICBkZXNjcmlwdGlvbjogJ0tpbmQgaXMgYSBzdHJpbmcgdmFsdWUgcmVwcmVzZW50aW5nIHRoZSBSRVNUIHJlc291cmNlIHRoaXMKICAgICAgICAgICAgICBvYmplY3QgcmVwcmVzZW50cy4gU2VydmVycyBtYXkgaW5mZXIgdGhpcyBmcm9tIHRoZSBlbmRwb2ludCB0aGUgY2xpZW50CiAgICAgICAgICAgICAgc3VibWl0cyByZXF1ZXN0cyB0by4gQ2Fubm90IGJlIHVwZGF0ZWQuIEluIENhbWVsQ2FzZS4gTW9yZSBpbmZvOiBodHRwczovL2dpdC5rOHMuaW8vY29tbXVuaXR5L2NvbnRyaWJ1dG9ycy9kZXZlbC9zaWctYXJjaGl0ZWN0dXJlL2FwaS1jb252ZW50aW9ucy5tZCN0eXBlcy1raW5kcycKICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICBtZXRhZGF0YToKICAgICAgICAgICAgdHlwZTogb2JqZWN0CiAgICAgICAgICBzcGVjOgogICAgICAgICAgICBkZXNjcmlwdGlvbjogSVBBTUJsb2NrU3BlYyBjb250YWlucyB0aGUgc3BlY2lmaWNhdGlvbiBmb3IgYW4gSVBBTUJsb2NrCiAgICAgICAgICAgICAgcmVzb3VyY2UuCiAgICAgICAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgICAgICAgYWZmaW5pdHk6CiAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICBhbGxvY2F0aW9uczoKICAgICAgICAgICAgICAgIGl0ZW1zOgogICAgICAgICAgICAgICAgICB0eXBlOiBpbnRlZ2VyCiAgICAgICAgICAgICAgICAgICMgVE9ETzogVGhpcyBudWxsYWJsZSBpcyBtYW51YWxseSBhZGRlZCBpbi4gV2Ugc2hvdWxkIHVwZGF0ZSBjb250cm9sbGVyLWdlbgogICAgICAgICAgICAgICAgICAjIHRvIGhhbmRsZSBbXSppbnQgcHJvcGVybHkgaXRzZWxmLgogICAgICAgICAgICAgICAgICBudWxsYWJsZTogdHJ1ZQogICAgICAgICAgICAgICAgdHlwZTogYXJyYXkKICAgICAgICAgICAgICBhdHRyaWJ1dGVzOgogICAgICAgICAgICAgICAgaXRlbXM6CiAgICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgICAgICAgICAgICAgaGFuZGxlX2lkOgogICAgICAgICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgICAgICAgc2Vjb25kYXJ5OgogICAgICAgICAgICAgICAgICAgICAgYWRkaXRpb25hbFByb3BlcnRpZXM6CiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgICAgICAgICAgdHlwZTogb2JqZWN0CiAgICAgICAgICAgICAgICAgIHR5cGU6IG9iamVjdAogICAgICAgICAgICAgICAgdHlwZTogYXJyYXkKICAgICAgICAgICAgICBjaWRyOgogICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgZGVsZXRlZDoKICAgICAgICAgICAgICAgIHR5cGU6IGJvb2xlYW4KICAgICAgICAgICAgICBzdHJpY3RBZmZpbml0eToKICAgICAgICAgICAgICAgIHR5cGU6IGJvb2xlYW4KICAgICAgICAgICAgICB1bmFsbG9jYXRlZDoKICAgICAgICAgICAgICAgIGl0ZW1zOgogICAgICAgICAgICAgICAgICB0eXBlOiBpbnRlZ2VyCiAgICAgICAgICAgICAgICB0eXBlOiBhcnJheQogICAgICAgICAgICByZXF1aXJlZDoKICAgICAgICAgICAgLSBhbGxvY2F0aW9ucwogICAgICAgICAgICAtIGF0dHJpYnV0ZXMKICAgICAgICAgICAgLSBjaWRyCiAgICAgICAgICAgIC0gZGVsZXRlZAogICAgICAgICAgICAtIHN0cmljdEFmZmluaXR5CiAgICAgICAgICAgIC0gdW5hbGxvY2F0ZWQKICAgICAgICAgICAgdHlwZTogb2JqZWN0CiAgICAgICAgdHlwZTogb2JqZWN0CiAgICBzZXJ2ZWQ6IHRydWUKICAgIHN0b3JhZ2U6IHRydWUKc3RhdHVzOgogIGFjY2VwdGVkTmFtZXM6CiAgICBraW5kOiAiIgogICAgcGx1cmFsOiAiIgogIGNvbmRpdGlvbnM6IFtdCiAgc3RvcmVkVmVyc2lvbnM6IFtdCgotLS0KCi0tLQphcGlWZXJzaW9uOiBhcGlleHRlbnNpb25zLms4cy5pby92MQpraW5kOiBDdXN0b21SZXNvdXJjZURlZmluaXRpb24KbWV0YWRhdGE6CiAgbmFtZTogaXBhbWNvbmZpZ3MuY3JkLnByb2plY3RjYWxpY28ub3JnCnNwZWM6CiAgZ3JvdXA6IGNyZC5wcm9qZWN0Y2FsaWNvLm9yZwogIG5hbWVzOgogICAga2luZDogSVBBTUNvbmZpZwogICAgbGlzdEtpbmQ6IElQQU1Db25maWdMaXN0CiAgICBwbHVyYWw6IGlwYW1jb25maWdzCiAgICBzaW5ndWxhcjogaXBhbWNvbmZpZwogIHNjb3BlOiBDbHVzdGVyCiAgdmVyc2lvbnM6CiAgLSBuYW1lOiB2MQogICAgc2NoZW1hOgogICAgICBvcGVuQVBJVjNTY2hlbWE6CiAgICAgICAgcHJvcGVydGllczoKICAgICAgICAgIGFwaVZlcnNpb246CiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAnQVBJVmVyc2lvbiBkZWZpbmVzIHRoZSB2ZXJzaW9uZWQgc2NoZW1hIG9mIHRoaXMgcmVwcmVzZW50YXRpb24KICAgICAgICAgICAgICBvZiBhbiBvYmplY3QuIFNlcnZlcnMgc2hvdWxkIGNvbnZlcnQgcmVjb2duaXplZCBzY2hlbWFzIHRvIHRoZSBsYXRlc3QKICAgICAgICAgICAgICBpbnRlcm5hbCB2YWx1ZSwgYW5kIG1heSByZWplY3QgdW5yZWNvZ25pemVkIHZhbHVlcy4gTW9yZSBpbmZvOiBodHRwczovL2dpdC5rOHMuaW8vY29tbXVuaXR5L2NvbnRyaWJ1dG9ycy9kZXZlbC9zaWctYXJjaGl0ZWN0dXJlL2FwaS1jb252ZW50aW9ucy5tZCNyZXNvdXJjZXMnCiAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAga2luZDoKICAgICAgICAgICAgZGVzY3JpcHRpb246ICdLaW5kIGlzIGEgc3RyaW5nIHZhbHVlIHJlcHJlc2VudGluZyB0aGUgUkVTVCByZXNvdXJjZSB0aGlzCiAgICAgICAgICAgICAgb2JqZWN0IHJlcHJlc2VudHMuIFNlcnZlcnMgbWF5IGluZmVyIHRoaXMgZnJvbSB0aGUgZW5kcG9pbnQgdGhlIGNsaWVudAogICAgICAgICAgICAgIHN1Ym1pdHMgcmVxdWVzdHMgdG8uIENhbm5vdCBiZSB1cGRhdGVkLiBJbiBDYW1lbENhc2UuIE1vcmUgaW5mbzogaHR0cHM6Ly9naXQuazhzLmlvL2NvbW11bml0eS9jb250cmlidXRvcnMvZGV2ZWwvc2lnLWFyY2hpdGVjdHVyZS9hcGktY29udmVudGlvbnMubWQjdHlwZXMta2luZHMnCiAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgbWV0YWRhdGE6CiAgICAgICAgICAgIHR5cGU6IG9iamVjdAogICAgICAgICAgc3BlYzoKICAgICAgICAgICAgZGVzY3JpcHRpb246IElQQU1Db25maWdTcGVjIGNvbnRhaW5zIHRoZSBzcGVjaWZpY2F0aW9uIGZvciBhbiBJUEFNQ29uZmlnCiAgICAgICAgICAgICAgcmVzb3VyY2UuCiAgICAgICAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgICAgICAgYXV0b0FsbG9jYXRlQmxvY2tzOgogICAgICAgICAgICAgICAgdHlwZTogYm9vbGVhbgogICAgICAgICAgICAgIHN0cmljdEFmZmluaXR5OgogICAgICAgICAgICAgICAgdHlwZTogYm9vbGVhbgogICAgICAgICAgICByZXF1aXJlZDoKICAgICAgICAgICAgLSBhdXRvQWxsb2NhdGVCbG9ja3MKICAgICAgICAgICAgLSBzdHJpY3RBZmZpbml0eQogICAgICAgICAgICB0eXBlOiBvYmplY3QKICAgICAgICB0eXBlOiBvYmplY3QKICAgIHNlcnZlZDogdHJ1ZQogICAgc3RvcmFnZTogdHJ1ZQpzdGF0dXM6CiAgYWNjZXB0ZWROYW1lczoKICAgIGtpbmQ6ICIiCiAgICBwbHVyYWw6ICIiCiAgY29uZGl0aW9uczogW10KICBzdG9yZWRWZXJzaW9uczogW10KCi0tLQoKLS0tCmFwaVZlcnNpb246IGFwaWV4dGVuc2lvbnMuazhzLmlvL3YxCmtpbmQ6IEN1c3RvbVJlc291cmNlRGVmaW5pdGlvbgptZXRhZGF0YToKICBuYW1lOiBpcGFtaGFuZGxlcy5jcmQucHJvamVjdGNhbGljby5vcmcKc3BlYzoKICBncm91cDogY3JkLnByb2plY3RjYWxpY28ub3JnCiAgbmFtZXM6CiAgICBraW5kOiBJUEFNSGFuZGxlCiAgICBsaXN0S2luZDogSVBBTUhhbmRsZUxpc3QKICAgIHBsdXJhbDogaXBhbWhhbmRsZXMKICAgIHNpbmd1bGFyOiBpcGFtaGFuZGxlCiAgc2NvcGU6IENsdXN0ZXIKICB2ZXJzaW9uczoKICAtIG5hbWU6IHYxCiAgICBzY2hlbWE6CiAgICAgIG9wZW5BUElWM1NjaGVtYToKICAgICAgICBwcm9wZXJ0aWVzOgogICAgICAgICAgYXBpVmVyc2lvbjoKICAgICAgICAgICAgZGVzY3JpcHRpb246ICdBUElWZXJzaW9uIGRlZmluZXMgdGhlIHZlcnNpb25lZCBzY2hlbWEgb2YgdGhpcyByZXByZXNlbnRhdGlvbgogICAgICAgICAgICAgIG9mIGFuIG9iamVjdC4gU2VydmVycyBzaG91bGQgY29udmVydCByZWNvZ25pemVkIHNjaGVtYXMgdG8gdGhlIGxhdGVzdAogICAgICAgICAgICAgIGludGVybmFsIHZhbHVlLCBhbmQgbWF5IHJlamVjdCB1bnJlY29nbml6ZWQgdmFsdWVzLiBNb3JlIGluZm86IGh0dHBzOi8vZ2l0Lms4cy5pby9jb21tdW5pdHkvY29udHJpYnV0b3JzL2RldmVsL3NpZy1hcmNoaXRlY3R1cmUvYXBpLWNvbnZlbnRpb25zLm1kI3Jlc291cmNlcycKICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICBraW5kOgogICAgICAgICAgICBkZXNjcmlwdGlvbjogJ0tpbmQgaXMgYSBzdHJpbmcgdmFsdWUgcmVwcmVzZW50aW5nIHRoZSBSRVNUIHJlc291cmNlIHRoaXMKICAgICAgICAgICAgICBvYmplY3QgcmVwcmVzZW50cy4gU2VydmVycyBtYXkgaW5mZXIgdGhpcyBmcm9tIHRoZSBlbmRwb2ludCB0aGUgY2xpZW50CiAgICAgICAgICAgICAgc3VibWl0cyByZXF1ZXN0cyB0by4gQ2Fubm90IGJlIHVwZGF0ZWQuIEluIENhbWVsQ2FzZS4gTW9yZSBpbmZvOiBodHRwczovL2dpdC5rOHMuaW8vY29tbXVuaXR5L2NvbnRyaWJ1dG9ycy9kZXZlbC9zaWctYXJjaGl0ZWN0dXJlL2FwaS1jb252ZW50aW9ucy5tZCN0eXBlcy1raW5kcycKICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICBtZXRhZGF0YToKICAgICAgICAgICAgdHlwZTogb2JqZWN0CiAgICAgICAgICBzcGVjOgogICAgICAgICAgICBkZXNjcmlwdGlvbjogSVBBTUhhbmRsZVNwZWMgY29udGFpbnMgdGhlIHNwZWNpZmljYXRpb24gZm9yIGFuIElQQU1IYW5kbGUKICAgICAgICAgICAgICByZXNvdXJjZS4KICAgICAgICAgICAgcHJvcGVydGllczoKICAgICAgICAgICAgICBibG9jazoKICAgICAgICAgICAgICAgIGFkZGl0aW9uYWxQcm9wZXJ0aWVzOgogICAgICAgICAgICAgICAgICB0eXBlOiBpbnRlZ2VyCiAgICAgICAgICAgICAgICB0eXBlOiBvYmplY3QKICAgICAgICAgICAgICBoYW5kbGVJRDoKICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICByZXF1aXJlZDoKICAgICAgICAgICAgLSBibG9jawogICAgICAgICAgICAtIGhhbmRsZUlECiAgICAgICAgICAgIHR5cGU6IG9iamVjdAogICAgICAgIHR5cGU6IG9iamVjdAogICAgc2VydmVkOiB0cnVlCiAgICBzdG9yYWdlOiB0cnVlCnN0YXR1czoKICBhY2NlcHRlZE5hbWVzOgogICAga2luZDogIiIKICAgIHBsdXJhbDogIiIKICBjb25kaXRpb25zOiBbXQogIHN0b3JlZFZlcnNpb25zOiBbXQoKLS0tCgotLS0KYXBpVmVyc2lvbjogYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjEKa2luZDogQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uCm1ldGFkYXRhOgogIG5hbWU6IGlwcG9vbHMuY3JkLnByb2plY3RjYWxpY28ub3JnCnNwZWM6CiAgZ3JvdXA6IGNyZC5wcm9qZWN0Y2FsaWNvLm9yZwogIG5hbWVzOgogICAga2luZDogSVBQb29sCiAgICBsaXN0S2luZDogSVBQb29sTGlzdAogICAgcGx1cmFsOiBpcHBvb2xzCiAgICBzaW5ndWxhcjogaXBwb29sCiAgc2NvcGU6IENsdXN0ZXIKICB2ZXJzaW9uczoKICAtIG5hbWU6IHYxCiAgICBzY2hlbWE6CiAgICAgIG9wZW5BUElWM1NjaGVtYToKICAgICAgICBwcm9wZXJ0aWVzOgogICAgICAgICAgYXBpVmVyc2lvbjoKICAgICAgICAgICAgZGVzY3JpcHRpb246ICdBUElWZXJzaW9uIGRlZmluZXMgdGhlIHZlcnNpb25lZCBzY2hlbWEgb2YgdGhpcyByZXByZXNlbnRhdGlvbgogICAgICAgICAgICAgIG9mIGFuIG9iamVjdC4gU2VydmVycyBzaG91bGQgY29udmVydCByZWNvZ25pemVkIHNjaGVtYXMgdG8gdGhlIGxhdGVzdAogICAgICAgICAgICAgIGludGVybmFsIHZhbHVlLCBhbmQgbWF5IHJlamVjdCB1bnJlY29nbml6ZWQgdmFsdWVzLiBNb3JlIGluZm86IGh0dHBzOi8vZ2l0Lms4cy5pby9jb21tdW5pdHkvY29udHJpYnV0b3JzL2RldmVsL3NpZy1hcmNoaXRlY3R1cmUvYXBpLWNvbnZlbnRpb25zLm1kI3Jlc291cmNlcycKICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICBraW5kOgogICAgICAgICAgICBkZXNjcmlwdGlvbjogJ0tpbmQgaXMgYSBzdHJpbmcgdmFsdWUgcmVwcmVzZW50aW5nIHRoZSBSRVNUIHJlc291cmNlIHRoaXMKICAgICAgICAgICAgICBvYmplY3QgcmVwcmVzZW50cy4gU2VydmVycyBtYXkgaW5mZXIgdGhpcyBmcm9tIHRoZSBlbmRwb2ludCB0aGUgY2xpZW50CiAgICAgICAgICAgICAgc3VibWl0cyByZXF1ZXN0cyB0by4gQ2Fubm90IGJlIHVwZGF0ZWQuIEluIENhbWVsQ2FzZS4gTW9yZSBpbmZvOiBodHRwczovL2dpdC5rOHMuaW8vY29tbXVuaXR5L2NvbnRyaWJ1dG9ycy9kZXZlbC9zaWctYXJjaGl0ZWN0dXJlL2FwaS1jb252ZW50aW9ucy5tZCN0eXBlcy1raW5kcycKICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICBtZXRhZGF0YToKICAgICAgICAgICAgdHlwZTogb2JqZWN0CiAgICAgICAgICBzcGVjOgogICAgICAgICAgICBkZXNjcmlwdGlvbjogSVBQb29sU3BlYyBjb250YWlucyB0aGUgc3BlY2lmaWNhdGlvbiBmb3IgYW4gSVBQb29sIHJlc291cmNlLgogICAgICAgICAgICBwcm9wZXJ0aWVzOgogICAgICAgICAgICAgIGJsb2NrU2l6ZToKICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBUaGUgYmxvY2sgc2l6ZSB0byB1c2UgZm9yIElQIGFkZHJlc3MgYXNzaWdubWVudHMgZnJvbQogICAgICAgICAgICAgICAgICB0aGlzIHBvb2wuIERlZmF1bHRzIHRvIDI2IGZvciBJUHY0IGFuZCAxMTIgZm9yIElQdjYuCiAgICAgICAgICAgICAgICB0eXBlOiBpbnRlZ2VyCiAgICAgICAgICAgICAgY2lkcjoKICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBUaGUgcG9vbCBDSURSLgogICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgZGlzYWJsZWQ6CiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogV2hlbiBkaXNhYmxlZCBpcyB0cnVlLCBDYWxpY28gSVBBTSB3aWxsIG5vdCBhc3NpZ24gYWRkcmVzc2VzCiAgICAgICAgICAgICAgICAgIGZyb20gdGhpcyBwb29sLgogICAgICAgICAgICAgICAgdHlwZTogYm9vbGVhbgogICAgICAgICAgICAgIGlwaXA6CiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogJ0RlcHJlY2F0ZWQ6IHRoaXMgZmllbGQgaXMgb25seSB1c2VkIGZvciBBUEl2MSBiYWNrd2FyZHMKICAgICAgICAgICAgICAgICAgY29tcGF0aWJpbGl0eS4gU2V0dGluZyB0aGlzIGZpZWxkIGlzIG5vdCBhbGxvd2VkLCB0aGlzIGZpZWxkIGlzCiAgICAgICAgICAgICAgICAgIGZvciBpbnRlcm5hbCB1c2Ugb25seS4nCiAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzOgogICAgICAgICAgICAgICAgICBlbmFibGVkOgogICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBXaGVuIGVuYWJsZWQgaXMgdHJ1ZSwgaXBpcCB0dW5uZWxpbmcgd2lsbCBiZSB1c2VkCiAgICAgICAgICAgICAgICAgICAgICB0byBkZWxpdmVyIHBhY2tldHMgdG8gZGVzdGluYXRpb25zIHdpdGhpbiB0aGlzIHBvb2wuCiAgICAgICAgICAgICAgICAgICAgdHlwZTogYm9vbGVhbgogICAgICAgICAgICAgICAgICBtb2RlOgogICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBUaGUgSVBJUCBtb2RlLiAgVGhpcyBjYW4gYmUgb25lIG9mICJhbHdheXMiIG9yICJjcm9zcy1zdWJuZXQiLiAgQQogICAgICAgICAgICAgICAgICAgICAgbW9kZSBvZiAiYWx3YXlzIiB3aWxsIGFsc28gdXNlIElQSVAgdHVubmVsaW5nIGZvciByb3V0aW5nIHRvCiAgICAgICAgICAgICAgICAgICAgICBkZXN0aW5hdGlvbiBJUCBhZGRyZXNzZXMgd2l0aGluIHRoaXMgcG9vbC4gIEEgbW9kZSBvZiAiY3Jvc3Mtc3VibmV0IgogICAgICAgICAgICAgICAgICAgICAgd2lsbCBvbmx5IHVzZSBJUElQIHR1bm5lbGluZyB3aGVuIHRoZSBkZXN0aW5hdGlvbiBub2RlIGlzIG9uCiAgICAgICAgICAgICAgICAgICAgICBhIGRpZmZlcmVudCBzdWJuZXQgdG8gdGhlIG9yaWdpbmF0aW5nIG5vZGUuICBUaGUgZGVmYXVsdCB2YWx1ZQogICAgICAgICAgICAgICAgICAgICAgKGlmIG5vdCBzcGVjaWZpZWQpIGlzICJhbHdheXMiLgogICAgICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgICAgdHlwZTogb2JqZWN0CiAgICAgICAgICAgICAgaXBpcE1vZGU6CiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogQ29udGFpbnMgY29uZmlndXJhdGlvbiBmb3IgSVBJUCB0dW5uZWxpbmcgZm9yIHRoaXMgcG9vbC4KICAgICAgICAgICAgICAgICAgSWYgbm90IHNwZWNpZmllZCwgdGhlbiB0aGlzIGlzIGRlZmF1bHRlZCB0byAiTmV2ZXIiIChpLmUuIElQSVAgdHVubmVsaW5nCiAgICAgICAgICAgICAgICAgIGlzIGRpc2FibGVkKS4KICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgIG5hdC1vdXRnb2luZzoKICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAnRGVwcmVjYXRlZDogdGhpcyBmaWVsZCBpcyBvbmx5IHVzZWQgZm9yIEFQSXYxIGJhY2t3YXJkcwogICAgICAgICAgICAgICAgICBjb21wYXRpYmlsaXR5LiBTZXR0aW5nIHRoaXMgZmllbGQgaXMgbm90IGFsbG93ZWQsIHRoaXMgZmllbGQgaXMKICAgICAgICAgICAgICAgICAgZm9yIGludGVybmFsIHVzZSBvbmx5LicKICAgICAgICAgICAgICAgIHR5cGU6IGJvb2xlYW4KICAgICAgICAgICAgICBuYXRPdXRnb2luZzoKICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBXaGVuIG5hdC1vdXRnb2luZyBpcyB0cnVlLCBwYWNrZXRzIHNlbnQgZnJvbSBDYWxpY28gbmV0d29ya2VkCiAgICAgICAgICAgICAgICAgIGNvbnRhaW5lcnMgaW4gdGhpcyBwb29sIHRvIGRlc3RpbmF0aW9ucyBvdXRzaWRlIG9mIHRoaXMgcG9vbCB3aWxsCiAgICAgICAgICAgICAgICAgIGJlIG1hc3F1ZXJhZGVkLgogICAgICAgICAgICAgICAgdHlwZTogYm9vbGVhbgogICAgICAgICAgICAgIG5vZGVTZWxlY3RvcjoKICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBBbGxvd3MgSVBQb29sIHRvIGFsbG9jYXRlIGZvciBhIHNwZWNpZmljIG5vZGUgYnkgbGFiZWwKICAgICAgICAgICAgICAgICAgc2VsZWN0b3IuCiAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICB2eGxhbk1vZGU6CiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogQ29udGFpbnMgY29uZmlndXJhdGlvbiBmb3IgVlhMQU4gdHVubmVsaW5nIGZvciB0aGlzIHBvb2wuCiAgICAgICAgICAgICAgICAgIElmIG5vdCBzcGVjaWZpZWQsIHRoZW4gdGhpcyBpcyBkZWZhdWx0ZWQgdG8gIk5ldmVyIiAoaS5lLiBWWExBTgogICAgICAgICAgICAgICAgICB0dW5uZWxpbmcgaXMgZGlzYWJsZWQpLgogICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgIHJlcXVpcmVkOgogICAgICAgICAgICAtIGNpZHIKICAgICAgICAgICAgdHlwZTogb2JqZWN0CiAgICAgICAgdHlwZTogb2JqZWN0CiAgICBzZXJ2ZWQ6IHRydWUKICAgIHN0b3JhZ2U6IHRydWUKc3RhdHVzOgogIGFjY2VwdGVkTmFtZXM6CiAgICBraW5kOiAiIgogICAgcGx1cmFsOiAiIgogIGNvbmRpdGlvbnM6IFtdCiAgc3RvcmVkVmVyc2lvbnM6IFtdCgotLS0KCi0tLQphcGlWZXJzaW9uOiBhcGlleHRlbnNpb25zLms4cy5pby92MQpraW5kOiBDdXN0b21SZXNvdXJjZURlZmluaXRpb24KbWV0YWRhdGE6CiAgbmFtZToga3ViZWNvbnRyb2xsZXJzY29uZmlndXJhdGlvbnMuY3JkLnByb2plY3RjYWxpY28ub3JnCnNwZWM6CiAgZ3JvdXA6IGNyZC5wcm9qZWN0Y2FsaWNvLm9yZwogIG5hbWVzOgogICAga2luZDogS3ViZUNvbnRyb2xsZXJzQ29uZmlndXJhdGlvbgogICAgbGlzdEtpbmQ6IEt1YmVDb250cm9sbGVyc0NvbmZpZ3VyYXRpb25MaXN0CiAgICBwbHVyYWw6IGt1YmVjb250cm9sbGVyc2NvbmZpZ3VyYXRpb25zCiAgICBzaW5ndWxhcjoga3ViZWNvbnRyb2xsZXJzY29uZmlndXJhdGlvbgogIHNjb3BlOiBDbHVzdGVyCiAgdmVyc2lvbnM6CiAgLSBuYW1lOiB2MQogICAgc2NoZW1hOgogICAgICBvcGVuQVBJVjNTY2hlbWE6CiAgICAgICAgcHJvcGVydGllczoKICAgICAgICAgIGFwaVZlcnNpb246CiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAnQVBJVmVyc2lvbiBkZWZpbmVzIHRoZSB2ZXJzaW9uZWQgc2NoZW1hIG9mIHRoaXMgcmVwcmVzZW50YXRpb24KICAgICAgICAgICAgICBvZiBhbiBvYmplY3QuIFNlcnZlcnMgc2hvdWxkIGNvbnZlcnQgcmVjb2duaXplZCBzY2hlbWFzIHRvIHRoZSBsYXRlc3QKICAgICAgICAgICAgICBpbnRlcm5hbCB2YWx1ZSwgYW5kIG1heSByZWplY3QgdW5yZWNvZ25pemVkIHZhbHVlcy4gTW9yZSBpbmZvOiBodHRwczovL2dpdC5rOHMuaW8vY29tbXVuaXR5L2NvbnRyaWJ1dG9ycy9kZXZlbC9zaWctYXJjaGl0ZWN0dXJlL2FwaS1jb252ZW50aW9ucy5tZCNyZXNvdXJjZXMnCiAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAga2luZDoKICAgICAgICAgICAgZGVzY3JpcHRpb246ICdLaW5kIGlzIGEgc3RyaW5nIHZhbHVlIHJlcHJlc2VudGluZyB0aGUgUkVTVCByZXNvdXJjZSB0aGlzCiAgICAgICAgICAgICAgb2JqZWN0IHJlcHJlc2VudHMuIFNlcnZlcnMgbWF5IGluZmVyIHRoaXMgZnJvbSB0aGUgZW5kcG9pbnQgdGhlIGNsaWVudAogICAgICAgICAgICAgIHN1Ym1pdHMgcmVxdWVzdHMgdG8uIENhbm5vdCBiZSB1cGRhdGVkLiBJbiBDYW1lbENhc2UuIE1vcmUgaW5mbzogaHR0cHM6Ly9naXQuazhzLmlvL2NvbW11bml0eS9jb250cmlidXRvcnMvZGV2ZWwvc2lnLWFyY2hpdGVjdHVyZS9hcGktY29udmVudGlvbnMubWQjdHlwZXMta2luZHMnCiAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgbWV0YWRhdGE6CiAgICAgICAgICAgIHR5cGU6IG9iamVjdAogICAgICAgICAgc3BlYzoKICAgICAgICAgICAgZGVzY3JpcHRpb246IEt1YmVDb250cm9sbGVyc0NvbmZpZ3VyYXRpb25TcGVjIGNvbnRhaW5zIHRoZSB2YWx1ZXMgb2YgdGhlCiAgICAgICAgICAgICAgS3ViZXJuZXRlcyBjb250cm9sbGVycyBjb25maWd1cmF0aW9uLgogICAgICAgICAgICBwcm9wZXJ0aWVzOgogICAgICAgICAgICAgIGNvbnRyb2xsZXJzOgogICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IENvbnRyb2xsZXJzIGVuYWJsZXMgYW5kIGNvbmZpZ3VyZXMgaW5kaXZpZHVhbCBLdWJlcm5ldGVzCiAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXJzCiAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzOgogICAgICAgICAgICAgICAgICBuYW1lc3BhY2U6CiAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IE5hbWVzcGFjZSBlbmFibGVzIGFuZCBjb25maWd1cmVzIHRoZSBuYW1lc3BhY2UgY29udHJvbGxlci4KICAgICAgICAgICAgICAgICAgICAgIEVuYWJsZWQgYnkgZGVmYXVsdCwgc2V0IHRvIG5pbCB0byBkaXNhYmxlLgogICAgICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgICAgICAgICAgICAgICByZWNvbmNpbGVyUGVyaW9kOgogICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogJ1JlY29uY2lsZXJQZXJpb2QgaXMgdGhlIHBlcmlvZCB0byBwZXJmb3JtIHJlY29uY2lsaWF0aW9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgd2l0aCB0aGUgQ2FsaWNvIGRhdGFzdG9yZS4gW0RlZmF1bHQ6IDVtXScKICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgICAgICAgdHlwZTogb2JqZWN0CiAgICAgICAgICAgICAgICAgIG5vZGU6CiAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IE5vZGUgZW5hYmxlcyBhbmQgY29uZmlndXJlcyB0aGUgbm9kZSBjb250cm9sbGVyLgogICAgICAgICAgICAgICAgICAgICAgRW5hYmxlZCBieSBkZWZhdWx0LCBzZXQgdG8gbmlsIHRvIGRpc2FibGUuCiAgICAgICAgICAgICAgICAgICAgcHJvcGVydGllczoKICAgICAgICAgICAgICAgICAgICAgIGhvc3RFbmRwb2ludDoKICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IEhvc3RFbmRwb2ludCBjb250cm9scyBzeW5jaW5nIG5vZGVzIHRvIGhvc3QgZW5kcG9pbnRzLgogICAgICAgICAgICAgICAgICAgICAgICAgIERpc2FibGVkIGJ5IGRlZmF1bHQsIHNldCB0byBuaWwgdG8gZGlzYWJsZS4KICAgICAgICAgICAgICAgICAgICAgICAgcHJvcGVydGllczoKICAgICAgICAgICAgICAgICAgICAgICAgICBhdXRvQ3JlYXRlOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICdBdXRvQ3JlYXRlIGVuYWJsZXMgYXV0b21hdGljIGNyZWF0aW9uIG9mCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhvc3QgZW5kcG9pbnRzIGZvciBldmVyeSBub2RlLiBbRGVmYXVsdDogRGlzYWJsZWRdJwogICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IG9iamVjdAogICAgICAgICAgICAgICAgICAgICAgcmVjb25jaWxlclBlcmlvZDoKICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICdSZWNvbmNpbGVyUGVyaW9kIGlzIHRoZSBwZXJpb2QgdG8gcGVyZm9ybSByZWNvbmNpbGlhdGlvbgogICAgICAgICAgICAgICAgICAgICAgICAgIHdpdGggdGhlIENhbGljbyBkYXRhc3RvcmUuIFtEZWZhdWx0OiA1bV0nCiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgICAgICAgICAgc3luY0xhYmVsczoKICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICdTeW5jTGFiZWxzIGNvbnRyb2xzIHdoZXRoZXIgdG8gY29weSBLdWJlcm5ldGVzCiAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZSBsYWJlbHMgdG8gQ2FsaWNvIG5vZGVzLiBbRGVmYXVsdDogRW5hYmxlZF0nCiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgICAgICAgIHR5cGU6IG9iamVjdAogICAgICAgICAgICAgICAgICBwb2xpY3k6CiAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IFBvbGljeSBlbmFibGVzIGFuZCBjb25maWd1cmVzIHRoZSBwb2xpY3kgY29udHJvbGxlci4KICAgICAgICAgICAgICAgICAgICAgIEVuYWJsZWQgYnkgZGVmYXVsdCwgc2V0IHRvIG5pbCB0byBkaXNhYmxlLgogICAgICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgICAgICAgICAgICAgICByZWNvbmNpbGVyUGVyaW9kOgogICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogJ1JlY29uY2lsZXJQZXJpb2QgaXMgdGhlIHBlcmlvZCB0byBwZXJmb3JtIHJlY29uY2lsaWF0aW9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgd2l0aCB0aGUgQ2FsaWNvIGRhdGFzdG9yZS4gW0RlZmF1bHQ6IDVtXScKICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgICAgICAgdHlwZTogb2JqZWN0CiAgICAgICAgICAgICAgICAgIHNlcnZpY2VBY2NvdW50OgogICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBTZXJ2aWNlQWNjb3VudCBlbmFibGVzIGFuZCBjb25maWd1cmVzIHRoZSBzZXJ2aWNlCiAgICAgICAgICAgICAgICAgICAgICBhY2NvdW50IGNvbnRyb2xsZXIuIEVuYWJsZWQgYnkgZGVmYXVsdCwgc2V0IHRvIG5pbCB0byBkaXNhYmxlLgogICAgICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgICAgICAgICAgICAgICByZWNvbmNpbGVyUGVyaW9kOgogICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogJ1JlY29uY2lsZXJQZXJpb2QgaXMgdGhlIHBlcmlvZCB0byBwZXJmb3JtIHJlY29uY2lsaWF0aW9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgd2l0aCB0aGUgQ2FsaWNvIGRhdGFzdG9yZS4gW0RlZmF1bHQ6IDVtXScKICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgICAgICAgdHlwZTogb2JqZWN0CiAgICAgICAgICAgICAgICAgIHdvcmtsb2FkRW5kcG9pbnQ6CiAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IFdvcmtsb2FkRW5kcG9pbnQgZW5hYmxlcyBhbmQgY29uZmlndXJlcyB0aGUgd29ya2xvYWQKICAgICAgICAgICAgICAgICAgICAgIGVuZHBvaW50IGNvbnRyb2xsZXIuIEVuYWJsZWQgYnkgZGVmYXVsdCwgc2V0IHRvIG5pbCB0byBkaXNhYmxlLgogICAgICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgICAgICAgICAgICAgICByZWNvbmNpbGVyUGVyaW9kOgogICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogJ1JlY29uY2lsZXJQZXJpb2QgaXMgdGhlIHBlcmlvZCB0byBwZXJmb3JtIHJlY29uY2lsaWF0aW9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgd2l0aCB0aGUgQ2FsaWNvIGRhdGFzdG9yZS4gW0RlZmF1bHQ6IDVtXScKICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgICAgICAgdHlwZTogb2JqZWN0CiAgICAgICAgICAgICAgICB0eXBlOiBvYmplY3QKICAgICAgICAgICAgICBldGNkVjNDb21wYWN0aW9uUGVyaW9kOgogICAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICdFdGNkVjNDb21wYWN0aW9uUGVyaW9kIGlzIHRoZSBwZXJpb2QgYmV0d2VlbiBldGNkdjMKICAgICAgICAgICAgICAgICAgY29tcGFjdGlvbiByZXF1ZXN0cy4gU2V0IHRvIDAgdG8gZGlzYWJsZS4gW0RlZmF1bHQ6IDEwbV0nCiAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICBoZWFsdGhDaGVja3M6CiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogJ0hlYWx0aENoZWNrcyBlbmFibGVzIG9yIGRpc2FibGVzIHN1cHBvcnQgZm9yIGhlYWx0aAogICAgICAgICAgICAgICAgICBjaGVja3MgW0RlZmF1bHQ6IEVuYWJsZWRdJwogICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgbG9nU2V2ZXJpdHlTY3JlZW46CiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogJ0xvZ1NldmVyaXR5U2NyZWVuIGlzIHRoZSBsb2cgc2V2ZXJpdHkgYWJvdmUgd2hpY2ggbG9ncwogICAgICAgICAgICAgICAgICBhcmUgc2VudCB0byB0aGUgc3Rkb3V0LiBbRGVmYXVsdDogSW5mb10nCiAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgcmVxdWlyZWQ6CiAgICAgICAgICAgIC0gY29udHJvbGxlcnMKICAgICAgICAgICAgdHlwZTogb2JqZWN0CiAgICAgICAgICBzdGF0dXM6CiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBLdWJlQ29udHJvbGxlcnNDb25maWd1cmF0aW9uU3RhdHVzIHJlcHJlc2VudHMgdGhlIHN0YXR1cwogICAgICAgICAgICAgIG9mIHRoZSBjb25maWd1cmF0aW9uLiBJdCdzIHVzZWZ1bCBmb3IgYWRtaW5zIHRvIGJlIGFibGUgdG8gc2VlIHRoZSBhY3R1YWwKICAgICAgICAgICAgICBjb25maWcgdGhhdCB3YXMgYXBwbGllZCwgd2hpY2ggY2FuIGJlIG1vZGlmaWVkIGJ5IGVudmlyb25tZW50IHZhcmlhYmxlcwogICAgICAgICAgICAgIG9uIHRoZSBrdWJlLWNvbnRyb2xsZXJzIHByb2Nlc3MuCiAgICAgICAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgICAgICAgZW52aXJvbm1lbnRWYXJzOgogICAgICAgICAgICAgICAgYWRkaXRpb25hbFByb3BlcnRpZXM6CiAgICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IEVudmlyb25tZW50VmFycyBjb250YWlucyB0aGUgZW52aXJvbm1lbnQgdmFyaWFibGVzIG9uCiAgICAgICAgICAgICAgICAgIHRoZSBrdWJlLWNvbnRyb2xsZXJzIHRoYXQgaW5mbHVlbmNlZCB0aGUgUnVubmluZ0NvbmZpZy4KICAgICAgICAgICAgICAgIHR5cGU6IG9iamVjdAogICAgICAgICAgICAgIHJ1bm5pbmdDb25maWc6CiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogUnVubmluZ0NvbmZpZyBjb250YWlucyB0aGUgZWZmZWN0aXZlIGNvbmZpZyB0aGF0IGlzIHJ1bm5pbmcKICAgICAgICAgICAgICAgICAgaW4gdGhlIGt1YmUtY29udHJvbGxlcnMgcG9kLCBhZnRlciBtZXJnaW5nIHRoZSBBUEkgcmVzb3VyY2Ugd2l0aAogICAgICAgICAgICAgICAgICBhbnkgZW52aXJvbm1lbnQgdmFyaWFibGVzLgogICAgICAgICAgICAgICAgcHJvcGVydGllczoKICAgICAgICAgICAgICAgICAgY29udHJvbGxlcnM6CiAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IENvbnRyb2xsZXJzIGVuYWJsZXMgYW5kIGNvbmZpZ3VyZXMgaW5kaXZpZHVhbCBLdWJlcm5ldGVzCiAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVycwogICAgICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgICAgICAgICAgICAgICBuYW1lc3BhY2U6CiAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBOYW1lc3BhY2UgZW5hYmxlcyBhbmQgY29uZmlndXJlcyB0aGUgbmFtZXNwYWNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlci4gRW5hYmxlZCBieSBkZWZhdWx0LCBzZXQgdG8gbmlsIHRvIGRpc2FibGUuCiAgICAgICAgICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgICAgICAgICAgICAgICAgICAgcmVjb25jaWxlclBlcmlvZDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAnUmVjb25jaWxlclBlcmlvZCBpcyB0aGUgcGVyaW9kIHRvIHBlcmZvcm0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVjb25jaWxpYXRpb24gd2l0aCB0aGUgQ2FsaWNvIGRhdGFzdG9yZS4gW0RlZmF1bHQ6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDVtXScKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBvYmplY3QKICAgICAgICAgICAgICAgICAgICAgIG5vZGU6CiAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBOb2RlIGVuYWJsZXMgYW5kIGNvbmZpZ3VyZXMgdGhlIG5vZGUgY29udHJvbGxlci4KICAgICAgICAgICAgICAgICAgICAgICAgICBFbmFibGVkIGJ5IGRlZmF1bHQsIHNldCB0byBuaWwgdG8gZGlzYWJsZS4KICAgICAgICAgICAgICAgICAgICAgICAgcHJvcGVydGllczoKICAgICAgICAgICAgICAgICAgICAgICAgICBob3N0RW5kcG9pbnQ6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogSG9zdEVuZHBvaW50IGNvbnRyb2xzIHN5bmNpbmcgbm9kZXMgdG8gaG9zdAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmRwb2ludHMuIERpc2FibGVkIGJ5IGRlZmF1bHQsIHNldCB0byBuaWwgdG8gZGlzYWJsZS4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF1dG9DcmVhdGU6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICdBdXRvQ3JlYXRlIGVuYWJsZXMgYXV0b21hdGljIGNyZWF0aW9uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZiBob3N0IGVuZHBvaW50cyBmb3IgZXZlcnkgbm9kZS4gW0RlZmF1bHQ6IERpc2FibGVkXScKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IG9iamVjdAogICAgICAgICAgICAgICAgICAgICAgICAgIHJlY29uY2lsZXJQZXJpb2Q6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogJ1JlY29uY2lsZXJQZXJpb2QgaXMgdGhlIHBlcmlvZCB0byBwZXJmb3JtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlY29uY2lsaWF0aW9uIHdpdGggdGhlIENhbGljbyBkYXRhc3RvcmUuIFtEZWZhdWx0OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA1bV0nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICAgICAgICAgICAgICBzeW5jTGFiZWxzOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICdTeW5jTGFiZWxzIGNvbnRyb2xzIHdoZXRoZXIgdG8gY29weSBLdWJlcm5ldGVzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUgbGFiZWxzIHRvIENhbGljbyBub2Rlcy4gW0RlZmF1bHQ6IEVuYWJsZWRdJwogICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IG9iamVjdAogICAgICAgICAgICAgICAgICAgICAgcG9saWN5OgogICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogUG9saWN5IGVuYWJsZXMgYW5kIGNvbmZpZ3VyZXMgdGhlIHBvbGljeSBjb250cm9sbGVyLgogICAgICAgICAgICAgICAgICAgICAgICAgIEVuYWJsZWQgYnkgZGVmYXVsdCwgc2V0IHRvIG5pbCB0byBkaXNhYmxlLgogICAgICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzOgogICAgICAgICAgICAgICAgICAgICAgICAgIHJlY29uY2lsZXJQZXJpb2Q6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogJ1JlY29uY2lsZXJQZXJpb2QgaXMgdGhlIHBlcmlvZCB0byBwZXJmb3JtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlY29uY2lsaWF0aW9uIHdpdGggdGhlIENhbGljbyBkYXRhc3RvcmUuIFtEZWZhdWx0OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA1bV0nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogb2JqZWN0CiAgICAgICAgICAgICAgICAgICAgICBzZXJ2aWNlQWNjb3VudDoKICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IFNlcnZpY2VBY2NvdW50IGVuYWJsZXMgYW5kIGNvbmZpZ3VyZXMgdGhlIHNlcnZpY2UKICAgICAgICAgICAgICAgICAgICAgICAgICBhY2NvdW50IGNvbnRyb2xsZXIuIEVuYWJsZWQgYnkgZGVmYXVsdCwgc2V0IHRvIG5pbCB0byBkaXNhYmxlLgogICAgICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzOgogICAgICAgICAgICAgICAgICAgICAgICAgIHJlY29uY2lsZXJQZXJpb2Q6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogJ1JlY29uY2lsZXJQZXJpb2QgaXMgdGhlIHBlcmlvZCB0byBwZXJmb3JtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlY29uY2lsaWF0aW9uIHdpdGggdGhlIENhbGljbyBkYXRhc3RvcmUuIFtEZWZhdWx0OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA1bV0nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogb2JqZWN0CiAgICAgICAgICAgICAgICAgICAgICB3b3JrbG9hZEVuZHBvaW50OgogICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogV29ya2xvYWRFbmRwb2ludCBlbmFibGVzIGFuZCBjb25maWd1cmVzIHRoZSB3b3JrbG9hZAogICAgICAgICAgICAgICAgICAgICAgICAgIGVuZHBvaW50IGNvbnRyb2xsZXIuIEVuYWJsZWQgYnkgZGVmYXVsdCwgc2V0IHRvIG5pbCB0byBkaXNhYmxlLgogICAgICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzOgogICAgICAgICAgICAgICAgICAgICAgICAgIHJlY29uY2lsZXJQZXJpb2Q6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogJ1JlY29uY2lsZXJQZXJpb2QgaXMgdGhlIHBlcmlvZCB0byBwZXJmb3JtCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlY29uY2lsaWF0aW9uIHdpdGggdGhlIENhbGljbyBkYXRhc3RvcmUuIFtEZWZhdWx0OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA1bV0nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogb2JqZWN0CiAgICAgICAgICAgICAgICAgICAgdHlwZTogb2JqZWN0CiAgICAgICAgICAgICAgICAgIGV0Y2RWM0NvbXBhY3Rpb25QZXJpb2Q6CiAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICdFdGNkVjNDb21wYWN0aW9uUGVyaW9kIGlzIHRoZSBwZXJpb2QgYmV0d2VlbiBldGNkdjMKICAgICAgICAgICAgICAgICAgICAgIGNvbXBhY3Rpb24gcmVxdWVzdHMuIFNldCB0byAwIHRvIGRpc2FibGUuIFtEZWZhdWx0OiAxMG1dJwogICAgICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgICAgICBoZWFsdGhDaGVja3M6CiAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICdIZWFsdGhDaGVja3MgZW5hYmxlcyBvciBkaXNhYmxlcyBzdXBwb3J0IGZvciBoZWFsdGgKICAgICAgICAgICAgICAgICAgICAgIGNoZWNrcyBbRGVmYXVsdDogRW5hYmxlZF0nCiAgICAgICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgICAgIGxvZ1NldmVyaXR5U2NyZWVuOgogICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAnTG9nU2V2ZXJpdHlTY3JlZW4gaXMgdGhlIGxvZyBzZXZlcml0eSBhYm92ZSB3aGljaAogICAgICAgICAgICAgICAgICAgICAgbG9ncyBhcmUgc2VudCB0byB0aGUgc3Rkb3V0LiBbRGVmYXVsdDogSW5mb10nCiAgICAgICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgICByZXF1aXJlZDoKICAgICAgICAgICAgICAgIC0gY29udHJvbGxlcnMKICAgICAgICAgICAgICAgIHR5cGU6IG9iamVjdAogICAgICAgICAgICB0eXBlOiBvYmplY3QKICAgICAgICB0eXBlOiBvYmplY3QKICAgIHNlcnZlZDogdHJ1ZQogICAgc3RvcmFnZTogdHJ1ZQpzdGF0dXM6CiAgYWNjZXB0ZWROYW1lczoKICAgIGtpbmQ6ICIiCiAgICBwbHVyYWw6ICIiCiAgY29uZGl0aW9uczogW10KICBzdG9yZWRWZXJzaW9uczogW10KCi0tLQoKLS0tCmFwaVZlcnNpb246IGFwaWV4dGVuc2lvbnMuazhzLmlvL3YxCmtpbmQ6IEN1c3RvbVJlc291cmNlRGVmaW5pdGlvbgptZXRhZGF0YToKICBuYW1lOiBuZXR3b3JrcG9saWNpZXMuY3JkLnByb2plY3RjYWxpY28ub3JnCnNwZWM6CiAgZ3JvdXA6IGNyZC5wcm9qZWN0Y2FsaWNvLm9yZwogIG5hbWVzOgogICAga2luZDogTmV0d29ya1BvbGljeQogICAgbGlzdEtpbmQ6IE5ldHdvcmtQb2xpY3lMaXN0CiAgICBwbHVyYWw6IG5ldHdvcmtwb2xpY2llcwogICAgc2luZ3VsYXI6IG5ldHdvcmtwb2xpY3kKICBzY29wZTogTmFtZXNwYWNlZAogIHZlcnNpb25zOgogIC0gbmFtZTogdjEKICAgIHNjaGVtYToKICAgICAgb3BlbkFQSVYzU2NoZW1hOgogICAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgICBhcGlWZXJzaW9uOgogICAgICAgICAgICBkZXNjcmlwdGlvbjogJ0FQSVZlcnNpb24gZGVmaW5lcyB0aGUgdmVyc2lvbmVkIHNjaGVtYSBvZiB0aGlzIHJlcHJlc2VudGF0aW9uCiAgICAgICAgICAgICAgb2YgYW4gb2JqZWN0LiBTZXJ2ZXJzIHNob3VsZCBjb252ZXJ0IHJlY29nbml6ZWQgc2NoZW1hcyB0byB0aGUgbGF0ZXN0CiAgICAgICAgICAgICAgaW50ZXJuYWwgdmFsdWUsIGFuZCBtYXkgcmVqZWN0IHVucmVjb2duaXplZCB2YWx1ZXMuIE1vcmUgaW5mbzogaHR0cHM6Ly9naXQuazhzLmlvL2NvbW11bml0eS9jb250cmlidXRvcnMvZGV2ZWwvc2lnLWFyY2hpdGVjdHVyZS9hcGktY29udmVudGlvbnMubWQjcmVzb3VyY2VzJwogICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgIGtpbmQ6CiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAnS2luZCBpcyBhIHN0cmluZyB2YWx1ZSByZXByZXNlbnRpbmcgdGhlIFJFU1QgcmVzb3VyY2UgdGhpcwogICAgICAgICAgICAgIG9iamVjdCByZXByZXNlbnRzLiBTZXJ2ZXJzIG1heSBpbmZlciB0aGlzIGZyb20gdGhlIGVuZHBvaW50IHRoZSBjbGllbnQKICAgICAgICAgICAgICBzdWJtaXRzIHJlcXVlc3RzIHRvLiBDYW5ub3QgYmUgdXBkYXRlZC4gSW4gQ2FtZWxDYXNlLiBNb3JlIGluZm86IGh0dHBzOi8vZ2l0Lms4cy5pby9jb21tdW5pdHkvY29udHJpYnV0b3JzL2RldmVsL3NpZy1hcmNoaXRlY3R1cmUvYXBpLWNvbnZlbnRpb25zLm1kI3R5cGVzLWtpbmRzJwogICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgIG1ldGFkYXRhOgogICAgICAgICAgICB0eXBlOiBvYmplY3QKICAgICAgICAgIHNwZWM6CiAgICAgICAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgICAgICAgZWdyZXNzOgogICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IFRoZSBvcmRlcmVkIHNldCBvZiBlZ3Jlc3MgcnVsZXMuICBFYWNoIHJ1bGUgY29udGFpbnMKICAgICAgICAgICAgICAgICAgYSBzZXQgb2YgcGFja2V0IG1hdGNoIGNyaXRlcmlhIGFuZCBhIGNvcnJlc3BvbmRpbmcgYWN0aW9uIHRvIGFwcGx5LgogICAgICAgICAgICAgICAgaXRlbXM6CiAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAiQSBSdWxlIGVuY2Fwc3VsYXRlcyBhIHNldCBvZiBtYXRjaCBjcml0ZXJpYSBhbmQgYW4KICAgICAgICAgICAgICAgICAgICBhY3Rpb24uICBCb3RoIHNlbGVjdG9yLWJhc2VkIHNlY3VyaXR5IFBvbGljeSBhbmQgc2VjdXJpdHkgUHJvZmlsZXMKICAgICAgICAgICAgICAgICAgICByZWZlcmVuY2UgcnVsZXMgLSBzZXBhcmF0ZWQgb3V0IGFzIGEgbGlzdCBvZiBydWxlcyBmb3IgYm90aCBpbmdyZXNzCiAgICAgICAgICAgICAgICAgICAgYW5kIGVncmVzcyBwYWNrZXQgbWF0Y2hpbmcuIFxuIEVhY2ggcG9zaXRpdmUgbWF0Y2ggY3JpdGVyaWEgaGFzCiAgICAgICAgICAgICAgICAgICAgYSBuZWdhdGVkIHZlcnNpb24sIHByZWZpeGVkIHdpdGgg4oCdTm904oCdLiBBbGwgdGhlIG1hdGNoIGNyaXRlcmlhCiAgICAgICAgICAgICAgICAgICAgd2l0aGluIGEgcnVsZSBtdXN0IGJlIHNhdGlzZmllZCBmb3IgYSBwYWNrZXQgdG8gbWF0Y2guIEEgc2luZ2xlCiAgICAgICAgICAgICAgICAgICAgcnVsZSBjYW4gY29udGFpbiB0aGUgcG9zaXRpdmUgYW5kIG5lZ2F0aXZlIHZlcnNpb24gb2YgYSBtYXRjaAogICAgICAgICAgICAgICAgICAgIGFuZCBib3RoIG11c3QgYmUgc2F0aXNmaWVkIGZvciB0aGUgcnVsZSB0byBtYXRjaC4iCiAgICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgICAgICAgICAgICAgYWN0aW9uOgogICAgICAgICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgICAgICAgZGVzdGluYXRpb246CiAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogRGVzdGluYXRpb24gY29udGFpbnMgdGhlIG1hdGNoIGNyaXRlcmlhIHRoYXQgYXBwbHkKICAgICAgICAgICAgICAgICAgICAgICAgdG8gZGVzdGluYXRpb24gZW50aXR5LgogICAgICAgICAgICAgICAgICAgICAgcHJvcGVydGllczoKICAgICAgICAgICAgICAgICAgICAgICAgbmFtZXNwYWNlU2VsZWN0b3I6CiAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICJOYW1lc3BhY2VTZWxlY3RvciBpcyBhbiBvcHRpb25hbCBmaWVsZCB0aGF0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250YWlucyBhIHNlbGVjdG9yIGV4cHJlc3Npb24uIE9ubHkgdHJhZmZpYyB0aGF0IG9yaWdpbmF0ZXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyb20gKG9yIHRlcm1pbmF0ZXMgYXQpIGVuZHBvaW50cyB3aXRoaW4gdGhlIHNlbGVjdGVkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lc3BhY2VzIHdpbGwgYmUgbWF0Y2hlZC4gV2hlbiBib3RoIE5hbWVzcGFjZVNlbGVjdG9yCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmQgU2VsZWN0b3IgYXJlIGRlZmluZWQgb24gdGhlIHNhbWUgcnVsZSwgdGhlbiBvbmx5IHdvcmtsb2FkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmRwb2ludHMgdGhhdCBhcmUgbWF0Y2hlZCBieSBib3RoIHNlbGVjdG9ycyB3aWxsIGJlIHNlbGVjdGVkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBieSB0aGUgcnVsZS4gXG4gRm9yIE5ldHdvcmtQb2xpY3ksIGFuIGVtcHR5IE5hbWVzcGFjZVNlbGVjdG9yCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbXBsaWVzIHRoYXQgdGhlIFNlbGVjdG9yIGlzIGxpbWl0ZWQgdG8gc2VsZWN0aW5nIG9ubHkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdvcmtsb2FkIGVuZHBvaW50cyBpbiB0aGUgc2FtZSBuYW1lc3BhY2UgYXMgdGhlIE5ldHdvcmtQb2xpY3kuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiBGb3IgTmV0d29ya1BvbGljeSwgYGdsb2JhbCgpYCBOYW1lc3BhY2VTZWxlY3RvciBpbXBsaWVzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGF0IHRoZSBTZWxlY3RvciBpcyBsaW1pdGVkIHRvIHNlbGVjdGluZyBvbmx5IEdsb2JhbE5ldHdvcmtTZXQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9yIEhvc3RFbmRwb2ludC4gXG4gRm9yIEdsb2JhbE5ldHdvcmtQb2xpY3ksIGFuIGVtcHR5CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBOYW1lc3BhY2VTZWxlY3RvciBpbXBsaWVzIHRoZSBTZWxlY3RvciBhcHBsaWVzIHRvIHdvcmtsb2FkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmRwb2ludHMgYWNyb3NzIGFsbCBuYW1lc3BhY2VzLiIKICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICAgICAgICAgICAgbmV0czoKICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogTmV0cyBpcyBhbiBvcHRpb25hbCBmaWVsZCB0aGF0IHJlc3RyaWN0cyB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJ1bGUgdG8gb25seSBhcHBseSB0byB0cmFmZmljIHRoYXQgb3JpZ2luYXRlcyBmcm9tIChvcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVybWluYXRlcyBhdCkgSVAgYWRkcmVzc2VzIGluIGFueSBvZiB0aGUgZ2l2ZW4gc3VibmV0cy4KICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtczoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IGFycmF5CiAgICAgICAgICAgICAgICAgICAgICAgIG5vdE5ldHM6CiAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IE5vdE5ldHMgaXMgdGhlIG5lZ2F0ZWQgdmVyc2lvbiBvZiB0aGUgTmV0cwogICAgICAgICAgICAgICAgICAgICAgICAgICAgZmllbGQuCiAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXM6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBhcnJheQogICAgICAgICAgICAgICAgICAgICAgICBub3RQb3J0czoKICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogTm90UG9ydHMgaXMgdGhlIG5lZ2F0ZWQgdmVyc2lvbiBvZiB0aGUgUG9ydHMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpZWxkLiBTaW5jZSBvbmx5IHNvbWUgcHJvdG9jb2xzIGhhdmUgcG9ydHMsIGlmIGFueSBwb3J0cwogICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJlIHNwZWNpZmllZCBpdCByZXF1aXJlcyB0aGUgUHJvdG9jb2wgbWF0Y2ggaW4gdGhlIFJ1bGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIGJlIHNldCB0byAiVENQIiBvciAiVURQIi4KICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtczoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFueU9mOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgLSB0eXBlOiBpbnRlZ2VyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF0dGVybjogXi4qCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4LWt1YmVybmV0ZXMtaW50LW9yLXN0cmluZzogdHJ1ZQogICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IGFycmF5CiAgICAgICAgICAgICAgICAgICAgICAgIG5vdFNlbGVjdG9yOgogICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBOb3RTZWxlY3RvciBpcyB0aGUgbmVnYXRlZCB2ZXJzaW9uIG9mIHRoZSBTZWxlY3RvcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgZmllbGQuICBTZWUgU2VsZWN0b3IgZmllbGQgZm9yIHN1YnRsZXRpZXMgd2l0aCBuZWdhdGVkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RvcnMuCiAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgICAgICAgICAgIHBvcnRzOgogICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAiUG9ydHMgaXMgYW4gb3B0aW9uYWwgZmllbGQgdGhhdCByZXN0cmljdHMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBydWxlIHRvIG9ubHkgYXBwbHkgdG8gdHJhZmZpYyB0aGF0IGhhcyBhIHNvdXJjZSAoZGVzdGluYXRpb24pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3J0IHRoYXQgbWF0Y2hlcyBvbmUgb2YgdGhlc2UgcmFuZ2VzL3ZhbHVlcy4gVGhpcyB2YWx1ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgaXMgYSBsaXN0IG9mIGludGVnZXJzIG9yIHN0cmluZ3MgdGhhdCByZXByZXNlbnQgcmFuZ2VzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZiBwb3J0cy4gXG4gU2luY2Ugb25seSBzb21lIHByb3RvY29scyBoYXZlIHBvcnRzLCBpZgogICAgICAgICAgICAgICAgICAgICAgICAgICAgYW55IHBvcnRzIGFyZSBzcGVjaWZpZWQgaXQgcmVxdWlyZXMgdGhlIFByb3RvY29sIG1hdGNoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbiB0aGUgUnVsZSB0byBiZSBzZXQgdG8gXCJUQ1BcIiBvciBcIlVEUFwiLiIKICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtczoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFueU9mOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgLSB0eXBlOiBpbnRlZ2VyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF0dGVybjogXi4qCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB4LWt1YmVybmV0ZXMtaW50LW9yLXN0cmluZzogdHJ1ZQogICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IGFycmF5CiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yOgogICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAiU2VsZWN0b3IgaXMgYW4gb3B0aW9uYWwgZmllbGQgdGhhdCBjb250YWlucwogICAgICAgICAgICAgICAgICAgICAgICAgICAgYSBzZWxlY3RvciBleHByZXNzaW9uIChzZWUgUG9saWN5IGZvciBzYW1wbGUgc3ludGF4KS4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwgT25seSB0cmFmZmljIHRoYXQgb3JpZ2luYXRlcyBmcm9tICh0ZXJtaW5hdGVzIGF0KSBlbmRwb2ludHMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoaW5nIHRoZSBzZWxlY3RvciB3aWxsIGJlIG1hdGNoZWQuIFxuIE5vdGUgdGhhdDogaW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZGl0aW9uIHRvIHRoZSBuZWdhdGVkIHZlcnNpb24gb2YgdGhlIFNlbGVjdG9yIChzZWUgTm90U2VsZWN0b3IKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJlbG93KSwgdGhlIHNlbGVjdG9yIGV4cHJlc3Npb24gc3ludGF4IGl0c2VsZiBzdXBwb3J0cwogICAgICAgICAgICAgICAgICAgICAgICAgICAgbmVnYXRpb24uICBUaGUgdHdvIHR5cGVzIG9mIG5lZ2F0aW9uIGFyZSBzdWJ0bHkgZGlmZmVyZW50LgogICAgICAgICAgICAgICAgICAgICAgICAgICAgT25lIG5lZ2F0ZXMgdGhlIHNldCBvZiBtYXRjaGVkIGVuZHBvaW50cywgdGhlIG90aGVyIG5lZ2F0ZXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZSB3aG9sZSBtYXRjaDogXG4gXHRTZWxlY3RvciA9IFwiIWhhcyhteV9sYWJlbClcIiBtYXRjaGVzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWNrZXRzIHRoYXQgYXJlIGZyb20gb3RoZXIgQ2FsaWNvLWNvbnRyb2xsZWQgXHRlbmRwb2ludHMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQgZG8gbm90IGhhdmUgdGhlIGxhYmVsIOKAnG15X2xhYmVs4oCdLiBcbiBcdE5vdFNlbGVjdG9yCiAgICAgICAgICAgICAgICAgICAgICAgICAgICA9IFwiaGFzKG15X2xhYmVsKVwiIG1hdGNoZXMgcGFja2V0cyB0aGF0IGFyZSBub3QgZnJvbQogICAgICAgICAgICAgICAgICAgICAgICAgICAgQ2FsaWNvLWNvbnRyb2xsZWQgXHRlbmRwb2ludHMgdGhhdCBkbyBoYXZlIHRoZSBsYWJlbCDigJxteV9sYWJlbOKAnS4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuIFRoZSBlZmZlY3QgaXMgdGhhdCB0aGUgbGF0dGVyIHdpbGwgYWNjZXB0IHBhY2tldHMgZnJvbQogICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9uLUNhbGljbyBzb3VyY2VzIHdoZXJlYXMgdGhlIGZvcm1lciBpcyBsaW1pdGVkIHRvIHBhY2tldHMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyb20gQ2FsaWNvLWNvbnRyb2xsZWQgZW5kcG9pbnRzLiIKICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICAgICAgICAgICAgc2VydmljZUFjY291bnRzOgogICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBTZXJ2aWNlQWNjb3VudHMgaXMgYW4gb3B0aW9uYWwgZmllbGQgdGhhdCByZXN0cmljdHMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBydWxlIHRvIG9ubHkgYXBwbHkgdG8gdHJhZmZpYyB0aGF0IG9yaWdpbmF0ZXMgZnJvbQogICAgICAgICAgICAgICAgICAgICAgICAgICAgKG9yIHRlcm1pbmF0ZXMgYXQpIGEgcG9kIHJ1bm5pbmcgYXMgYSBtYXRjaGluZyBzZXJ2aWNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY2NvdW50LgogICAgICAgICAgICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lczoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IE5hbWVzIGlzIGFuIG9wdGlvbmFsIGZpZWxkIHRoYXQgcmVzdHJpY3RzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlIHJ1bGUgdG8gb25seSBhcHBseSB0byB0cmFmZmljIHRoYXQgb3JpZ2luYXRlcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyb20gKG9yIHRlcm1pbmF0ZXMgYXQpIGEgcG9kIHJ1bm5pbmcgYXMgYSBzZXJ2aWNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWNjb3VudCB3aG9zZSBuYW1lIGlzIGluIHRoZSBsaXN0LgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtczoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogYXJyYXkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogU2VsZWN0b3IgaXMgYW4gb3B0aW9uYWwgZmllbGQgdGhhdCByZXN0cmljdHMKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGUgcnVsZSB0byBvbmx5IGFwcGx5IHRvIHRyYWZmaWMgdGhhdCBvcmlnaW5hdGVzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJvbSAob3IgdGVybWluYXRlcyBhdCkgYSBwb2QgcnVubmluZyBhcyBhIHNlcnZpY2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY2NvdW50IHRoYXQgbWF0Y2hlcyB0aGUgZ2l2ZW4gbGFiZWwgc2VsZWN0b3IuIElmCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYm90aCBOYW1lcyBhbmQgU2VsZWN0b3IgYXJlIHNwZWNpZmllZCB0aGVuIHRoZXkgYXJlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQU5EJ2VkLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBvYmplY3QKICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IG9iamVjdAogICAgICAgICAgICAgICAgICAgIGh0dHA6CiAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogSFRUUCBjb250YWlucyBtYXRjaCBjcml0ZXJpYSB0aGF0IGFwcGx5IHRvIEhUVFAKICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdHMuCiAgICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzOgogICAgICAgICAgICAgICAgICAgICAgICBtZXRob2RzOgogICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBNZXRob2RzIGlzIGFuIG9wdGlvbmFsIGZpZWxkIHRoYXQgcmVzdHJpY3RzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGUgcnVsZSB0byBhcHBseSBvbmx5IHRvIEhUVFAgcmVxdWVzdHMgdGhhdCB1c2Ugb25lIG9mCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGUgbGlzdGVkIEhUVFAgTWV0aG9kcyAoZS5nLiBHRVQsIFBVVCwgZXRjLikgTXVsdGlwbGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1ldGhvZHMgYXJlIE9SJ2QgdG9nZXRoZXIuCiAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXM6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBhcnJheQogICAgICAgICAgICAgICAgICAgICAgICBwYXRoczoKICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogJ1BhdGhzIGlzIGFuIG9wdGlvbmFsIGZpZWxkIHRoYXQgcmVzdHJpY3RzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGUgcnVsZSB0byBhcHBseSB0byBIVFRQIHJlcXVlc3RzIHRoYXQgdXNlIG9uZSBvZiB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpc3RlZCBIVFRQIFBhdGhzLiBNdWx0aXBsZSBwYXRocyBhcmUgT1InJ2QgdG9nZXRoZXIuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLmc6IC0gZXhhY3Q6IC9mb28gLSBwcmVmaXg6IC9iYXIgTk9URTogRWFjaCBlbnRyeSBtYXkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9OTFkgc3BlY2lmeSBlaXRoZXIgYSBgZXhhY3RgIG9yIGEgYHByZWZpeGAgbWF0Y2guIFRoZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdG9yIHdpbGwgY2hlY2sgZm9yIGl0LicKICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtczoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAnSFRUUFBhdGggc3BlY2lmaWVzIGFuIEhUVFAgcGF0aCB0byBtYXRjaC4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSXQgbWF5IGJlIGVpdGhlciBvZiB0aGUgZm9ybTogZXhhY3Q6IDxwYXRoPjogd2hpY2ggbWF0Y2hlcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGUgcGF0aCBleGFjdGx5IG9yIHByZWZpeDogPHBhdGgtcHJlZml4Pjogd2hpY2ggbWF0Y2hlcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGUgcGF0aCBwcmVmaXgnCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleGFjdDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJlZml4OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogb2JqZWN0CiAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogYXJyYXkKICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IG9iamVjdAogICAgICAgICAgICAgICAgICAgIGljbXA6CiAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogSUNNUCBpcyBhbiBvcHRpb25hbCBmaWVsZCB0aGF0IHJlc3RyaWN0cyB0aGUgcnVsZQogICAgICAgICAgICAgICAgICAgICAgICB0byBhcHBseSB0byBhIHNwZWNpZmljIHR5cGUgYW5kIGNvZGUgb2YgSUNNUCB0cmFmZmljLiAgVGhpcwogICAgICAgICAgICAgICAgICAgICAgICBzaG91bGQgb25seSBiZSBzcGVjaWZpZWQgaWYgdGhlIFByb3RvY29sIGZpZWxkIGlzIHNldCB0byAiSUNNUCIKICAgICAgICAgICAgICAgICAgICAgICAgb3IgIklDTVB2NiIuCiAgICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzOgogICAgICAgICAgICAgICAgICAgICAgICBjb2RlOgogICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBNYXRjaCBvbiBhIHNwZWNpZmljIElDTVAgY29kZS4gIElmIHNwZWNpZmllZCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBUeXBlIHZhbHVlIG11c3QgYWxzbyBiZSBzcGVjaWZpZWQuIFRoaXMgaXMgYSB0ZWNobmljYWwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbWl0YXRpb24gaW1wb3NlZCBieSB0aGUga2VybmVs4oCZcyBpcHRhYmxlcyBmaXJld2FsbCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWNoIENhbGljbyB1c2VzIHRvIGVuZm9yY2UgdGhlIHJ1bGUuCiAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogaW50ZWdlcgogICAgICAgICAgICAgICAgICAgICAgICB0eXBlOgogICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBNYXRjaCBvbiBhIHNwZWNpZmljIElDTVAgdHlwZS4gIEZvciBleGFtcGxlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhIHZhbHVlIG9mIDggcmVmZXJzIHRvIElDTVAgRWNobyBSZXF1ZXN0IChpLmUuIHBpbmdzKS4KICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBpbnRlZ2VyCiAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBvYmplY3QKICAgICAgICAgICAgICAgICAgICBpcFZlcnNpb246CiAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogSVBWZXJzaW9uIGlzIGFuIG9wdGlvbmFsIGZpZWxkIHRoYXQgcmVzdHJpY3RzIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBydWxlIHRvIG9ubHkgbWF0Y2ggYSBzcGVjaWZpYyBJUCB2ZXJzaW9uLgogICAgICAgICAgICAgICAgICAgICAgdHlwZTogaW50ZWdlcgogICAgICAgICAgICAgICAgICAgIG1ldGFkYXRhOgogICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IE1ldGFkYXRhIGNvbnRhaW5zIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gZm9yIHRoaXMKICAgICAgICAgICAgICAgICAgICAgICAgcnVsZQogICAgICAgICAgICAgICAgICAgICAgcHJvcGVydGllczoKICAgICAgICAgICAgICAgICAgICAgICAgYW5ub3RhdGlvbnM6CiAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkaXRpb25hbFByb3BlcnRpZXM6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogQW5ub3RhdGlvbnMgaXMgYSBzZXQgb2Yga2V5IHZhbHVlIHBhaXJzIHRoYXQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdpdmUgZXh0cmEgaW5mb3JtYXRpb24gYWJvdXQgdGhlIHJ1bGUKICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBvYmplY3QKICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IG9iamVjdAogICAgICAgICAgICAgICAgICAgIG5vdElDTVA6CiAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogTm90SUNNUCBpcyB0aGUgbmVnYXRlZCB2ZXJzaW9uIG9mIHRoZSBJQ01QIGZpZWxkLgogICAgICAgICAgICAgICAgICAgICAgcHJvcGVydGllczoKICAgICAgICAgICAgICAgICAgICAgICAgY29kZToKICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogTWF0Y2ggb24gYSBzcGVjaWZpYyBJQ01QIGNvZGUuICBJZiBzcGVjaWZpZWQsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGUgVHlwZSB2YWx1ZSBtdXN0IGFsc28gYmUgc3BlY2lmaWVkLiBUaGlzIGlzIGEgdGVjaG5pY2FsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW1pdGF0aW9uIGltcG9zZWQgYnkgdGhlIGtlcm5lbOKAmXMgaXB0YWJsZXMgZmlyZXdhbGwsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGljaCBDYWxpY28gdXNlcyB0byBlbmZvcmNlIHRoZSBydWxlLgogICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IGludGVnZXIKICAgICAgICAgICAgICAgICAgICAgICAgdHlwZToKICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogTWF0Y2ggb24gYSBzcGVjaWZpYyBJQ01QIHR5cGUuICBGb3IgZXhhbXBsZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgYSB2YWx1ZSBvZiA4IHJlZmVycyB0byBJQ01QIEVjaG8gUmVxdWVzdCAoaS5lLiBwaW5ncykuCiAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogaW50ZWdlcgogICAgICAgICAgICAgICAgICAgICAgdHlwZTogb2JqZWN0CiAgICAgICAgICAgICAgICAgICAgbm90UHJvdG9jb2w6CiAgICAgICAgICAgICAgICAgICAgICBhbnlPZjoKICAgICAgICAgICAgICAgICAgICAgIC0gdHlwZTogaW50ZWdlcgogICAgICAgICAgICAgICAgICAgICAgLSB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBOb3RQcm90b2NvbCBpcyB0aGUgbmVnYXRlZCB2ZXJzaW9uIG9mIHRoZSBQcm90b2NvbAogICAgICAgICAgICAgICAgICAgICAgICBmaWVsZC4KICAgICAgICAgICAgICAgICAgICAgIHBhdHRlcm46IF4uKgogICAgICAgICAgICAgICAgICAgICAgeC1rdWJlcm5ldGVzLWludC1vci1zdHJpbmc6IHRydWUKICAgICAgICAgICAgICAgICAgICBwcm90b2NvbDoKICAgICAgICAgICAgICAgICAgICAgIGFueU9mOgogICAgICAgICAgICAgICAgICAgICAgLSB0eXBlOiBpbnRlZ2VyCiAgICAgICAgICAgICAgICAgICAgICAtIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICJQcm90b2NvbCBpcyBhbiBvcHRpb25hbCBmaWVsZCB0aGF0IHJlc3RyaWN0cyB0aGUKICAgICAgICAgICAgICAgICAgICAgICAgcnVsZSB0byBvbmx5IGFwcGx5IHRvIHRyYWZmaWMgb2YgYSBzcGVjaWZpYyBJUCBwcm90b2NvbC4gUmVxdWlyZWQKICAgICAgICAgICAgICAgICAgICAgICAgaWYgYW55IG9mIHRoZSBFbnRpdHlSdWxlcyBjb250YWluIFBvcnRzIChiZWNhdXNlIHBvcnRzIG9ubHkKICAgICAgICAgICAgICAgICAgICAgICAgYXBwbHkgdG8gY2VydGFpbiBwcm90b2NvbHMpLiBcbiBNdXN0IGJlIG9uZSBvZiB0aGVzZSBzdHJpbmcKICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVzOiBcIlRDUFwiLCBcIlVEUFwiLCBcIklDTVBcIiwgXCJJQ01QdjZcIiwgXCJTQ1RQXCIsCiAgICAgICAgICAgICAgICAgICAgICAgIFwiVURQTGl0ZVwiIG9yIGFuIGludGVnZXIgaW4gdGhlIHJhbmdlIDEtMjU1LiIKICAgICAgICAgICAgICAgICAgICAgIHBhdHRlcm46IF4uKgogICAgICAgICAgICAgICAgICAgICAgeC1rdWJlcm5ldGVzLWludC1vci1zdHJpbmc6IHRydWUKICAgICAgICAgICAgICAgICAgICBzb3VyY2U6CiAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogU291cmNlIGNvbnRhaW5zIHRoZSBtYXRjaCBjcml0ZXJpYSB0aGF0IGFwcGx5IHRvCiAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZSBlbnRpdHkuCiAgICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzOgogICAgICAgICAgICAgICAgICAgICAgICBuYW1lc3BhY2VTZWxlY3RvcjoKICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogIk5hbWVzcGFjZVNlbGVjdG9yIGlzIGFuIG9wdGlvbmFsIGZpZWxkIHRoYXQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRhaW5zIGEgc2VsZWN0b3IgZXhwcmVzc2lvbi4gT25seSB0cmFmZmljIHRoYXQgb3JpZ2luYXRlcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJvbSAob3IgdGVybWluYXRlcyBhdCkgZW5kcG9pbnRzIHdpdGhpbiB0aGUgc2VsZWN0ZWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWVzcGFjZXMgd2lsbCBiZSBtYXRjaGVkLiBXaGVuIGJvdGggTmFtZXNwYWNlU2VsZWN0b3IKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuZCBTZWxlY3RvciBhcmUgZGVmaW5lZCBvbiB0aGUgc2FtZSBydWxlLCB0aGVuIG9ubHkgd29ya2xvYWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZHBvaW50cyB0aGF0IGFyZSBtYXRjaGVkIGJ5IGJvdGggc2VsZWN0b3JzIHdpbGwgYmUgc2VsZWN0ZWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ5IHRoZSBydWxlLiBcbiBGb3IgTmV0d29ya1BvbGljeSwgYW4gZW1wdHkgTmFtZXNwYWNlU2VsZWN0b3IKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGltcGxpZXMgdGhhdCB0aGUgU2VsZWN0b3IgaXMgbGltaXRlZCB0byBzZWxlY3Rpbmcgb25seQogICAgICAgICAgICAgICAgICAgICAgICAgICAgd29ya2xvYWQgZW5kcG9pbnRzIGluIHRoZSBzYW1lIG5hbWVzcGFjZSBhcyB0aGUgTmV0d29ya1BvbGljeS4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuIEZvciBOZXR3b3JrUG9saWN5LCBgZ2xvYmFsKClgIE5hbWVzcGFjZVNlbGVjdG9yIGltcGxpZXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQgdGhlIFNlbGVjdG9yIGlzIGxpbWl0ZWQgdG8gc2VsZWN0aW5nIG9ubHkgR2xvYmFsTmV0d29ya1NldAogICAgICAgICAgICAgICAgICAgICAgICAgICAgb3IgSG9zdEVuZHBvaW50LiBcbiBGb3IgR2xvYmFsTmV0d29ya1BvbGljeSwgYW4gZW1wdHkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIE5hbWVzcGFjZVNlbGVjdG9yIGltcGxpZXMgdGhlIFNlbGVjdG9yIGFwcGxpZXMgdG8gd29ya2xvYWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZHBvaW50cyBhY3Jvc3MgYWxsIG5hbWVzcGFjZXMuIgogICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgICAgICAgICAgICBuZXRzOgogICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBOZXRzIGlzIGFuIG9wdGlvbmFsIGZpZWxkIHRoYXQgcmVzdHJpY3RzIHRoZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcnVsZSB0byBvbmx5IGFwcGx5IHRvIHRyYWZmaWMgdGhhdCBvcmlnaW5hdGVzIGZyb20gKG9yCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXJtaW5hdGVzIGF0KSBJUCBhZGRyZXNzZXMgaW4gYW55IG9mIHRoZSBnaXZlbiBzdWJuZXRzLgogICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogYXJyYXkKICAgICAgICAgICAgICAgICAgICAgICAgbm90TmV0czoKICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogTm90TmV0cyBpcyB0aGUgbmVnYXRlZCB2ZXJzaW9uIG9mIHRoZSBOZXRzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWVsZC4KICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtczoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IGFycmF5CiAgICAgICAgICAgICAgICAgICAgICAgIG5vdFBvcnRzOgogICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBOb3RQb3J0cyBpcyB0aGUgbmVnYXRlZCB2ZXJzaW9uIG9mIHRoZSBQb3J0cwogICAgICAgICAgICAgICAgICAgICAgICAgICAgZmllbGQuIFNpbmNlIG9ubHkgc29tZSBwcm90b2NvbHMgaGF2ZSBwb3J0cywgaWYgYW55IHBvcnRzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmUgc3BlY2lmaWVkIGl0IHJlcXVpcmVzIHRoZSBQcm90b2NvbCBtYXRjaCBpbiB0aGUgUnVsZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8gYmUgc2V0IHRvICJUQ1AiIG9yICJVRFAiLgogICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgYW55T2Y6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtIHR5cGU6IGludGVnZXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0gdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXR0ZXJuOiBeLioKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHgta3ViZXJuZXRlcy1pbnQtb3Itc3RyaW5nOiB0cnVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogYXJyYXkKICAgICAgICAgICAgICAgICAgICAgICAgbm90U2VsZWN0b3I6CiAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IE5vdFNlbGVjdG9yIGlzIHRoZSBuZWdhdGVkIHZlcnNpb24gb2YgdGhlIFNlbGVjdG9yCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWVsZC4gIFNlZSBTZWxlY3RvciBmaWVsZCBmb3Igc3VidGxldGllcyB3aXRoIG5lZ2F0ZWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdG9ycy4KICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICAgICAgICAgICAgcG9ydHM6CiAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICJQb3J0cyBpcyBhbiBvcHRpb25hbCBmaWVsZCB0aGF0IHJlc3RyaWN0cwogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlIHJ1bGUgdG8gb25seSBhcHBseSB0byB0cmFmZmljIHRoYXQgaGFzIGEgc291cmNlIChkZXN0aW5hdGlvbikKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvcnQgdGhhdCBtYXRjaGVzIG9uZSBvZiB0aGVzZSByYW5nZXMvdmFsdWVzLiBUaGlzIHZhbHVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpcyBhIGxpc3Qgb2YgaW50ZWdlcnMgb3Igc3RyaW5ncyB0aGF0IHJlcHJlc2VudCByYW5nZXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mIHBvcnRzLiBcbiBTaW5jZSBvbmx5IHNvbWUgcHJvdG9jb2xzIGhhdmUgcG9ydHMsIGlmCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbnkgcG9ydHMgYXJlIHNwZWNpZmllZCBpdCByZXF1aXJlcyB0aGUgUHJvdG9jb2wgbWF0Y2gKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluIHRoZSBSdWxlIHRvIGJlIHNldCB0byBcIlRDUFwiIG9yIFwiVURQXCIuIgogICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgYW55T2Y6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtIHR5cGU6IGludGVnZXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0gdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXR0ZXJuOiBeLioKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHgta3ViZXJuZXRlcy1pbnQtb3Itc3RyaW5nOiB0cnVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogYXJyYXkKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0b3I6CiAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICJTZWxlY3RvciBpcyBhbiBvcHRpb25hbCBmaWVsZCB0aGF0IGNvbnRhaW5zCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhIHNlbGVjdG9yIGV4cHJlc3Npb24gKHNlZSBQb2xpY3kgZm9yIHNhbXBsZSBzeW50YXgpLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgXCBPbmx5IHRyYWZmaWMgdGhhdCBvcmlnaW5hdGVzIGZyb20gKHRlcm1pbmF0ZXMgYXQpIGVuZHBvaW50cwogICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hpbmcgdGhlIHNlbGVjdG9yIHdpbGwgYmUgbWF0Y2hlZC4gXG4gTm90ZSB0aGF0OiBpbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkaXRpb24gdG8gdGhlIG5lZ2F0ZWQgdmVyc2lvbiBvZiB0aGUgU2VsZWN0b3IgKHNlZSBOb3RTZWxlY3RvcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgYmVsb3cpLCB0aGUgc2VsZWN0b3IgZXhwcmVzc2lvbiBzeW50YXggaXRzZWxmIHN1cHBvcnRzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZWdhdGlvbi4gIFRoZSB0d28gdHlwZXMgb2YgbmVnYXRpb24gYXJlIHN1YnRseSBkaWZmZXJlbnQuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBPbmUgbmVnYXRlcyB0aGUgc2V0IG9mIG1hdGNoZWQgZW5kcG9pbnRzLCB0aGUgb3RoZXIgbmVnYXRlcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlIHdob2xlIG1hdGNoOiBcbiBcdFNlbGVjdG9yID0gXCIhaGFzKG15X2xhYmVsKVwiIG1hdGNoZXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhY2tldHMgdGhhdCBhcmUgZnJvbSBvdGhlciBDYWxpY28tY29udHJvbGxlZCBcdGVuZHBvaW50cwogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhhdCBkbyBub3QgaGF2ZSB0aGUgbGFiZWwg4oCcbXlfbGFiZWzigJ0uIFxuIFx0Tm90U2VsZWN0b3IKICAgICAgICAgICAgICAgICAgICAgICAgICAgID0gXCJoYXMobXlfbGFiZWwpXCIgbWF0Y2hlcyBwYWNrZXRzIHRoYXQgYXJlIG5vdCBmcm9tCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBDYWxpY28tY29udHJvbGxlZCBcdGVuZHBvaW50cyB0aGF0IGRvIGhhdmUgdGhlIGxhYmVsIOKAnG15X2xhYmVs4oCdLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gVGhlIGVmZmVjdCBpcyB0aGF0IHRoZSBsYXR0ZXIgd2lsbCBhY2NlcHQgcGFja2V0cyBmcm9tCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBub24tQ2FsaWNvIHNvdXJjZXMgd2hlcmVhcyB0aGUgZm9ybWVyIGlzIGxpbWl0ZWQgdG8gcGFja2V0cwogICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJvbSBDYWxpY28tY29udHJvbGxlZCBlbmRwb2ludHMuIgogICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgICAgICAgICAgICBzZXJ2aWNlQWNjb3VudHM6CiAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IFNlcnZpY2VBY2NvdW50cyBpcyBhbiBvcHRpb25hbCBmaWVsZCB0aGF0IHJlc3RyaWN0cwogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlIHJ1bGUgdG8gb25seSBhcHBseSB0byB0cmFmZmljIHRoYXQgb3JpZ2luYXRlcyBmcm9tCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAob3IgdGVybWluYXRlcyBhdCkgYSBwb2QgcnVubmluZyBhcyBhIG1hdGNoaW5nIHNlcnZpY2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjY291bnQuCiAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvcGVydGllczoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWVzOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogTmFtZXMgaXMgYW4gb3B0aW9uYWwgZmllbGQgdGhhdCByZXN0cmljdHMKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGUgcnVsZSB0byBvbmx5IGFwcGx5IHRvIHRyYWZmaWMgdGhhdCBvcmlnaW5hdGVzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJvbSAob3IgdGVybWluYXRlcyBhdCkgYSBwb2QgcnVubmluZyBhcyBhIHNlcnZpY2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY2NvdW50IHdob3NlIG5hbWUgaXMgaW4gdGhlIGxpc3QuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBhcnJheQogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0b3I6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBTZWxlY3RvciBpcyBhbiBvcHRpb25hbCBmaWVsZCB0aGF0IHJlc3RyaWN0cwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBydWxlIHRvIG9ubHkgYXBwbHkgdG8gdHJhZmZpYyB0aGF0IG9yaWdpbmF0ZXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcm9tIChvciB0ZXJtaW5hdGVzIGF0KSBhIHBvZCBydW5uaW5nIGFzIGEgc2VydmljZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjY291bnQgdGhhdCBtYXRjaGVzIHRoZSBnaXZlbiBsYWJlbCBzZWxlY3Rvci4gSWYKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBib3RoIE5hbWVzIGFuZCBTZWxlY3RvciBhcmUgc3BlY2lmaWVkIHRoZW4gdGhleSBhcmUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBTkQnZWQuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IG9iamVjdAogICAgICAgICAgICAgICAgICAgICAgdHlwZTogb2JqZWN0CiAgICAgICAgICAgICAgICAgIHJlcXVpcmVkOgogICAgICAgICAgICAgICAgICAtIGFjdGlvbgogICAgICAgICAgICAgICAgICB0eXBlOiBvYmplY3QKICAgICAgICAgICAgICAgIHR5cGU6IGFycmF5CiAgICAgICAgICAgICAgaW5ncmVzczoKICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBUaGUgb3JkZXJlZCBzZXQgb2YgaW5ncmVzcyBydWxlcy4gIEVhY2ggcnVsZSBjb250YWlucwogICAgICAgICAgICAgICAgICBhIHNldCBvZiBwYWNrZXQgbWF0Y2ggY3JpdGVyaWEgYW5kIGEgY29ycmVzcG9uZGluZyBhY3Rpb24gdG8gYXBwbHkuCiAgICAgICAgICAgICAgICBpdGVtczoKICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICJBIFJ1bGUgZW5jYXBzdWxhdGVzIGEgc2V0IG9mIG1hdGNoIGNyaXRlcmlhIGFuZCBhbgogICAgICAgICAgICAgICAgICAgIGFjdGlvbi4gIEJvdGggc2VsZWN0b3ItYmFzZWQgc2VjdXJpdHkgUG9saWN5IGFuZCBzZWN1cml0eSBQcm9maWxlcwogICAgICAgICAgICAgICAgICAgIHJlZmVyZW5jZSBydWxlcyAtIHNlcGFyYXRlZCBvdXQgYXMgYSBsaXN0IG9mIHJ1bGVzIGZvciBib3RoIGluZ3Jlc3MKICAgICAgICAgICAgICAgICAgICBhbmQgZWdyZXNzIHBhY2tldCBtYXRjaGluZy4gXG4gRWFjaCBwb3NpdGl2ZSBtYXRjaCBjcml0ZXJpYSBoYXMKICAgICAgICAgICAgICAgICAgICBhIG5lZ2F0ZWQgdmVyc2lvbiwgcHJlZml4ZWQgd2l0aCDigJ1Ob3TigJ0uIEFsbCB0aGUgbWF0Y2ggY3JpdGVyaWEKICAgICAgICAgICAgICAgICAgICB3aXRoaW4gYSBydWxlIG11c3QgYmUgc2F0aXNmaWVkIGZvciBhIHBhY2tldCB0byBtYXRjaC4gQSBzaW5nbGUKICAgICAgICAgICAgICAgICAgICBydWxlIGNhbiBjb250YWluIHRoZSBwb3NpdGl2ZSBhbmQgbmVnYXRpdmUgdmVyc2lvbiBvZiBhIG1hdGNoCiAgICAgICAgICAgICAgICAgICAgYW5kIGJvdGggbXVzdCBiZSBzYXRpc2ZpZWQgZm9yIHRoZSBydWxlIHRvIG1hdGNoLiIKICAgICAgICAgICAgICAgICAgcHJvcGVydGllczoKICAgICAgICAgICAgICAgICAgICBhY3Rpb246CiAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICAgICAgICBkZXN0aW5hdGlvbjoKICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBEZXN0aW5hdGlvbiBjb250YWlucyB0aGUgbWF0Y2ggY3JpdGVyaWEgdGhhdCBhcHBseQogICAgICAgICAgICAgICAgICAgICAgICB0byBkZXN0aW5hdGlvbiBlbnRpdHkuCiAgICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzOgogICAgICAgICAgICAgICAgICAgICAgICBuYW1lc3BhY2VTZWxlY3RvcjoKICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogIk5hbWVzcGFjZVNlbGVjdG9yIGlzIGFuIG9wdGlvbmFsIGZpZWxkIHRoYXQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRhaW5zIGEgc2VsZWN0b3IgZXhwcmVzc2lvbi4gT25seSB0cmFmZmljIHRoYXQgb3JpZ2luYXRlcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJvbSAob3IgdGVybWluYXRlcyBhdCkgZW5kcG9pbnRzIHdpdGhpbiB0aGUgc2VsZWN0ZWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWVzcGFjZXMgd2lsbCBiZSBtYXRjaGVkLiBXaGVuIGJvdGggTmFtZXNwYWNlU2VsZWN0b3IKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuZCBTZWxlY3RvciBhcmUgZGVmaW5lZCBvbiB0aGUgc2FtZSBydWxlLCB0aGVuIG9ubHkgd29ya2xvYWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZHBvaW50cyB0aGF0IGFyZSBtYXRjaGVkIGJ5IGJvdGggc2VsZWN0b3JzIHdpbGwgYmUgc2VsZWN0ZWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ5IHRoZSBydWxlLiBcbiBGb3IgTmV0d29ya1BvbGljeSwgYW4gZW1wdHkgTmFtZXNwYWNlU2VsZWN0b3IKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGltcGxpZXMgdGhhdCB0aGUgU2VsZWN0b3IgaXMgbGltaXRlZCB0byBzZWxlY3Rpbmcgb25seQogICAgICAgICAgICAgICAgICAgICAgICAgICAgd29ya2xvYWQgZW5kcG9pbnRzIGluIHRoZSBzYW1lIG5hbWVzcGFjZSBhcyB0aGUgTmV0d29ya1BvbGljeS4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuIEZvciBOZXR3b3JrUG9saWN5LCBgZ2xvYmFsKClgIE5hbWVzcGFjZVNlbGVjdG9yIGltcGxpZXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQgdGhlIFNlbGVjdG9yIGlzIGxpbWl0ZWQgdG8gc2VsZWN0aW5nIG9ubHkgR2xvYmFsTmV0d29ya1NldAogICAgICAgICAgICAgICAgICAgICAgICAgICAgb3IgSG9zdEVuZHBvaW50LiBcbiBGb3IgR2xvYmFsTmV0d29ya1BvbGljeSwgYW4gZW1wdHkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIE5hbWVzcGFjZVNlbGVjdG9yIGltcGxpZXMgdGhlIFNlbGVjdG9yIGFwcGxpZXMgdG8gd29ya2xvYWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZHBvaW50cyBhY3Jvc3MgYWxsIG5hbWVzcGFjZXMuIgogICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgICAgICAgICAgICBuZXRzOgogICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBOZXRzIGlzIGFuIG9wdGlvbmFsIGZpZWxkIHRoYXQgcmVzdHJpY3RzIHRoZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcnVsZSB0byBvbmx5IGFwcGx5IHRvIHRyYWZmaWMgdGhhdCBvcmlnaW5hdGVzIGZyb20gKG9yCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXJtaW5hdGVzIGF0KSBJUCBhZGRyZXNzZXMgaW4gYW55IG9mIHRoZSBnaXZlbiBzdWJuZXRzLgogICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogYXJyYXkKICAgICAgICAgICAgICAgICAgICAgICAgbm90TmV0czoKICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogTm90TmV0cyBpcyB0aGUgbmVnYXRlZCB2ZXJzaW9uIG9mIHRoZSBOZXRzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWVsZC4KICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtczoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IGFycmF5CiAgICAgICAgICAgICAgICAgICAgICAgIG5vdFBvcnRzOgogICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBOb3RQb3J0cyBpcyB0aGUgbmVnYXRlZCB2ZXJzaW9uIG9mIHRoZSBQb3J0cwogICAgICAgICAgICAgICAgICAgICAgICAgICAgZmllbGQuIFNpbmNlIG9ubHkgc29tZSBwcm90b2NvbHMgaGF2ZSBwb3J0cywgaWYgYW55IHBvcnRzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmUgc3BlY2lmaWVkIGl0IHJlcXVpcmVzIHRoZSBQcm90b2NvbCBtYXRjaCBpbiB0aGUgUnVsZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8gYmUgc2V0IHRvICJUQ1AiIG9yICJVRFAiLgogICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgYW55T2Y6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtIHR5cGU6IGludGVnZXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0gdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXR0ZXJuOiBeLioKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHgta3ViZXJuZXRlcy1pbnQtb3Itc3RyaW5nOiB0cnVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogYXJyYXkKICAgICAgICAgICAgICAgICAgICAgICAgbm90U2VsZWN0b3I6CiAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IE5vdFNlbGVjdG9yIGlzIHRoZSBuZWdhdGVkIHZlcnNpb24gb2YgdGhlIFNlbGVjdG9yCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWVsZC4gIFNlZSBTZWxlY3RvciBmaWVsZCBmb3Igc3VidGxldGllcyB3aXRoIG5lZ2F0ZWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdG9ycy4KICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICAgICAgICAgICAgcG9ydHM6CiAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICJQb3J0cyBpcyBhbiBvcHRpb25hbCBmaWVsZCB0aGF0IHJlc3RyaWN0cwogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlIHJ1bGUgdG8gb25seSBhcHBseSB0byB0cmFmZmljIHRoYXQgaGFzIGEgc291cmNlIChkZXN0aW5hdGlvbikKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvcnQgdGhhdCBtYXRjaGVzIG9uZSBvZiB0aGVzZSByYW5nZXMvdmFsdWVzLiBUaGlzIHZhbHVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpcyBhIGxpc3Qgb2YgaW50ZWdlcnMgb3Igc3RyaW5ncyB0aGF0IHJlcHJlc2VudCByYW5nZXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mIHBvcnRzLiBcbiBTaW5jZSBvbmx5IHNvbWUgcHJvdG9jb2xzIGhhdmUgcG9ydHMsIGlmCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbnkgcG9ydHMgYXJlIHNwZWNpZmllZCBpdCByZXF1aXJlcyB0aGUgUHJvdG9jb2wgbWF0Y2gKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluIHRoZSBSdWxlIHRvIGJlIHNldCB0byBcIlRDUFwiIG9yIFwiVURQXCIuIgogICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgYW55T2Y6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtIHR5cGU6IGludGVnZXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0gdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXR0ZXJuOiBeLioKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHgta3ViZXJuZXRlcy1pbnQtb3Itc3RyaW5nOiB0cnVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogYXJyYXkKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0b3I6CiAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICJTZWxlY3RvciBpcyBhbiBvcHRpb25hbCBmaWVsZCB0aGF0IGNvbnRhaW5zCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhIHNlbGVjdG9yIGV4cHJlc3Npb24gKHNlZSBQb2xpY3kgZm9yIHNhbXBsZSBzeW50YXgpLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgXCBPbmx5IHRyYWZmaWMgdGhhdCBvcmlnaW5hdGVzIGZyb20gKHRlcm1pbmF0ZXMgYXQpIGVuZHBvaW50cwogICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hpbmcgdGhlIHNlbGVjdG9yIHdpbGwgYmUgbWF0Y2hlZC4gXG4gTm90ZSB0aGF0OiBpbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkaXRpb24gdG8gdGhlIG5lZ2F0ZWQgdmVyc2lvbiBvZiB0aGUgU2VsZWN0b3IgKHNlZSBOb3RTZWxlY3RvcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgYmVsb3cpLCB0aGUgc2VsZWN0b3IgZXhwcmVzc2lvbiBzeW50YXggaXRzZWxmIHN1cHBvcnRzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZWdhdGlvbi4gIFRoZSB0d28gdHlwZXMgb2YgbmVnYXRpb24gYXJlIHN1YnRseSBkaWZmZXJlbnQuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBPbmUgbmVnYXRlcyB0aGUgc2V0IG9mIG1hdGNoZWQgZW5kcG9pbnRzLCB0aGUgb3RoZXIgbmVnYXRlcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlIHdob2xlIG1hdGNoOiBcbiBcdFNlbGVjdG9yID0gXCIhaGFzKG15X2xhYmVsKVwiIG1hdGNoZXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhY2tldHMgdGhhdCBhcmUgZnJvbSBvdGhlciBDYWxpY28tY29udHJvbGxlZCBcdGVuZHBvaW50cwogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhhdCBkbyBub3QgaGF2ZSB0aGUgbGFiZWwg4oCcbXlfbGFiZWzigJ0uIFxuIFx0Tm90U2VsZWN0b3IKICAgICAgICAgICAgICAgICAgICAgICAgICAgID0gXCJoYXMobXlfbGFiZWwpXCIgbWF0Y2hlcyBwYWNrZXRzIHRoYXQgYXJlIG5vdCBmcm9tCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBDYWxpY28tY29udHJvbGxlZCBcdGVuZHBvaW50cyB0aGF0IGRvIGhhdmUgdGhlIGxhYmVsIOKAnG15X2xhYmVs4oCdLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gVGhlIGVmZmVjdCBpcyB0aGF0IHRoZSBsYXR0ZXIgd2lsbCBhY2NlcHQgcGFja2V0cyBmcm9tCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBub24tQ2FsaWNvIHNvdXJjZXMgd2hlcmVhcyB0aGUgZm9ybWVyIGlzIGxpbWl0ZWQgdG8gcGFja2V0cwogICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJvbSBDYWxpY28tY29udHJvbGxlZCBlbmRwb2ludHMuIgogICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgICAgICAgICAgICBzZXJ2aWNlQWNjb3VudHM6CiAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IFNlcnZpY2VBY2NvdW50cyBpcyBhbiBvcHRpb25hbCBmaWVsZCB0aGF0IHJlc3RyaWN0cwogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlIHJ1bGUgdG8gb25seSBhcHBseSB0byB0cmFmZmljIHRoYXQgb3JpZ2luYXRlcyBmcm9tCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAob3IgdGVybWluYXRlcyBhdCkgYSBwb2QgcnVubmluZyBhcyBhIG1hdGNoaW5nIHNlcnZpY2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjY291bnQuCiAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvcGVydGllczoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWVzOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogTmFtZXMgaXMgYW4gb3B0aW9uYWwgZmllbGQgdGhhdCByZXN0cmljdHMKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGUgcnVsZSB0byBvbmx5IGFwcGx5IHRvIHRyYWZmaWMgdGhhdCBvcmlnaW5hdGVzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJvbSAob3IgdGVybWluYXRlcyBhdCkgYSBwb2QgcnVubmluZyBhcyBhIHNlcnZpY2UKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY2NvdW50IHdob3NlIG5hbWUgaXMgaW4gdGhlIGxpc3QuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBhcnJheQogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0b3I6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBTZWxlY3RvciBpcyBhbiBvcHRpb25hbCBmaWVsZCB0aGF0IHJlc3RyaWN0cwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBydWxlIHRvIG9ubHkgYXBwbHkgdG8gdHJhZmZpYyB0aGF0IG9yaWdpbmF0ZXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcm9tIChvciB0ZXJtaW5hdGVzIGF0KSBhIHBvZCBydW5uaW5nIGFzIGEgc2VydmljZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjY291bnQgdGhhdCBtYXRjaGVzIHRoZSBnaXZlbiBsYWJlbCBzZWxlY3Rvci4gSWYKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBib3RoIE5hbWVzIGFuZCBTZWxlY3RvciBhcmUgc3BlY2lmaWVkIHRoZW4gdGhleSBhcmUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBBTkQnZWQuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IG9iamVjdAogICAgICAgICAgICAgICAgICAgICAgdHlwZTogb2JqZWN0CiAgICAgICAgICAgICAgICAgICAgaHR0cDoKICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBIVFRQIGNvbnRhaW5zIG1hdGNoIGNyaXRlcmlhIHRoYXQgYXBwbHkgdG8gSFRUUAogICAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0cy4KICAgICAgICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgICAgICAgICAgICAgICAgIG1ldGhvZHM6CiAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IE1ldGhvZHMgaXMgYW4gb3B0aW9uYWwgZmllbGQgdGhhdCByZXN0cmljdHMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBydWxlIHRvIGFwcGx5IG9ubHkgdG8gSFRUUCByZXF1ZXN0cyB0aGF0IHVzZSBvbmUgb2YKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBsaXN0ZWQgSFRUUCBNZXRob2RzIChlLmcuIEdFVCwgUFVULCBldGMuKSBNdWx0aXBsZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgbWV0aG9kcyBhcmUgT1InZCB0b2dldGhlci4KICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtczoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IGFycmF5CiAgICAgICAgICAgICAgICAgICAgICAgIHBhdGhzOgogICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAnUGF0aHMgaXMgYW4gb3B0aW9uYWwgZmllbGQgdGhhdCByZXN0cmljdHMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBydWxlIHRvIGFwcGx5IHRvIEhUVFAgcmVxdWVzdHMgdGhhdCB1c2Ugb25lIG9mIHRoZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgbGlzdGVkIEhUVFAgUGF0aHMuIE11bHRpcGxlIHBhdGhzIGFyZSBPUicnZCB0b2dldGhlci4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUuZzogLSBleGFjdDogL2ZvbyAtIHByZWZpeDogL2JhciBOT1RFOiBFYWNoIGVudHJ5IG1heQogICAgICAgICAgICAgICAgICAgICAgICAgICAgT05MWSBzcGVjaWZ5IGVpdGhlciBhIGBleGFjdGAgb3IgYSBgcHJlZml4YCBtYXRjaC4gVGhlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0b3Igd2lsbCBjaGVjayBmb3IgaXQuJwogICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICdIVFRQUGF0aCBzcGVjaWZpZXMgYW4gSFRUUCBwYXRoIHRvIG1hdGNoLgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJdCBtYXkgYmUgZWl0aGVyIG9mIHRoZSBmb3JtOiBleGFjdDogPHBhdGg+OiB3aGljaCBtYXRjaGVzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBwYXRoIGV4YWN0bHkgb3IgcHJlZml4OiA8cGF0aC1wcmVmaXg+OiB3aGljaCBtYXRjaGVzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBwYXRoIHByZWZpeCcKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4YWN0OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmVmaXg6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBvYmplY3QKICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBhcnJheQogICAgICAgICAgICAgICAgICAgICAgdHlwZTogb2JqZWN0CiAgICAgICAgICAgICAgICAgICAgaWNtcDoKICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBJQ01QIGlzIGFuIG9wdGlvbmFsIGZpZWxkIHRoYXQgcmVzdHJpY3RzIHRoZSBydWxlCiAgICAgICAgICAgICAgICAgICAgICAgIHRvIGFwcGx5IHRvIGEgc3BlY2lmaWMgdHlwZSBhbmQgY29kZSBvZiBJQ01QIHRyYWZmaWMuICBUaGlzCiAgICAgICAgICAgICAgICAgICAgICAgIHNob3VsZCBvbmx5IGJlIHNwZWNpZmllZCBpZiB0aGUgUHJvdG9jb2wgZmllbGQgaXMgc2V0IHRvICJJQ01QIgogICAgICAgICAgICAgICAgICAgICAgICBvciAiSUNNUHY2Ii4KICAgICAgICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgICAgICAgICAgICAgICAgIGNvZGU6CiAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IE1hdGNoIG9uIGEgc3BlY2lmaWMgSUNNUCBjb2RlLiAgSWYgc3BlY2lmaWVkLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlIFR5cGUgdmFsdWUgbXVzdCBhbHNvIGJlIHNwZWNpZmllZC4gVGhpcyBpcyBhIHRlY2huaWNhbAogICAgICAgICAgICAgICAgICAgICAgICAgICAgbGltaXRhdGlvbiBpbXBvc2VkIGJ5IHRoZSBrZXJuZWzigJlzIGlwdGFibGVzIGZpcmV3YWxsLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpY2ggQ2FsaWNvIHVzZXMgdG8gZW5mb3JjZSB0aGUgcnVsZS4KICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBpbnRlZ2VyCiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6CiAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IE1hdGNoIG9uIGEgc3BlY2lmaWMgSUNNUCB0eXBlLiAgRm9yIGV4YW1wbGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEgdmFsdWUgb2YgOCByZWZlcnMgdG8gSUNNUCBFY2hvIFJlcXVlc3QgKGkuZS4gcGluZ3MpLgogICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IGludGVnZXIKICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IG9iamVjdAogICAgICAgICAgICAgICAgICAgIGlwVmVyc2lvbjoKICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBJUFZlcnNpb24gaXMgYW4gb3B0aW9uYWwgZmllbGQgdGhhdCByZXN0cmljdHMgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgIHJ1bGUgdG8gb25seSBtYXRjaCBhIHNwZWNpZmljIElQIHZlcnNpb24uCiAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBpbnRlZ2VyCiAgICAgICAgICAgICAgICAgICAgbWV0YWRhdGE6CiAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogTWV0YWRhdGEgY29udGFpbnMgYWRkaXRpb25hbCBpbmZvcm1hdGlvbiBmb3IgdGhpcwogICAgICAgICAgICAgICAgICAgICAgICBydWxlCiAgICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzOgogICAgICAgICAgICAgICAgICAgICAgICBhbm5vdGF0aW9uczoKICAgICAgICAgICAgICAgICAgICAgICAgICBhZGRpdGlvbmFsUHJvcGVydGllczoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBBbm5vdGF0aW9ucyBpcyBhIHNldCBvZiBrZXkgdmFsdWUgcGFpcnMgdGhhdAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2l2ZSBleHRyYSBpbmZvcm1hdGlvbiBhYm91dCB0aGUgcnVsZQogICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IG9iamVjdAogICAgICAgICAgICAgICAgICAgICAgdHlwZTogb2JqZWN0CiAgICAgICAgICAgICAgICAgICAgbm90SUNNUDoKICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBOb3RJQ01QIGlzIHRoZSBuZWdhdGVkIHZlcnNpb24gb2YgdGhlIElDTVAgZmllbGQuCiAgICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzOgogICAgICAgICAgICAgICAgICAgICAgICBjb2RlOgogICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBNYXRjaCBvbiBhIHNwZWNpZmljIElDTVAgY29kZS4gIElmIHNwZWNpZmllZCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBUeXBlIHZhbHVlIG11c3QgYWxzbyBiZSBzcGVjaWZpZWQuIFRoaXMgaXMgYSB0ZWNobmljYWwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbWl0YXRpb24gaW1wb3NlZCBieSB0aGUga2VybmVs4oCZcyBpcHRhYmxlcyBmaXJld2FsbCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWNoIENhbGljbyB1c2VzIHRvIGVuZm9yY2UgdGhlIHJ1bGUuCiAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogaW50ZWdlcgogICAgICAgICAgICAgICAgICAgICAgICB0eXBlOgogICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBNYXRjaCBvbiBhIHNwZWNpZmljIElDTVAgdHlwZS4gIEZvciBleGFtcGxlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhIHZhbHVlIG9mIDggcmVmZXJzIHRvIElDTVAgRWNobyBSZXF1ZXN0IChpLmUuIHBpbmdzKS4KICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBpbnRlZ2VyCiAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBvYmplY3QKICAgICAgICAgICAgICAgICAgICBub3RQcm90b2NvbDoKICAgICAgICAgICAgICAgICAgICAgIGFueU9mOgogICAgICAgICAgICAgICAgICAgICAgLSB0eXBlOiBpbnRlZ2VyCiAgICAgICAgICAgICAgICAgICAgICAtIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IE5vdFByb3RvY29sIGlzIHRoZSBuZWdhdGVkIHZlcnNpb24gb2YgdGhlIFByb3RvY29sCiAgICAgICAgICAgICAgICAgICAgICAgIGZpZWxkLgogICAgICAgICAgICAgICAgICAgICAgcGF0dGVybjogXi4qCiAgICAgICAgICAgICAgICAgICAgICB4LWt1YmVybmV0ZXMtaW50LW9yLXN0cmluZzogdHJ1ZQogICAgICAgICAgICAgICAgICAgIHByb3RvY29sOgogICAgICAgICAgICAgICAgICAgICAgYW55T2Y6CiAgICAgICAgICAgICAgICAgICAgICAtIHR5cGU6IGludGVnZXIKICAgICAgICAgICAgICAgICAgICAgIC0gdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogIlByb3RvY29sIGlzIGFuIG9wdGlvbmFsIGZpZWxkIHRoYXQgcmVzdHJpY3RzIHRoZQogICAgICAgICAgICAgICAgICAgICAgICBydWxlIHRvIG9ubHkgYXBwbHkgdG8gdHJhZmZpYyBvZiBhIHNwZWNpZmljIElQIHByb3RvY29sLiBSZXF1aXJlZAogICAgICAgICAgICAgICAgICAgICAgICBpZiBhbnkgb2YgdGhlIEVudGl0eVJ1bGVzIGNvbnRhaW4gUG9ydHMgKGJlY2F1c2UgcG9ydHMgb25seQogICAgICAgICAgICAgICAgICAgICAgICBhcHBseSB0byBjZXJ0YWluIHByb3RvY29scykuIFxuIE11c3QgYmUgb25lIG9mIHRoZXNlIHN0cmluZwogICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZXM6IFwiVENQXCIsIFwiVURQXCIsIFwiSUNNUFwiLCBcIklDTVB2NlwiLCBcIlNDVFBcIiwKICAgICAgICAgICAgICAgICAgICAgICAgXCJVRFBMaXRlXCIgb3IgYW4gaW50ZWdlciBpbiB0aGUgcmFuZ2UgMS0yNTUuIgogICAgICAgICAgICAgICAgICAgICAgcGF0dGVybjogXi4qCiAgICAgICAgICAgICAgICAgICAgICB4LWt1YmVybmV0ZXMtaW50LW9yLXN0cmluZzogdHJ1ZQogICAgICAgICAgICAgICAgICAgIHNvdXJjZToKICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBTb3VyY2UgY29udGFpbnMgdGhlIG1hdGNoIGNyaXRlcmlhIHRoYXQgYXBwbHkgdG8KICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlIGVudGl0eS4KICAgICAgICAgICAgICAgICAgICAgIHByb3BlcnRpZXM6CiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWVzcGFjZVNlbGVjdG9yOgogICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAiTmFtZXNwYWNlU2VsZWN0b3IgaXMgYW4gb3B0aW9uYWwgZmllbGQgdGhhdAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGFpbnMgYSBzZWxlY3RvciBleHByZXNzaW9uLiBPbmx5IHRyYWZmaWMgdGhhdCBvcmlnaW5hdGVzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcm9tIChvciB0ZXJtaW5hdGVzIGF0KSBlbmRwb2ludHMgd2l0aGluIHRoZSBzZWxlY3RlZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZXNwYWNlcyB3aWxsIGJlIG1hdGNoZWQuIFdoZW4gYm90aCBOYW1lc3BhY2VTZWxlY3RvcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5kIFNlbGVjdG9yIGFyZSBkZWZpbmVkIG9uIHRoZSBzYW1lIHJ1bGUsIHRoZW4gb25seSB3b3JrbG9hZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kcG9pbnRzIHRoYXQgYXJlIG1hdGNoZWQgYnkgYm90aCBzZWxlY3RvcnMgd2lsbCBiZSBzZWxlY3RlZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgYnkgdGhlIHJ1bGUuIFxuIEZvciBOZXR3b3JrUG9saWN5LCBhbiBlbXB0eSBOYW1lc3BhY2VTZWxlY3RvcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgaW1wbGllcyB0aGF0IHRoZSBTZWxlY3RvciBpcyBsaW1pdGVkIHRvIHNlbGVjdGluZyBvbmx5CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3b3JrbG9hZCBlbmRwb2ludHMgaW4gdGhlIHNhbWUgbmFtZXNwYWNlIGFzIHRoZSBOZXR3b3JrUG9saWN5LgogICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gRm9yIE5ldHdvcmtQb2xpY3ksIGBnbG9iYWwoKWAgTmFtZXNwYWNlU2VsZWN0b3IgaW1wbGllcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhhdCB0aGUgU2VsZWN0b3IgaXMgbGltaXRlZCB0byBzZWxlY3Rpbmcgb25seSBHbG9iYWxOZXR3b3JrU2V0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvciBIb3N0RW5kcG9pbnQuIFxuIEZvciBHbG9iYWxOZXR3b3JrUG9saWN5LCBhbiBlbXB0eQogICAgICAgICAgICAgICAgICAgICAgICAgICAgTmFtZXNwYWNlU2VsZWN0b3IgaW1wbGllcyB0aGUgU2VsZWN0b3IgYXBwbGllcyB0byB3b3JrbG9hZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kcG9pbnRzIGFjcm9zcyBhbGwgbmFtZXNwYWNlcy4iCiAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgICAgICAgICAgIG5ldHM6CiAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IE5ldHMgaXMgYW4gb3B0aW9uYWwgZmllbGQgdGhhdCByZXN0cmljdHMgdGhlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBydWxlIHRvIG9ubHkgYXBwbHkgdG8gdHJhZmZpYyB0aGF0IG9yaWdpbmF0ZXMgZnJvbSAob3IKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlcm1pbmF0ZXMgYXQpIElQIGFkZHJlc3NlcyBpbiBhbnkgb2YgdGhlIGdpdmVuIHN1Ym5ldHMuCiAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXM6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBhcnJheQogICAgICAgICAgICAgICAgICAgICAgICBub3ROZXRzOgogICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBOb3ROZXRzIGlzIHRoZSBuZWdhdGVkIHZlcnNpb24gb2YgdGhlIE5ldHMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpZWxkLgogICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogYXJyYXkKICAgICAgICAgICAgICAgICAgICAgICAgbm90UG9ydHM6CiAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IE5vdFBvcnRzIGlzIHRoZSBuZWdhdGVkIHZlcnNpb24gb2YgdGhlIFBvcnRzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWVsZC4gU2luY2Ugb25seSBzb21lIHByb3RvY29scyBoYXZlIHBvcnRzLCBpZiBhbnkgcG9ydHMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyZSBzcGVjaWZpZWQgaXQgcmVxdWlyZXMgdGhlIFByb3RvY29sIG1hdGNoIGluIHRoZSBSdWxlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byBiZSBzZXQgdG8gIlRDUCIgb3IgIlVEUCIuCiAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXM6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbnlPZjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0gdHlwZTogaW50ZWdlcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgLSB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhdHRlcm46IF4uKgogICAgICAgICAgICAgICAgICAgICAgICAgICAgeC1rdWJlcm5ldGVzLWludC1vci1zdHJpbmc6IHRydWUKICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBhcnJheQogICAgICAgICAgICAgICAgICAgICAgICBub3RTZWxlY3RvcjoKICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogTm90U2VsZWN0b3IgaXMgdGhlIG5lZ2F0ZWQgdmVyc2lvbiBvZiB0aGUgU2VsZWN0b3IKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpZWxkLiAgU2VlIFNlbGVjdG9yIGZpZWxkIGZvciBzdWJ0bGV0aWVzIHdpdGggbmVnYXRlZAogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0b3JzLgogICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgICAgICAgICAgICBwb3J0czoKICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogIlBvcnRzIGlzIGFuIG9wdGlvbmFsIGZpZWxkIHRoYXQgcmVzdHJpY3RzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGUgcnVsZSB0byBvbmx5IGFwcGx5IHRvIHRyYWZmaWMgdGhhdCBoYXMgYSBzb3VyY2UgKGRlc3RpbmF0aW9uKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9ydCB0aGF0IG1hdGNoZXMgb25lIG9mIHRoZXNlIHJhbmdlcy92YWx1ZXMuIFRoaXMgdmFsdWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzIGEgbGlzdCBvZiBpbnRlZ2VycyBvciBzdHJpbmdzIHRoYXQgcmVwcmVzZW50IHJhbmdlcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgb2YgcG9ydHMuIFxuIFNpbmNlIG9ubHkgc29tZSBwcm90b2NvbHMgaGF2ZSBwb3J0cywgaWYKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFueSBwb3J0cyBhcmUgc3BlY2lmaWVkIGl0IHJlcXVpcmVzIHRoZSBQcm90b2NvbCBtYXRjaAogICAgICAgICAgICAgICAgICAgICAgICAgICAgaW4gdGhlIFJ1bGUgdG8gYmUgc2V0IHRvIFwiVENQXCIgb3IgXCJVRFBcIi4iCiAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXM6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbnlPZjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0gdHlwZTogaW50ZWdlcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgLSB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhdHRlcm46IF4uKgogICAgICAgICAgICAgICAgICAgICAgICAgICAgeC1rdWJlcm5ldGVzLWludC1vci1zdHJpbmc6IHRydWUKICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBhcnJheQogICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RvcjoKICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogIlNlbGVjdG9yIGlzIGFuIG9wdGlvbmFsIGZpZWxkIHRoYXQgY29udGFpbnMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEgc2VsZWN0b3IgZXhwcmVzc2lvbiAoc2VlIFBvbGljeSBmb3Igc2FtcGxlIHN5bnRheCkuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIE9ubHkgdHJhZmZpYyB0aGF0IG9yaWdpbmF0ZXMgZnJvbSAodGVybWluYXRlcyBhdCkgZW5kcG9pbnRzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRjaGluZyB0aGUgc2VsZWN0b3Igd2lsbCBiZSBtYXRjaGVkLiBcbiBOb3RlIHRoYXQ6IGluCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGRpdGlvbiB0byB0aGUgbmVnYXRlZCB2ZXJzaW9uIG9mIHRoZSBTZWxlY3RvciAoc2VlIE5vdFNlbGVjdG9yCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZWxvdyksIHRoZSBzZWxlY3RvciBleHByZXNzaW9uIHN5bnRheCBpdHNlbGYgc3VwcG9ydHMKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5lZ2F0aW9uLiAgVGhlIHR3byB0eXBlcyBvZiBuZWdhdGlvbiBhcmUgc3VidGx5IGRpZmZlcmVudC4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9uZSBuZWdhdGVzIHRoZSBzZXQgb2YgbWF0Y2hlZCBlbmRwb2ludHMsIHRoZSBvdGhlciBuZWdhdGVzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGUgd2hvbGUgbWF0Y2g6IFxuIFx0U2VsZWN0b3IgPSBcIiFoYXMobXlfbGFiZWwpXCIgbWF0Y2hlcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFja2V0cyB0aGF0IGFyZSBmcm9tIG90aGVyIENhbGljby1jb250cm9sbGVkIFx0ZW5kcG9pbnRzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGF0IGRvIG5vdCBoYXZlIHRoZSBsYWJlbCDigJxteV9sYWJlbOKAnS4gXG4gXHROb3RTZWxlY3RvcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPSBcImhhcyhteV9sYWJlbClcIiBtYXRjaGVzIHBhY2tldHMgdGhhdCBhcmUgbm90IGZyb20KICAgICAgICAgICAgICAgICAgICAgICAgICAgIENhbGljby1jb250cm9sbGVkIFx0ZW5kcG9pbnRzIHRoYXQgZG8gaGF2ZSB0aGUgbGFiZWwg4oCcbXlfbGFiZWzigJ0uCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiBUaGUgZWZmZWN0IGlzIHRoYXQgdGhlIGxhdHRlciB3aWxsIGFjY2VwdCBwYWNrZXRzIGZyb20KICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vbi1DYWxpY28gc291cmNlcyB3aGVyZWFzIHRoZSBmb3JtZXIgaXMgbGltaXRlZCB0byBwYWNrZXRzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcm9tIENhbGljby1jb250cm9sbGVkIGVuZHBvaW50cy4iCiAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgICAgICAgICAgIHNlcnZpY2VBY2NvdW50czoKICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogU2VydmljZUFjY291bnRzIGlzIGFuIG9wdGlvbmFsIGZpZWxkIHRoYXQgcmVzdHJpY3RzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGUgcnVsZSB0byBvbmx5IGFwcGx5IHRvIHRyYWZmaWMgdGhhdCBvcmlnaW5hdGVzIGZyb20KICAgICAgICAgICAgICAgICAgICAgICAgICAgIChvciB0ZXJtaW5hdGVzIGF0KSBhIHBvZCBydW5uaW5nIGFzIGEgbWF0Y2hpbmcgc2VydmljZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgYWNjb3VudC4KICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZXM6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBOYW1lcyBpcyBhbiBvcHRpb25hbCBmaWVsZCB0aGF0IHJlc3RyaWN0cwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBydWxlIHRvIG9ubHkgYXBwbHkgdG8gdHJhZmZpYyB0aGF0IG9yaWdpbmF0ZXMKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcm9tIChvciB0ZXJtaW5hdGVzIGF0KSBhIHBvZCBydW5uaW5nIGFzIGEgc2VydmljZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjY291bnQgd2hvc2UgbmFtZSBpcyBpbiB0aGUgbGlzdC4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXM6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IGFycmF5CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RvcjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IFNlbGVjdG9yIGlzIGFuIG9wdGlvbmFsIGZpZWxkIHRoYXQgcmVzdHJpY3RzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlIHJ1bGUgdG8gb25seSBhcHBseSB0byB0cmFmZmljIHRoYXQgb3JpZ2luYXRlcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyb20gKG9yIHRlcm1pbmF0ZXMgYXQpIGEgcG9kIHJ1bm5pbmcgYXMgYSBzZXJ2aWNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWNjb3VudCB0aGF0IG1hdGNoZXMgdGhlIGdpdmVuIGxhYmVsIHNlbGVjdG9yLiBJZgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvdGggTmFtZXMgYW5kIFNlbGVjdG9yIGFyZSBzcGVjaWZpZWQgdGhlbiB0aGV5IGFyZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFORCdlZC4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogb2JqZWN0CiAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBvYmplY3QKICAgICAgICAgICAgICAgICAgcmVxdWlyZWQ6CiAgICAgICAgICAgICAgICAgIC0gYWN0aW9uCiAgICAgICAgICAgICAgICAgIHR5cGU6IG9iamVjdAogICAgICAgICAgICAgICAgdHlwZTogYXJyYXkKICAgICAgICAgICAgICBvcmRlcjoKICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBPcmRlciBpcyBhbiBvcHRpb25hbCBmaWVsZCB0aGF0IHNwZWNpZmllcyB0aGUgb3JkZXIgaW4KICAgICAgICAgICAgICAgICAgd2hpY2ggdGhlIHBvbGljeSBpcyBhcHBsaWVkLiBQb2xpY2llcyB3aXRoIGhpZ2hlciAib3JkZXIiIGFyZSBhcHBsaWVkCiAgICAgICAgICAgICAgICAgIGFmdGVyIHRob3NlIHdpdGggbG93ZXIgb3JkZXIuICBJZiB0aGUgb3JkZXIgaXMgb21pdHRlZCwgaXQgbWF5IGJlCiAgICAgICAgICAgICAgICAgIGNvbnNpZGVyZWQgdG8gYmUgImluZmluaXRlIiAtIGkuZS4gdGhlIHBvbGljeSB3aWxsIGJlIGFwcGxpZWQgbGFzdC4gIFBvbGljaWVzCiAgICAgICAgICAgICAgICAgIHdpdGggaWRlbnRpY2FsIG9yZGVyIHdpbGwgYmUgYXBwbGllZCBpbiBhbHBoYW51bWVyaWNhbCBvcmRlciBiYXNlZAogICAgICAgICAgICAgICAgICBvbiB0aGUgUG9saWN5ICJOYW1lIi4KICAgICAgICAgICAgICAgIHR5cGU6IG51bWJlcgogICAgICAgICAgICAgIHNlbGVjdG9yOgogICAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICJUaGUgc2VsZWN0b3IgaXMgYW4gZXhwcmVzc2lvbiB1c2VkIHRvIHBpY2sgcGljayBvdXQKICAgICAgICAgICAgICAgICAgdGhlIGVuZHBvaW50cyB0aGF0IHRoZSBwb2xpY3kgc2hvdWxkIGJlIGFwcGxpZWQgdG8uIFxuIFNlbGVjdG9yCiAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb25zIGZvbGxvdyB0aGlzIHN5bnRheDogXG4gXHRsYWJlbCA9PSBcInN0cmluZ19saXRlcmFsXCIKICAgICAgICAgICAgICAgICAgXCAtPiAgY29tcGFyaXNvbiwgZS5nLiBteV9sYWJlbCA9PSBcImZvbyBiYXJcIiBcdGxhYmVsICE9IFwic3RyaW5nX2xpdGVyYWxcIgogICAgICAgICAgICAgICAgICBcICAtPiAgbm90IGVxdWFsOyBhbHNvIG1hdGNoZXMgaWYgbGFiZWwgaXMgbm90IHByZXNlbnQgXHRsYWJlbCBpbgogICAgICAgICAgICAgICAgICB7IFwiYVwiLCBcImJcIiwgXCJjXCIsIC4uLiB9ICAtPiAgdHJ1ZSBpZiB0aGUgdmFsdWUgb2YgbGFiZWwgWCBpcwogICAgICAgICAgICAgICAgICBvbmUgb2YgXCJhXCIsIFwiYlwiLCBcImNcIiBcdGxhYmVsIG5vdCBpbiB7IFwiYVwiLCBcImJcIiwgXCJjXCIsCiAgICAgICAgICAgICAgICAgIC4uLiB9ICAtPiAgdHJ1ZSBpZiB0aGUgdmFsdWUgb2YgbGFiZWwgWCBpcyBub3Qgb25lIG9mIFwiYVwiLCBcImJcIiwKICAgICAgICAgICAgICAgICAgXCJjXCIgXHRoYXMobGFiZWxfbmFtZSkgIC0+IFRydWUgaWYgdGhhdCBsYWJlbCBpcyBwcmVzZW50IFx0ISBleHByCiAgICAgICAgICAgICAgICAgIC0+IG5lZ2F0aW9uIG9mIGV4cHIgXHRleHByICYmIGV4cHIgIC0+IFNob3J0LWNpcmN1aXQgYW5kIFx0ZXhwcgogICAgICAgICAgICAgICAgICB8fCBleHByICAtPiBTaG9ydC1jaXJjdWl0IG9yIFx0KCBleHByICkgLT4gcGFyZW5zIGZvciBncm91cGluZyBcdGFsbCgpCiAgICAgICAgICAgICAgICAgIG9yIHRoZSBlbXB0eSBzZWxlY3RvciAtPiBtYXRjaGVzIGFsbCBlbmRwb2ludHMuIFxuIExhYmVsIG5hbWVzIGFyZQogICAgICAgICAgICAgICAgICBhbGxvd2VkIHRvIGNvbnRhaW4gYWxwaGFudW1lcmljcywgLSwgXyBhbmQgLy4gU3RyaW5nIGxpdGVyYWxzIGFyZQogICAgICAgICAgICAgICAgICBtb3JlIHBlcm1pc3NpdmUgYnV0IHRoZXkgZG8gbm90IHN1cHBvcnQgZXNjYXBlIGNoYXJhY3RlcnMuIFxuIEV4YW1wbGVzCiAgICAgICAgICAgICAgICAgICh3aXRoIG1hZGUtdXAgbGFiZWxzKTogXG4gXHR0eXBlID09IFwid2Vic2VydmVyXCIgJiYgZGVwbG95bWVudAogICAgICAgICAgICAgICAgICA9PSBcInByb2RcIiBcdHR5cGUgaW4ge1wiZnJvbnRlbmRcIiwgXCJiYWNrZW5kXCJ9IFx0ZGVwbG95bWVudCAhPQogICAgICAgICAgICAgICAgICBcImRldlwiIFx0ISBoYXMobGFiZWxfbmFtZSkiCiAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICBzZXJ2aWNlQWNjb3VudFNlbGVjdG9yOgogICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IFNlcnZpY2VBY2NvdW50U2VsZWN0b3IgaXMgYW4gb3B0aW9uYWwgZmllbGQgZm9yIGFuIGV4cHJlc3Npb24KICAgICAgICAgICAgICAgICAgdXNlZCB0byBzZWxlY3QgYSBwb2QgYmFzZWQgb24gc2VydmljZSBhY2NvdW50cy4KICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgIHR5cGVzOgogICAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICJUeXBlcyBpbmRpY2F0ZXMgd2hldGhlciB0aGlzIHBvbGljeSBhcHBsaWVzIHRvIGluZ3Jlc3MsCiAgICAgICAgICAgICAgICAgIG9yIHRvIGVncmVzcywgb3IgdG8gYm90aC4gIFdoZW4gbm90IGV4cGxpY2l0bHkgc3BlY2lmaWVkIChhbmQgc28KICAgICAgICAgICAgICAgICAgdGhlIHZhbHVlIG9uIGNyZWF0aW9uIGlzIGVtcHR5IG9yIG5pbCksIENhbGljbyBkZWZhdWx0cyBUeXBlcyBhY2NvcmRpbmcKICAgICAgICAgICAgICAgICAgdG8gd2hhdCBJbmdyZXNzIGFuZCBFZ3Jlc3MgYXJlIHByZXNlbnQgaW4gdGhlIHBvbGljeS4gIFRoZSBkZWZhdWx0CiAgICAgICAgICAgICAgICAgIGlzOiBcbiAtIFsgUG9saWN5VHlwZUluZ3Jlc3MgXSwgaWYgdGhlcmUgYXJlIG5vIEVncmVzcyBydWxlcyAoaW5jbHVkaW5nCiAgICAgICAgICAgICAgICAgIHRoZSBjYXNlIHdoZXJlIHRoZXJlIGFyZSAgIGFsc28gbm8gSW5ncmVzcyBydWxlcykgXG4gLSBbIFBvbGljeVR5cGVFZ3Jlc3MKICAgICAgICAgICAgICAgICAgXSwgaWYgdGhlcmUgYXJlIEVncmVzcyBydWxlcyBidXQgbm8gSW5ncmVzcyBydWxlcyBcbiAtIFsgUG9saWN5VHlwZUluZ3Jlc3MsCiAgICAgICAgICAgICAgICAgIFBvbGljeVR5cGVFZ3Jlc3MgXSwgaWYgdGhlcmUgYXJlIGJvdGggSW5ncmVzcyBhbmQgRWdyZXNzIHJ1bGVzLgogICAgICAgICAgICAgICAgICBcbiBXaGVuIHRoZSBwb2xpY3kgaXMgcmVhZCBiYWNrIGFnYWluLCBUeXBlcyB3aWxsIGFsd2F5cyBiZSBvbmUKICAgICAgICAgICAgICAgICAgb2YgdGhlc2UgdmFsdWVzLCBuZXZlciBlbXB0eSBvciBuaWwuIgogICAgICAgICAgICAgICAgaXRlbXM6CiAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBQb2xpY3lUeXBlIGVudW1lcmF0ZXMgdGhlIHBvc3NpYmxlIHZhbHVlcyBvZiB0aGUgUG9saWN5U3BlYwogICAgICAgICAgICAgICAgICAgIFR5cGVzIGZpZWxkLgogICAgICAgICAgICAgICAgICB0eXBlOiBzdHJpbmcKICAgICAgICAgICAgICAgIHR5cGU6IGFycmF5CiAgICAgICAgICAgIHR5cGU6IG9iamVjdAogICAgICAgIHR5cGU6IG9iamVjdAogICAgc2VydmVkOiB0cnVlCiAgICBzdG9yYWdlOiB0cnVlCnN0YXR1czoKICBhY2NlcHRlZE5hbWVzOgogICAga2luZDogIiIKICAgIHBsdXJhbDogIiIKICBjb25kaXRpb25zOiBbXQogIHN0b3JlZFZlcnNpb25zOiBbXQoKLS0tCgotLS0KYXBpVmVyc2lvbjogYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjEKa2luZDogQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uCm1ldGFkYXRhOgogIG5hbWU6IG5ldHdvcmtzZXRzLmNyZC5wcm9qZWN0Y2FsaWNvLm9yZwpzcGVjOgogIGdyb3VwOiBjcmQucHJvamVjdGNhbGljby5vcmcKICBuYW1lczoKICAgIGtpbmQ6IE5ldHdvcmtTZXQKICAgIGxpc3RLaW5kOiBOZXR3b3JrU2V0TGlzdAogICAgcGx1cmFsOiBuZXR3b3Jrc2V0cwogICAgc2luZ3VsYXI6IG5ldHdvcmtzZXQKICBzY29wZTogTmFtZXNwYWNlZAogIHZlcnNpb25zOgogIC0gbmFtZTogdjEKICAgIHNjaGVtYToKICAgICAgb3BlbkFQSVYzU2NoZW1hOgogICAgICAgIGRlc2NyaXB0aW9uOiBOZXR3b3JrU2V0IGlzIHRoZSBOYW1lc3BhY2VkLWVxdWl2YWxlbnQgb2YgdGhlIEdsb2JhbE5ldHdvcmtTZXQuCiAgICAgICAgcHJvcGVydGllczoKICAgICAgICAgIGFwaVZlcnNpb246CiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAnQVBJVmVyc2lvbiBkZWZpbmVzIHRoZSB2ZXJzaW9uZWQgc2NoZW1hIG9mIHRoaXMgcmVwcmVzZW50YXRpb24KICAgICAgICAgICAgICBvZiBhbiBvYmplY3QuIFNlcnZlcnMgc2hvdWxkIGNvbnZlcnQgcmVjb2duaXplZCBzY2hlbWFzIHRvIHRoZSBsYXRlc3QKICAgICAgICAgICAgICBpbnRlcm5hbCB2YWx1ZSwgYW5kIG1heSByZWplY3QgdW5yZWNvZ25pemVkIHZhbHVlcy4gTW9yZSBpbmZvOiBodHRwczovL2dpdC5rOHMuaW8vY29tbXVuaXR5L2NvbnRyaWJ1dG9ycy9kZXZlbC9zaWctYXJjaGl0ZWN0dXJlL2FwaS1jb252ZW50aW9ucy5tZCNyZXNvdXJjZXMnCiAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAga2luZDoKICAgICAgICAgICAgZGVzY3JpcHRpb246ICdLaW5kIGlzIGEgc3RyaW5nIHZhbHVlIHJlcHJlc2VudGluZyB0aGUgUkVTVCByZXNvdXJjZSB0aGlzCiAgICAgICAgICAgICAgb2JqZWN0IHJlcHJlc2VudHMuIFNlcnZlcnMgbWF5IGluZmVyIHRoaXMgZnJvbSB0aGUgZW5kcG9pbnQgdGhlIGNsaWVudAogICAgICAgICAgICAgIHN1Ym1pdHMgcmVxdWVzdHMgdG8uIENhbm5vdCBiZSB1cGRhdGVkLiBJbiBDYW1lbENhc2UuIE1vcmUgaW5mbzogaHR0cHM6Ly9naXQuazhzLmlvL2NvbW11bml0eS9jb250cmlidXRvcnMvZGV2ZWwvc2lnLWFyY2hpdGVjdHVyZS9hcGktY29udmVudGlvbnMubWQjdHlwZXMta2luZHMnCiAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgbWV0YWRhdGE6CiAgICAgICAgICAgIHR5cGU6IG9iamVjdAogICAgICAgICAgc3BlYzoKICAgICAgICAgICAgZGVzY3JpcHRpb246IE5ldHdvcmtTZXRTcGVjIGNvbnRhaW5zIHRoZSBzcGVjaWZpY2F0aW9uIGZvciBhIE5ldHdvcmtTZXQKICAgICAgICAgICAgICByZXNvdXJjZS4KICAgICAgICAgICAgcHJvcGVydGllczoKICAgICAgICAgICAgICBuZXRzOgogICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IFRoZSBsaXN0IG9mIElQIG5ldHdvcmtzIHRoYXQgYmVsb25nIHRvIHRoaXMgc2V0LgogICAgICAgICAgICAgICAgaXRlbXM6CiAgICAgICAgICAgICAgICAgIHR5cGU6IHN0cmluZwogICAgICAgICAgICAgICAgdHlwZTogYXJyYXkKICAgICAgICAgICAgdHlwZTogb2JqZWN0CiAgICAgICAgdHlwZTogb2JqZWN0CiAgICBzZXJ2ZWQ6IHRydWUKICAgIHN0b3JhZ2U6IHRydWUKc3RhdHVzOgogIGFjY2VwdGVkTmFtZXM6CiAgICBraW5kOiAiIgogICAgcGx1cmFsOiAiIgogIGNvbmRpdGlvbnM6IFtdCiAgc3RvcmVkVmVyc2lvbnM6IFtdCgotLS0KLS0tCmtpbmQ6IENsdXN0ZXJSb2xlCmFwaVZlcnNpb246IHJiYWMuYXV0aG9yaXphdGlvbi5rOHMuaW8vdjEKbWV0YWRhdGE6CiAgbmFtZTogY2FsaWNvLWt1YmUtY29udHJvbGxlcnMKcnVsZXM6CiAgLSBhcGlHcm91cHM6IFsiIl0KICAgIHJlc291cmNlczoKICAgICAgLSBub2RlcwogICAgdmVyYnM6CiAgICAgIC0gd2F0Y2gKICAgICAgLSBsaXN0CiAgICAgIC0gZ2V0CiAgLSBhcGlHcm91cHM6IFsiIl0KICAgIHJlc291cmNlczoKICAgICAgLSBwb2RzCiAgICB2ZXJiczoKICAgICAgLSBnZXQKICAtIGFwaUdyb3VwczogWyJjcmQucHJvamVjdGNhbGljby5vcmciXQogICAgcmVzb3VyY2VzOgogICAgICAtIGlwcG9vbHMKICAgIHZlcmJzOgogICAgICAtIGxpc3QKICAtIGFwaUdyb3VwczogWyJjcmQucHJvamVjdGNhbGljby5vcmciXQogICAgcmVzb3VyY2VzOgogICAgICAtIGJsb2NrYWZmaW5pdGllcwogICAgICAtIGlwYW1ibG9ja3MKICAgICAgLSBpcGFtaGFuZGxlcwogICAgdmVyYnM6CiAgICAgIC0gZ2V0CiAgICAgIC0gbGlzdAogICAgICAtIGNyZWF0ZQogICAgICAtIHVwZGF0ZQogICAgICAtIGRlbGV0ZQogIC0gYXBpR3JvdXBzOiBbImNyZC5wcm9qZWN0Y2FsaWNvLm9yZyJdCiAgICByZXNvdXJjZXM6CiAgICAgIC0gaG9zdGVuZHBvaW50cwogICAgdmVyYnM6CiAgICAgIC0gZ2V0CiAgICAgIC0gbGlzdAogICAgICAtIGNyZWF0ZQogICAgICAtIHVwZGF0ZQogICAgICAtIGRlbGV0ZQogIC0gYXBpR3JvdXBzOiBbImNyZC5wcm9qZWN0Y2FsaWNvLm9yZyJdCiAgICByZXNvdXJjZXM6CiAgICAgIC0gY2x1c3RlcmluZm9ybWF0aW9ucwogICAgdmVyYnM6CiAgICAgIC0gZ2V0CiAgICAgIC0gY3JlYXRlCiAgICAgIC0gdXBkYXRlCiAgLSBhcGlHcm91cHM6IFsiY3JkLnByb2plY3RjYWxpY28ub3JnIl0KICAgIHJlc291cmNlczoKICAgICAgLSBrdWJlY29udHJvbGxlcnNjb25maWd1cmF0aW9ucwogICAgdmVyYnM6CiAgICAgIC0gZ2V0CiAgICAgIC0gY3JlYXRlCiAgICAgIC0gdXBkYXRlCiAgICAgIC0gd2F0Y2gKLS0tCmtpbmQ6IENsdXN0ZXJSb2xlQmluZGluZwphcGlWZXJzaW9uOiByYmFjLmF1dGhvcml6YXRpb24uazhzLmlvL3YxCm1ldGFkYXRhOgogIG5hbWU6IGNhbGljby1rdWJlLWNvbnRyb2xsZXJzCnJvbGVSZWY6CiAgYXBpR3JvdXA6IHJiYWMuYXV0aG9yaXphdGlvbi5rOHMuaW8KICBraW5kOiBDbHVzdGVyUm9sZQogIG5hbWU6IGNhbGljby1rdWJlLWNvbnRyb2xsZXJzCnN1YmplY3RzOgotIGtpbmQ6IFNlcnZpY2VBY2NvdW50CiAgbmFtZTogY2FsaWNvLWt1YmUtY29udHJvbGxlcnMKICBuYW1lc3BhY2U6IG5ldHdvcmtpbmcKCi0tLQpraW5kOiBDbHVzdGVyUm9sZQphcGlWZXJzaW9uOiByYmFjLmF1dGhvcml6YXRpb24uazhzLmlvL3YxCm1ldGFkYXRhOgogIG5hbWU6IGNhbGljby1ub2RlCnJ1bGVzOgogIC0gYXBpR3JvdXBzOiBbIiJdCiAgICByZXNvdXJjZXM6CiAgICAgIC0gcG9kcwogICAgICAtIG5vZGVzCiAgICAgIC0gbmFtZXNwYWNlcwogICAgdmVyYnM6CiAgICAgIC0gZ2V0CiAgLSBhcGlHcm91cHM6IFsiIl0KICAgIHJlc291cmNlczoKICAgICAgLSBlbmRwb2ludHMKICAgICAgLSBzZXJ2aWNlcwogICAgdmVyYnM6CiAgICAgIC0gd2F0Y2gKICAgICAgLSBsaXN0CiAgICAgIC0gZ2V0CiAgLSBhcGlHcm91cHM6IFsiIl0KICAgIHJlc291cmNlczoKICAgICAgLSBjb25maWdtYXBzCiAgICB2ZXJiczoKICAgICAgLSBnZXQKICAtIGFwaUdyb3VwczogWyIiXQogICAgcmVzb3VyY2VzOgogICAgICAtIG5vZGVzL3N0YXR1cwogICAgdmVyYnM6CiAgICAgIC0gcGF0Y2gKICAgICAgLSB1cGRhdGUKICAtIGFwaUdyb3VwczogWyJuZXR3b3JraW5nLms4cy5pbyJdCiAgICByZXNvdXJjZXM6CiAgICAgIC0gbmV0d29ya3BvbGljaWVzCiAgICB2ZXJiczoKICAgICAgLSB3YXRjaAogICAgICAtIGxpc3QKICAtIGFwaUdyb3VwczogWyIiXQogICAgcmVzb3VyY2VzOgogICAgICAtIHBvZHMKICAgICAgLSBuYW1lc3BhY2VzCiAgICAgIC0gc2VydmljZWFjY291bnRzCiAgICB2ZXJiczoKICAgICAgLSBsaXN0CiAgICAgIC0gd2F0Y2gKICAtIGFwaUdyb3VwczogWyIiXQogICAgcmVzb3VyY2VzOgogICAgICAtIHBvZHMvc3RhdHVzCiAgICB2ZXJiczoKICAgICAgLSBwYXRjaAogIC0gYXBpR3JvdXBzOiBbImNyZC5wcm9qZWN0Y2FsaWNvLm9yZyJdCiAgICByZXNvdXJjZXM6CiAgICAgIC0gZ2xvYmFsZmVsaXhjb25maWdzCiAgICAgIC0gZmVsaXhjb25maWd1cmF0aW9ucwogICAgICAtIGJncHBlZXJzCiAgICAgIC0gZ2xvYmFsYmdwY29uZmlncwogICAgICAtIGJncGNvbmZpZ3VyYXRpb25zCiAgICAgIC0gaXBwb29scwogICAgICAtIGlwYW1ibG9ja3MKICAgICAgLSBnbG9iYWxuZXR3b3JrcG9saWNpZXMKICAgICAgLSBnbG9iYWxuZXR3b3Jrc2V0cwogICAgICAtIG5ldHdvcmtwb2xpY2llcwogICAgICAtIG5ldHdvcmtzZXRzCiAgICAgIC0gY2x1c3RlcmluZm9ybWF0aW9ucwogICAgICAtIGhvc3RlbmRwb2ludHMKICAgICAgLSBibG9ja2FmZmluaXRpZXMKICAgIHZlcmJzOgogICAgICAtIGdldAogICAgICAtIGxpc3QKICAgICAgLSB3YXRjaAogIC0gYXBpR3JvdXBzOiBbImNyZC5wcm9qZWN0Y2FsaWNvLm9yZyJdCiAgICByZXNvdXJjZXM6CiAgICAgIC0gaXBwb29scwogICAgICAtIGZlbGl4Y29uZmlndXJhdGlvbnMKICAgICAgLSBjbHVzdGVyaW5mb3JtYXRpb25zCiAgICB2ZXJiczoKICAgICAgLSBjcmVhdGUKICAgICAgLSB1cGRhdGUKICAtIGFwaUdyb3VwczogWyIiXQogICAgcmVzb3VyY2VzOgogICAgICAtIG5vZGVzCiAgICB2ZXJiczoKICAgICAgLSBnZXQKICAgICAgLSBsaXN0CiAgICAgIC0gd2F0Y2gKICAtIGFwaUdyb3VwczogWyJjcmQucHJvamVjdGNhbGljby5vcmciXQogICAgcmVzb3VyY2VzOgogICAgICAtIGJncGNvbmZpZ3VyYXRpb25zCiAgICAgIC0gYmdwcGVlcnMKICAgIHZlcmJzOgogICAgICAtIGNyZWF0ZQogICAgICAtIHVwZGF0ZQogIC0gYXBpR3JvdXBzOiBbImNyZC5wcm9qZWN0Y2FsaWNvLm9yZyJdCiAgICByZXNvdXJjZXM6CiAgICAgIC0gYmxvY2thZmZpbml0aWVzCiAgICAgIC0gaXBhbWJsb2NrcwogICAgICAtIGlwYW1oYW5kbGVzCiAgICB2ZXJiczoKICAgICAgLSBnZXQKICAgICAgLSBsaXN0CiAgICAgIC0gY3JlYXRlCiAgICAgIC0gdXBkYXRlCiAgICAgIC0gZGVsZXRlCiAgLSBhcGlHcm91cHM6IFsiY3JkLnByb2plY3RjYWxpY28ub3JnIl0KICAgIHJlc291cmNlczoKICAgICAgLSBpcGFtY29uZmlncwogICAgdmVyYnM6CiAgICAgIC0gZ2V0CiAgLSBhcGlHcm91cHM6IFsiY3JkLnByb2plY3RjYWxpY28ub3JnIl0KICAgIHJlc291cmNlczoKICAgICAgLSBibG9ja2FmZmluaXRpZXMKICAgIHZlcmJzOgogICAgICAtIHdhdGNoCiAgLSBhcGlHcm91cHM6IFsiYXBwcyJdCiAgICByZXNvdXJjZXM6CiAgICAgIC0gZGFlbW9uc2V0cwogICAgdmVyYnM6CiAgICAgIC0gZ2V0CgotLS0KYXBpVmVyc2lvbjogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MQpraW5kOiBDbHVzdGVyUm9sZUJpbmRpbmcKbWV0YWRhdGE6CiAgbmFtZTogY2FsaWNvLW5vZGUKcm9sZVJlZjoKICBhcGlHcm91cDogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pbwogIGtpbmQ6IENsdXN0ZXJSb2xlCiAgbmFtZTogY2FsaWNvLW5vZGUKc3ViamVjdHM6Ci0ga2luZDogU2VydmljZUFjY291bnQKICBuYW1lOiBjYWxpY28tbm9kZQogIG5hbWVzcGFjZTogbmV0d29ya2luZwoKLS0tCmFwaVZlcnNpb246IHYxCmtpbmQ6IFNlcnZpY2UKbWV0YWRhdGE6CiAgbmFtZTogY2FsaWNvLXR5cGhhCiAgbmFtZXNwYWNlOiBuZXR3b3JraW5nCiAgbGFiZWxzOgogICAgazhzLWFwcDogY2FsaWNvLXR5cGhhCnNwZWM6CiAgY2x1c3RlcklQOiB7ey5DYWxpY29UeXBoYUlQfX0KICBwb3J0czoKICAgIC0gcG9ydDogNTQ3MwogICAgICBwcm90b2NvbDogVENQCiAgICAgIHRhcmdldFBvcnQ6IGNhbGljby10eXBoYQogICAgICBuYW1lOiBjYWxpY28tdHlwaGEKICBzZWxlY3RvcjoKICAgIGs4cy1hcHA6IGNhbGljby10eXBoYQoKLS0tCmFwaVZlcnNpb246IGFwcHMvdjEKa2luZDogRGVwbG95bWVudAptZXRhZGF0YToKICBuYW1lOiBjYWxpY28tdHlwaGEKICBuYW1lc3BhY2U6IG5ldHdvcmtpbmcKICBsYWJlbHM6CiAgICBrOHMtYXBwOiBjYWxpY28tdHlwaGEKc3BlYzoKICByZXBsaWNhczogMQogIHJldmlzaW9uSGlzdG9yeUxpbWl0OiAyCiAgc2VsZWN0b3I6CiAgICBtYXRjaExhYmVsczoKICAgICAgazhzLWFwcDogY2FsaWNvLXR5cGhhCiAgdGVtcGxhdGU6CiAgICBtZXRhZGF0YToKICAgICAgbGFiZWxzOgogICAgICAgIGs4cy1hcHA6IGNhbGljby10eXBoYQogICAgICBhbm5vdGF0aW9uczoKICAgICAgICBjbHVzdGVyLWF1dG9zY2FsZXIua3ViZXJuZXRlcy5pby9zYWZlLXRvLWV2aWN0OiAndHJ1ZScKICAgIHNwZWM6CiAgICAgIG5vZGVTZWxlY3RvcjoKICAgICAgICBrdWJlcm5ldGVzLmlvL29zOiBsaW51eAogICAgICBob3N0TmV0d29yazogdHJ1ZQogICAgICB0b2xlcmF0aW9uczoKICAgICAgICAtIGtleTogQ3JpdGljYWxBZGRvbnNPbmx5CiAgICAgICAgICBvcGVyYXRvcjogRXhpc3RzCiAgICAgIHNlcnZpY2VBY2NvdW50TmFtZTogY2FsaWNvLW5vZGUKICAgICAgcHJpb3JpdHlDbGFzc05hbWU6IHN5c3RlbS1jbHVzdGVyLWNyaXRpY2FsCiAgICAgIHNlY3VyaXR5Q29udGV4dDoKICAgICAgICBmc0dyb3VwOiA2NTUzNAogICAgICBjb250YWluZXJzOgogICAgICAtIGltYWdlOiB7ey5DYWxpY29UeXBoYUltYWdlfX0KICAgICAgICBuYW1lOiBjYWxpY28tdHlwaGEKICAgICAgICBwb3J0czoKICAgICAgICAtIGNvbnRhaW5lclBvcnQ6IDU0NzMKICAgICAgICAgIG5hbWU6IGNhbGljby10eXBoYQogICAgICAgICAgcHJvdG9jb2w6IFRDUAogICAgICAgIGVudkZyb206CiAgICAgICAgLSBjb25maWdNYXBSZWY6CiAgICAgICAgICAgIG5hbWU6IGt1YmVybmV0ZXMtc2VydmljZXMtZW5kcG9pbnQKICAgICAgICAgICAgb3B0aW9uYWw6IHRydWUKICAgICAgICBlbnY6CiAgICAgICAgICAtIG5hbWU6IFRZUEhBX0xPR1NFVkVSSVRZU0NSRUVOCiAgICAgICAgICAgIHZhbHVlOiAiaW5mbyIKICAgICAgICAgIC0gbmFtZTogVFlQSEFfTE9HRklMRVBBVEgKICAgICAgICAgICAgdmFsdWU6ICJub25lIgogICAgICAgICAgLSBuYW1lOiBUWVBIQV9MT0dTRVZFUklUWVNZUwogICAgICAgICAgICB2YWx1ZTogIm5vbmUiCiAgICAgICAgICAtIG5hbWU6IFRZUEhBX0NPTk5FQ1RJT05SRUJBTEFOQ0lOR01PREUKICAgICAgICAgICAgdmFsdWU6ICJrdWJlcm5ldGVzIgogICAgICAgICAgLSBuYW1lOiBUWVBIQV9EQVRBU1RPUkVUWVBFCiAgICAgICAgICAgIHZhbHVlOiAia3ViZXJuZXRlcyIKICAgICAgICAgIC0gbmFtZTogVFlQSEFfSEVBTFRIRU5BQkxFRAogICAgICAgICAgICB2YWx1ZTogInRydWUiCiAgICAgICAgICAtIG5hbWU6IFRZUEhBX1BST01FVEhFVVNNRVRSSUNTRU5BQkxFRAogICAgICAgICAgICB2YWx1ZTogInRydWUiCiAgICAgICAgICAtIG5hbWU6IFRZUEhBX1BST01FVEhFVVNNRVRSSUNTUE9SVAogICAgICAgICAgICB2YWx1ZTogIjkwOTMiCiAgICAgICAgICAtIG5hbWU6IFRZUEhBX0s4U05BTUVTUEFDRQogICAgICAgICAgICB2YWx1ZTogIm5ldHdvcmtpbmciCiAgICAgICAgbGl2ZW5lc3NQcm9iZToKICAgICAgICAgIGh0dHBHZXQ6CiAgICAgICAgICAgIHBhdGg6IC9saXZlbmVzcwogICAgICAgICAgICBwb3J0OiA5MDk4CiAgICAgICAgICAgIGhvc3Q6IGxvY2FsaG9zdAogICAgICAgICAgcGVyaW9kU2Vjb25kczogMzAKICAgICAgICAgIGluaXRpYWxEZWxheVNlY29uZHM6IDMwCiAgICAgICAgc2VjdXJpdHlDb250ZXh0OgogICAgICAgICAgcnVuQXNOb25Sb290OiB0cnVlCiAgICAgICAgICBhbGxvd1ByaXZpbGVnZUVzY2FsYXRpb246IGZhbHNlCiAgICAgICAgcmVhZGluZXNzUHJvYmU6CiAgICAgICAgICBodHRwR2V0OgogICAgICAgICAgICBwYXRoOiAvcmVhZGluZXNzCiAgICAgICAgICAgIHBvcnQ6IDkwOTgKICAgICAgICAgICAgaG9zdDogbG9jYWxob3N0CiAgICAgICAgICBwZXJpb2RTZWNvbmRzOiAxMAoKLS0tCmFwaVZlcnNpb246IHBvbGljeS92MWJldGExCmtpbmQ6IFBvZERpc3J1cHRpb25CdWRnZXQKbWV0YWRhdGE6CiAgbmFtZTogY2FsaWNvLXR5cGhhCiAgbmFtZXNwYWNlOiBuZXR3b3JraW5nCiAgbGFiZWxzOgogICAgazhzLWFwcDogY2FsaWNvLXR5cGhhCnNwZWM6CiAgbWF4VW5hdmFpbGFibGU6IDEKICBzZWxlY3RvcjoKICAgIG1hdGNoTGFiZWxzOgogICAgICBrOHMtYXBwOiBjYWxpY28tdHlwaGEKLS0tCmtpbmQ6IERhZW1vblNldAphcGlWZXJzaW9uOiBhcHBzL3YxCm1ldGFkYXRhOgogIG5hbWU6IGNhbGljby1ub2RlCiAgbmFtZXNwYWNlOiBuZXR3b3JraW5nCiAgbGFiZWxzOgogICAgazhzLWFwcDogY2FsaWNvLW5vZGUKc3BlYzoKICBzZWxlY3RvcjoKICAgIG1hdGNoTGFiZWxzOgogICAgICBrOHMtYXBwOiBjYWxpY28tbm9kZQogIHVwZGF0ZVN0cmF0ZWd5OgogICAgdHlwZTogUm9sbGluZ1VwZGF0ZQogICAgcm9sbGluZ1VwZGF0ZToKICAgICAgbWF4VW5hdmFpbGFibGU6IDEKICB0ZW1wbGF0ZToKICAgIG1ldGFkYXRhOgogICAgICBsYWJlbHM6CiAgICAgICAgazhzLWFwcDogY2FsaWNvLW5vZGUKICAgIHNwZWM6CiAgICAgIG5vZGVTZWxlY3RvcjoKICAgICAgICBrdWJlcm5ldGVzLmlvL29zOiBsaW51eAogICAgICBob3N0TmV0d29yazogdHJ1ZQogICAgICB0b2xlcmF0aW9uczoKICAgICAgICAtIGVmZmVjdDogTm9TY2hlZHVsZQogICAgICAgICAgb3BlcmF0b3I6IEV4aXN0cwogICAgICAgIC0ga2V5OiBDcml0aWNhbEFkZG9uc09ubHkKICAgICAgICAgIG9wZXJhdG9yOiBFeGlzdHMKICAgICAgICAtIGVmZmVjdDogTm9FeGVjdXRlCiAgICAgICAgICBvcGVyYXRvcjogRXhpc3RzCiAgICAgIHNlcnZpY2VBY2NvdW50TmFtZTogY2FsaWNvLW5vZGUKICAgICAgdGVybWluYXRpb25HcmFjZVBlcmlvZFNlY29uZHM6IDAKICAgICAgcHJpb3JpdHlDbGFzc05hbWU6IHN5c3RlbS1ub2RlLWNyaXRpY2FsCiAgICAgIGluaXRDb250YWluZXJzOgogICAgICAgIC0gbmFtZTogdXBncmFkZS1pcGFtCiAgICAgICAgICBpbWFnZToge3suQ2FsaWNvQ05JSW1hZ2V9fQogICAgICAgICAgY29tbWFuZDogWyIvb3B0L2NuaS9iaW4vY2FsaWNvLWlwYW0iLCAiLXVwZ3JhZGUiXQogICAgICAgICAgZW52RnJvbToKICAgICAgICAgIC0gY29uZmlnTWFwUmVmOgogICAgICAgICAgICAgIG5hbWU6IGt1YmVybmV0ZXMtc2VydmljZXMtZW5kcG9pbnQKICAgICAgICAgICAgICBvcHRpb25hbDogdHJ1ZQogICAgICAgICAgZW52OgogICAgICAgICAgICAtIG5hbWU6IEtVQkVSTkVURVNfTk9ERV9OQU1FCiAgICAgICAgICAgICAgdmFsdWVGcm9tOgogICAgICAgICAgICAgICAgZmllbGRSZWY6CiAgICAgICAgICAgICAgICAgIGZpZWxkUGF0aDogc3BlYy5ub2RlTmFtZQogICAgICAgICAgICAtIG5hbWU6IENBTElDT19ORVRXT1JLSU5HX0JBQ0tFTkQKICAgICAgICAgICAgICB2YWx1ZUZyb206CiAgICAgICAgICAgICAgICBjb25maWdNYXBLZXlSZWY6CiAgICAgICAgICAgICAgICAgIG5hbWU6IGNhbGljby1jb25maWcKICAgICAgICAgICAgICAgICAga2V5OiBjYWxpY29fYmFja2VuZAogICAgICAgICAgdm9sdW1lTW91bnRzOgogICAgICAgICAgICAtIG1vdW50UGF0aDogL3Zhci9saWIvY25pL25ldHdvcmtzCiAgICAgICAgICAgICAgbmFtZTogaG9zdC1sb2NhbC1uZXQtZGlyCiAgICAgICAgICAgIC0gbW91bnRQYXRoOiAvaG9zdC9vcHQvY25pL2JpbgogICAgICAgICAgICAgIG5hbWU6IGNuaS1iaW4tZGlyCiAgICAgICAgICBzZWN1cml0eUNvbnRleHQ6CiAgICAgICAgICAgIHByaXZpbGVnZWQ6IHRydWUKICAgICAgICAtIG5hbWU6IGluc3RhbGwtY25pCiAgICAgICAgICBpbWFnZToge3suQ2FsaWNvQ05JSW1hZ2V9fQogICAgICAgICAgY29tbWFuZDogWyIvb3B0L2NuaS9iaW4vaW5zdGFsbCJdCiAgICAgICAgICBlbnZGcm9tOgogICAgICAgICAgLSBjb25maWdNYXBSZWY6CiAgICAgICAgICAgICAgbmFtZToga3ViZXJuZXRlcy1zZXJ2aWNlcy1lbmRwb2ludAogICAgICAgICAgICAgIG9wdGlvbmFsOiB0cnVlCiAgICAgICAgICBlbnY6CiAgICAgICAgICAgIC0gbmFtZTogQ05JX05FVF9ESVIKICAgICAgICAgICAgICB2YWx1ZTogInt7LkNOSUNvbmZpZ0RpcmVjdG9yeX19IgogICAgICAgICAgICAtIG5hbWU6IENOSV9DT05GX05BTUUKICAgICAgICAgICAgICB2YWx1ZTogIjEwLWNhbGljby5jb25mbGlzdCIKICAgICAgICAgICAgLSBuYW1lOiBDTklfTkVUV09SS19DT05GSUcKICAgICAgICAgICAgICB2YWx1ZUZyb206CiAgICAgICAgICAgICAgICBjb25maWdNYXBLZXlSZWY6CiAgICAgICAgICAgICAgICAgIG5hbWU6IGNhbGljby1jb25maWcKICAgICAgICAgICAgICAgICAga2V5OiBjbmlfbmV0d29ya19jb25maWcKICAgICAgICAgICAgLSBuYW1lOiBLVUJFUk5FVEVTX05PREVfTkFNRQogICAgICAgICAgICAgIHZhbHVlRnJvbToKICAgICAgICAgICAgICAgIGZpZWxkUmVmOgogICAgICAgICAgICAgICAgICBmaWVsZFBhdGg6IHNwZWMubm9kZU5hbWUKICAgICAgICAgICAgLSBuYW1lOiBDTklfTVRVCiAgICAgICAgICAgICAgdmFsdWVGcm9tOgogICAgICAgICAgICAgICAgY29uZmlnTWFwS2V5UmVmOgogICAgICAgICAgICAgICAgICBuYW1lOiBjYWxpY28tY29uZmlnCiAgICAgICAgICAgICAgICAgIGtleTogdmV0aF9tdHUKICAgICAgICAgICAgLSBuYW1lOiBTTEVFUAogICAgICAgICAgICAgIHZhbHVlOiAiZmFsc2UiCiAgICAgICAgICB2b2x1bWVNb3VudHM6CiAgICAgICAgICAgIC0gbW91bnRQYXRoOiAvaG9zdC9vcHQvY25pL2JpbgogICAgICAgICAgICAgIG5hbWU6IGNuaS1iaW4tZGlyCiAgICAgICAgICAgIC0gbW91bnRQYXRoOiAvaG9zdC9ldGMvY25pL25ldC5kCiAgICAgICAgICAgICAgbmFtZTogY25pLW5ldC1kaXIKICAgICAgICAgIHNlY3VyaXR5Q29udGV4dDoKICAgICAgICAgICAgcHJpdmlsZWdlZDogdHJ1ZQogICAgICAgIC0gbmFtZTogZmxleHZvbC1kcml2ZXIKICAgICAgICAgIGltYWdlOiB7ey5DYWxpY29Qb2QyRGFlbW9uSW1hZ2V9fQogICAgICAgICAgdm9sdW1lTW91bnRzOgogICAgICAgICAgLSBuYW1lOiBmbGV4dm9sLWRyaXZlci1ob3N0CiAgICAgICAgICAgIG1vdW50UGF0aDogL2hvc3QvZHJpdmVyCiAgICAgICAgICBzZWN1cml0eUNvbnRleHQ6CiAgICAgICAgICAgIHByaXZpbGVnZWQ6IHRydWUKICAgICAgY29udGFpbmVyczoKICAgICAgICAtIG5hbWU6IGNhbGljby1ub2RlCiAgICAgICAgICBpbWFnZToge3suQ2FsaWNvTm9kZUltYWdlfX0KICAgICAgICAgIGVudkZyb206CiAgICAgICAgICAtIGNvbmZpZ01hcFJlZjoKICAgICAgICAgICAgICBuYW1lOiBrdWJlcm5ldGVzLXNlcnZpY2VzLWVuZHBvaW50CiAgICAgICAgICAgICAgb3B0aW9uYWw6IHRydWUKICAgICAgICAgIGVudjoKICAgICAgICAgICAgLSBuYW1lOiBEQVRBU1RPUkVfVFlQRQogICAgICAgICAgICAgIHZhbHVlOiAia3ViZXJuZXRlcyIKICAgICAgICAgICAgLSBuYW1lOiBGRUxJWF9UWVBIQUs4U05BTUVTUEFDRQogICAgICAgICAgICAgIHZhbHVlOiAibmV0d29ya2luZyIKICAgICAgICAgICAgLSBuYW1lOiBGRUxJWF9UWVBIQUs4U1NFUlZJQ0VOQU1FCiAgICAgICAgICAgICAgdmFsdWVGcm9tOgogICAgICAgICAgICAgICAgY29uZmlnTWFwS2V5UmVmOgogICAgICAgICAgICAgICAgICBuYW1lOiBjYWxpY28tY29uZmlnCiAgICAgICAgICAgICAgICAgIGtleTogdHlwaGFfc2VydmljZV9uYW1lCiAgICAgICAgICAgIC0gbmFtZTogV0FJVF9GT1JfREFUQVNUT1JFCiAgICAgICAgICAgICAgdmFsdWU6ICJ0cnVlIgogICAgICAgICAgICAtIG5hbWU6IE5PREVOQU1FCiAgICAgICAgICAgICAgdmFsdWVGcm9tOgogICAgICAgICAgICAgICAgZmllbGRSZWY6CiAgICAgICAgICAgICAgICAgIGZpZWxkUGF0aDogc3BlYy5ub2RlTmFtZQogICAgICAgICAgICAtIG5hbWU6IENBTElDT19ORVRXT1JLSU5HX0JBQ0tFTkQKICAgICAgICAgICAgICB2YWx1ZUZyb206CiAgICAgICAgICAgICAgICBjb25maWdNYXBLZXlSZWY6CiAgICAgICAgICAgICAgICAgIG5hbWU6IGNhbGljby1jb25maWcKICAgICAgICAgICAgICAgICAga2V5OiBjYWxpY29fYmFja2VuZAogICAgICAgICAgICAtIG5hbWU6IENMVVNURVJfVFlQRQogICAgICAgICAgICAgIHZhbHVlOiAiazhzLGJncCIKICAgICAgICAgICAgLSBuYW1lOiBJUAogICAgICAgICAgICAgIHZhbHVlOiAiYXV0b2RldGVjdCIKICAgICAgICAgICAgLSBuYW1lOiBDQUxJQ09fSVBWNFBPT0xfSVBJUAogICAgICAgICAgICAgIHZhbHVlOiAiQWx3YXlzIgogICAgICAgICAgICAtIG5hbWU6IENBTElDT19JUFY0UE9PTF9WWExBTgogICAgICAgICAgICAgIHZhbHVlOiAiTmV2ZXIiCiAgICAgICAgICAgIC0gbmFtZTogRkVMSVhfSVBJTklQTVRVCiAgICAgICAgICAgICAgdmFsdWVGcm9tOgogICAgICAgICAgICAgICAgY29uZmlnTWFwS2V5UmVmOgogICAgICAgICAgICAgICAgICBuYW1lOiBjYWxpY28tY29uZmlnCiAgICAgICAgICAgICAgICAgIGtleTogdmV0aF9tdHUKICAgICAgICAgICAgLSBuYW1lOiBGRUxJWF9WWExBTk1UVQogICAgICAgICAgICAgIHZhbHVlRnJvbToKICAgICAgICAgICAgICAgIGNvbmZpZ01hcEtleVJlZjoKICAgICAgICAgICAgICAgICAgbmFtZTogY2FsaWNvLWNvbmZpZwogICAgICAgICAgICAgICAgICBrZXk6IHZldGhfbXR1CiAgICAgICAgICAgIC0gbmFtZTogRkVMSVhfV0lSRUdVQVJETVRVCiAgICAgICAgICAgICAgdmFsdWVGcm9tOgogICAgICAgICAgICAgICAgY29uZmlnTWFwS2V5UmVmOgogICAgICAgICAgICAgICAgICBuYW1lOiBjYWxpY28tY29uZmlnCiAgICAgICAgICAgICAgICAgIGtleTogdmV0aF9tdHUKICAgICAgICAgICAgLSBuYW1lOiBDQUxJQ09fSVBWNFBPT0xfQ0lEUgogICAgICAgICAgICAgIHZhbHVlOiAie3suQ2x1c3RlckNJRFJ9fSIKICAgICAgICAgICAgLSBuYW1lOiBDQUxJQ09fRElTQUJMRV9GSUxFX0xPR0dJTkcKICAgICAgICAgICAgICB2YWx1ZTogInRydWUiCiAgICAgICAgICAgIC0gbmFtZTogRkVMSVhfREVGQVVMVEVORFBPSU5UVE9IT1NUQUNUSU9OCiAgICAgICAgICAgICAgdmFsdWU6ICJBQ0NFUFQiCiAgICAgICAgICAgIC0gbmFtZTogRkVMSVhfSVBWNlNVUFBPUlQKICAgICAgICAgICAgICB2YWx1ZTogImZhbHNlIgogICAgICAgICAgICAtIG5hbWU6IEZFTElYX0xPR1NFVkVSSVRZU0NSRUVOCiAgICAgICAgICAgICAgdmFsdWU6ICJpbmZvIgogICAgICAgICAgICAtIG5hbWU6IEZFTElYX0hFQUxUSEVOQUJMRUQKICAgICAgICAgICAgICB2YWx1ZTogInRydWUiCiAgICAgICAgICBzZWN1cml0eUNvbnRleHQ6CiAgICAgICAgICAgIHByaXZpbGVnZWQ6IHRydWUKICAgICAgICAgIHJlc291cmNlczoKICAgICAgICAgICAgcmVxdWVzdHM6CiAgICAgICAgICAgICAgY3B1OiAyNTBtCiAgICAgICAgICBsaXZlbmVzc1Byb2JlOgogICAgICAgICAgICBleGVjOgogICAgICAgICAgICAgIGNvbW1hbmQ6CiAgICAgICAgICAgICAgLSAvYmluL2NhbGljby1ub2RlCiAgICAgICAgICAgICAgLSAtZmVsaXgtbGl2ZQogICAgICAgICAgICAgIC0gLWJpcmQtbGl2ZQogICAgICAgICAgICBwZXJpb2RTZWNvbmRzOiAxMAogICAgICAgICAgICBpbml0aWFsRGVsYXlTZWNvbmRzOiAxMAogICAgICAgICAgICBmYWlsdXJlVGhyZXNob2xkOiA2CiAgICAgICAgICByZWFkaW5lc3NQcm9iZToKICAgICAgICAgICAgZXhlYzoKICAgICAgICAgICAgICBjb21tYW5kOgogICAgICAgICAgICAgIC0gL2Jpbi9jYWxpY28tbm9kZQogICAgICAgICAgICAgIC0gLWZlbGl4LXJlYWR5CiAgICAgICAgICAgICAgLSAtYmlyZC1yZWFkeQogICAgICAgICAgICBwZXJpb2RTZWNvbmRzOiAxMAogICAgICAgICAgdm9sdW1lTW91bnRzOgogICAgICAgICAgICAtIG1vdW50UGF0aDogL2xpYi9tb2R1bGVzCiAgICAgICAgICAgICAgbmFtZTogbGliLW1vZHVsZXMKICAgICAgICAgICAgICByZWFkT25seTogdHJ1ZQogICAgICAgICAgICAtIG1vdW50UGF0aDogL3J1bi94dGFibGVzLmxvY2sKICAgICAgICAgICAgICBuYW1lOiB4dGFibGVzLWxvY2sKICAgICAgICAgICAgICByZWFkT25seTogZmFsc2UKICAgICAgICAgICAgLSBtb3VudFBhdGg6IC92YXIvcnVuL2NhbGljbwogICAgICAgICAgICAgIG5hbWU6IHZhci1ydW4tY2FsaWNvCiAgICAgICAgICAgICAgcmVhZE9ubHk6IGZhbHNlCiAgICAgICAgICAgIC0gbW91bnRQYXRoOiAvdmFyL2xpYi9jYWxpY28KICAgICAgICAgICAgICBuYW1lOiB2YXItbGliLWNhbGljbwogICAgICAgICAgICAgIHJlYWRPbmx5OiBmYWxzZQogICAgICAgICAgICAtIG5hbWU6IHBvbGljeXN5bmMKICAgICAgICAgICAgICBtb3VudFBhdGg6IC92YXIvcnVuL25vZGVhZ2VudAogICAgICAgICAgICAtIG5hbWU6IHN5c2ZzCiAgICAgICAgICAgICAgbW91bnRQYXRoOiAvc3lzL2ZzLwogICAgICAgICAgICAgIG1vdW50UHJvcGFnYXRpb246IEJpZGlyZWN0aW9uYWwKICAgICAgdm9sdW1lczoKICAgICAgICAtIG5hbWU6IGxpYi1tb2R1bGVzCiAgICAgICAgICBob3N0UGF0aDoKICAgICAgICAgICAgcGF0aDogL2xpYi9tb2R1bGVzCiAgICAgICAgLSBuYW1lOiB2YXItcnVuLWNhbGljbwogICAgICAgICAgaG9zdFBhdGg6CiAgICAgICAgICAgIHBhdGg6IHt7LlZhclJ1bkRpcmVjdG9yeX19L2NhbGljbwogICAgICAgIC0gbmFtZTogdmFyLWxpYi1jYWxpY28KICAgICAgICAgIGhvc3RQYXRoOgogICAgICAgICAgICBwYXRoOiB7ey5EeW5hbWljRGF0YURpcmVjdG9yeX19L2NhbGljbwogICAgICAgIC0gbmFtZTogeHRhYmxlcy1sb2NrCiAgICAgICAgICBob3N0UGF0aDoKICAgICAgICAgICAgcGF0aDogL3J1bi94dGFibGVzLmxvY2sKICAgICAgICAgICAgdHlwZTogRmlsZU9yQ3JlYXRlCiAgICAgICAgLSBuYW1lOiBzeXNmcwogICAgICAgICAgaG9zdFBhdGg6CiAgICAgICAgICAgIHBhdGg6IC9zeXMvZnMvCiAgICAgICAgICAgIHR5cGU6IERpcmVjdG9yeU9yQ3JlYXRlCiAgICAgICAgLSBuYW1lOiBjbmktYmluLWRpcgogICAgICAgICAgaG9zdFBhdGg6CiAgICAgICAgICAgIHBhdGg6IHt7LkNOSUJpbmFyaWVzRGlyZWN0b3J5fX0KICAgICAgICAtIG5hbWU6IGNuaS1uZXQtZGlyCiAgICAgICAgICBob3N0UGF0aDoKICAgICAgICAgICAgcGF0aDoge3suQ05JQ29uZmlnRGlyZWN0b3J5fX0KICAgICAgICAtIG5hbWU6IGhvc3QtbG9jYWwtbmV0LWRpcgogICAgICAgICAgaG9zdFBhdGg6CiAgICAgICAgICAgIHBhdGg6IHt7LkR5bmFtaWNEYXRhRGlyZWN0b3J5fX0vY25pL25ldHdvcmtzCiAgICAgICAgLSBuYW1lOiBwb2xpY3lzeW5jCiAgICAgICAgICBob3N0UGF0aDoKICAgICAgICAgICAgdHlwZTogRGlyZWN0b3J5T3JDcmVhdGUKICAgICAgICAgICAgcGF0aDoge3suVmFyUnVuRGlyZWN0b3J5fX0vbm9kZWFnZW50CiAgICAgICAgLSBuYW1lOiBmbGV4dm9sLWRyaXZlci1ob3N0CiAgICAgICAgICBob3N0UGF0aDoKICAgICAgICAgICAgdHlwZTogRGlyZWN0b3J5T3JDcmVhdGUKICAgICAgICAgICAgcGF0aDoge3suS3ViZWxldFBsdWdpbnNEaXJlY3Rvcnl9fS92b2x1bWUvZXhlYy9ub2RlYWdlbnR+dWRzCgotLS0KYXBpVmVyc2lvbjogdjEKa2luZDogU2VydmljZUFjY291bnQKbWV0YWRhdGE6CiAgbmFtZTogY2FsaWNvLW5vZGUKICBuYW1lc3BhY2U6IG5ldHdvcmtpbmcKCi0tLQphcGlWZXJzaW9uOiBhcHBzL3YxCmtpbmQ6IERlcGxveW1lbnQKbWV0YWRhdGE6CiAgbmFtZTogY2FsaWNvLWt1YmUtY29udHJvbGxlcnMKICBuYW1lc3BhY2U6IG5ldHdvcmtpbmcKICBsYWJlbHM6CiAgICBrOHMtYXBwOiBjYWxpY28ta3ViZS1jb250cm9sbGVycwpzcGVjOgogIHJlcGxpY2FzOiAxCiAgc2VsZWN0b3I6CiAgICBtYXRjaExhYmVsczoKICAgICAgazhzLWFwcDogY2FsaWNvLWt1YmUtY29udHJvbGxlcnMKICBzdHJhdGVneToKICAgIHR5cGU6IFJlY3JlYXRlCiAgdGVtcGxhdGU6CiAgICBtZXRhZGF0YToKICAgICAgbmFtZTogY2FsaWNvLWt1YmUtY29udHJvbGxlcnMKICAgICAgbmFtZXNwYWNlOiBuZXR3b3JraW5nCiAgICAgIGxhYmVsczoKICAgICAgICBrOHMtYXBwOiBjYWxpY28ta3ViZS1jb250cm9sbGVycwogICAgc3BlYzoKICAgICAgbm9kZVNlbGVjdG9yOgogICAgICAgIGt1YmVybmV0ZXMuaW8vb3M6IGxpbnV4CiAgICAgIHRvbGVyYXRpb25zOgogICAgICAgIC0ga2V5OiBDcml0aWNhbEFkZG9uc09ubHkKICAgICAgICAgIG9wZXJhdG9yOiBFeGlzdHMKICAgICAgICAtIGtleTogbm9kZS1yb2xlLmt1YmVybmV0ZXMuaW8vbWFzdGVyCiAgICAgICAgICBlZmZlY3Q6IE5vU2NoZWR1bGUKICAgICAgc2VydmljZUFjY291bnROYW1lOiBjYWxpY28ta3ViZS1jb250cm9sbGVycwogICAgICBwcmlvcml0eUNsYXNzTmFtZTogc3lzdGVtLWNsdXN0ZXItY3JpdGljYWwKICAgICAgY29udGFpbmVyczoKICAgICAgICAtIG5hbWU6IGNhbGljby1rdWJlLWNvbnRyb2xsZXJzCiAgICAgICAgICBpbWFnZToge3suQ2FsaWNvS3ViZUNvbnRyb2xsZXJzSW1hZ2V9fQogICAgICAgICAgZW52OgogICAgICAgICAgICAtIG5hbWU6IEVOQUJMRURfQ09OVFJPTExFUlMKICAgICAgICAgICAgICB2YWx1ZTogbm9kZQogICAgICAgICAgICAtIG5hbWU6IERBVEFTVE9SRV9UWVBFCiAgICAgICAgICAgICAgdmFsdWU6IGt1YmVybmV0ZXMKICAgICAgICAgIHJlYWRpbmVzc1Byb2JlOgogICAgICAgICAgICBleGVjOgogICAgICAgICAgICAgIGNvbW1hbmQ6CiAgICAgICAgICAgICAgLSAvdXNyL2Jpbi9jaGVjay1zdGF0dXMKICAgICAgICAgICAgICAtIC1yCgotLS0KYXBpVmVyc2lvbjogdjEKa2luZDogU2VydmljZUFjY291bnQKbWV0YWRhdGE6CiAgbmFtZTogY2FsaWNvLWt1YmUtY29udHJvbGxlcnMKICBuYW1lc3BhY2U6IG5ldHdvcmtpbmcK\"")
	packr.PackJSONBytes("../../templates", "k8s/setup/networking/cert-manager.yaml", "\"\"")
	packr.PackJSONBytes("../../templates", "k8s/setup/networking/metallb.yaml", "\"YXBpVmVyc2lvbjogdjEKa2luZDogU2VydmljZUFjY291bnQKbWV0YWRhdGE6CiAgbmFtZXNwYWNlOiBuZXR3b3JraW5nCiAgbmFtZTogbWV0YWxsYi1jb250cm9sbGVyCiAgbGFiZWxzOgogICAgYXBwOiBtZXRhbGxiCgotLS0KYXBpVmVyc2lvbjogdjEKa2luZDogU2VydmljZUFjY291bnQKbWV0YWRhdGE6CiAgbmFtZXNwYWNlOiBuZXR3b3JraW5nCiAgbmFtZTogbWV0YWxsYi1zcGVha2VyCiAgbGFiZWxzOgogICAgYXBwOiBtZXRhbGxiCgotLS0KYXBpVmVyc2lvbjogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MQpraW5kOiBDbHVzdGVyUm9sZQptZXRhZGF0YToKICBuYW1lOiBuZXR3b3JraW5nOm1ldGFsbGItY29udHJvbGxlcgogIGxhYmVsczoKICAgIGFwcDogbWV0YWxsYgpydWxlczoKLSBhcGlHcm91cHM6IFsiIl0KICByZXNvdXJjZXM6IFsic2VydmljZXMiXQogIHZlcmJzOiBbImdldCIsICJsaXN0IiwgIndhdGNoIiwgInVwZGF0ZSJdCi0gYXBpR3JvdXBzOiBbIiJdCiAgcmVzb3VyY2VzOiBbInNlcnZpY2VzL3N0YXR1cyJdCiAgdmVyYnM6IFsidXBkYXRlIl0KLSBhcGlHcm91cHM6IFsiIl0KICByZXNvdXJjZXM6IFsiZXZlbnRzIl0KICB2ZXJiczogWyJjcmVhdGUiLCAicGF0Y2giXQoKLS0tCmFwaVZlcnNpb246IHJiYWMuYXV0aG9yaXphdGlvbi5rOHMuaW8vdjEKa2luZDogQ2x1c3RlclJvbGUKbWV0YWRhdGE6CiAgbmFtZTogbmV0d29ya2luZzptZXRhbGxiLXNwZWFrZXIKICBsYWJlbHM6CiAgICBhcHA6IG1ldGFsbGIKcnVsZXM6Ci0gYXBpR3JvdXBzOiBbIiJdCiAgcmVzb3VyY2VzOiBbInNlcnZpY2VzIiwgImVuZHBvaW50cyIsICJub2RlcyJdCiAgdmVyYnM6IFsiZ2V0IiwgImxpc3QiLCAid2F0Y2giXQoKLS0tCmFwaVZlcnNpb246IHJiYWMuYXV0aG9yaXphdGlvbi5rOHMuaW8vdjEKa2luZDogUm9sZQptZXRhZGF0YToKICBuYW1lc3BhY2U6IG5ldHdvcmtpbmcKICBuYW1lOiBjb25maWctd2F0Y2hlcgogIGxhYmVsczoKICAgIGFwcDogbWV0YWxsYgpydWxlczoKLSBhcGlHcm91cHM6IFsiIl0KICByZXNvdXJjZXM6IFsiY29uZmlnbWFwcyJdCiAgdmVyYnM6IFsiZ2V0IiwgImxpc3QiLCAid2F0Y2giXQotIGFwaUdyb3VwczogWyIiXQogIHJlc291cmNlczogWyJldmVudHMiXQogIHZlcmJzOiBbImNyZWF0ZSJdCgotLS0KYXBpVmVyc2lvbjogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MQpraW5kOiBDbHVzdGVyUm9sZUJpbmRpbmcKbWV0YWRhdGE6CiAgbmFtZTogbmV0d29ya2luZzptZXRhbGxiLWNvbnRyb2xsZXIKICBsYWJlbHM6CiAgICBhcHA6IG1ldGFsbGIKc3ViamVjdHM6Ci0ga2luZDogU2VydmljZUFjY291bnQKICBuYW1lOiBtZXRhbGxiLWNvbnRyb2xsZXIKICBuYW1lc3BhY2U6IG5ldHdvcmtpbmcKcm9sZVJlZjoKICBhcGlHcm91cDogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pbwogIGtpbmQ6IENsdXN0ZXJSb2xlCiAgbmFtZTogbmV0d29ya2luZzptZXRhbGxiLWNvbnRyb2xsZXIKCi0tLQphcGlWZXJzaW9uOiByYmFjLmF1dGhvcml6YXRpb24uazhzLmlvL3YxCmtpbmQ6IENsdXN0ZXJSb2xlQmluZGluZwptZXRhZGF0YToKICBuYW1lOiBuZXR3b3JraW5nOm1ldGFsbGItc3BlYWtlcgogIGxhYmVsczoKICAgIGFwcDogbWV0YWxsYgpzdWJqZWN0czoKLSBraW5kOiBTZXJ2aWNlQWNjb3VudAogIG5hbWU6IG1ldGFsbGItc3BlYWtlcgogIG5hbWVzcGFjZTogbmV0d29ya2luZwpyb2xlUmVmOgogIGFwaUdyb3VwOiByYmFjLmF1dGhvcml6YXRpb24uazhzLmlvCiAga2luZDogQ2x1c3RlclJvbGUKICBuYW1lOiBuZXR3b3JraW5nOm1ldGFsbGItc3BlYWtlcgoKLS0tCmFwaVZlcnNpb246IHJiYWMuYXV0aG9yaXphdGlvbi5rOHMuaW8vdjEKa2luZDogUm9sZUJpbmRpbmcKbWV0YWRhdGE6CiAgbmFtZXNwYWNlOiBuZXR3b3JraW5nCiAgbmFtZTogY29uZmlnLXdhdGNoZXIKICBsYWJlbHM6CiAgICBhcHA6IG1ldGFsbGIKc3ViamVjdHM6Ci0ga2luZDogU2VydmljZUFjY291bnQKICBuYW1lOiBtZXRhbGxiLWNvbnRyb2xsZXIKLSBraW5kOiBTZXJ2aWNlQWNjb3VudAogIG5hbWU6IG1ldGFsbGItc3BlYWtlcgpyb2xlUmVmOgogIGFwaUdyb3VwOiByYmFjLmF1dGhvcml6YXRpb24uazhzLmlvCiAga2luZDogUm9sZQogIG5hbWU6IGNvbmZpZy13YXRjaGVyCgotLS0KYXBpVmVyc2lvbjogYXBwcy92MQpraW5kOiBEYWVtb25TZXQKbWV0YWRhdGE6CiAgbmFtZXNwYWNlOiBuZXR3b3JraW5nCiAgbmFtZTogbWV0YWxsYi1zcGVha2VyCiAgbGFiZWxzOgogICAgYXBwOiBtZXRhbGxiCiAgICBjb21wb25lbnQ6IHNwZWFrZXIKc3BlYzoKICBzZWxlY3RvcjoKICAgIG1hdGNoTGFiZWxzOgogICAgICBhcHA6IG1ldGFsbGIKICAgICAgY29tcG9uZW50OiBzcGVha2VyCiAgdGVtcGxhdGU6CiAgICBtZXRhZGF0YToKICAgICAgbGFiZWxzOgogICAgICAgIGFwcDogbWV0YWxsYgogICAgICAgIGNvbXBvbmVudDogc3BlYWtlcgogICAgICBhbm5vdGF0aW9uczoKICAgICAgICBwcm9tZXRoZXVzLmlvL3NjcmFwZTogInRydWUiCiAgICAgICAgcHJvbWV0aGV1cy5pby9wb3J0OiAiNzQ3MiIKICAgIHNwZWM6CiAgICAgIHNlcnZpY2VBY2NvdW50TmFtZTogbWV0YWxsYi1zcGVha2VyCiAgICAgIHRlcm1pbmF0aW9uR3JhY2VQZXJpb2RTZWNvbmRzOiAwCiAgICAgIGhvc3ROZXR3b3JrOiB0cnVlCiAgICAgIGNvbnRhaW5lcnM6CiAgICAgIC0gbmFtZTogc3BlYWtlcgogICAgICAgIGltYWdlOiB7ey5NZXRhbExCU3BlYWtlckltYWdlfX0gCiAgICAgICAgaW1hZ2VQdWxsUG9saWN5OiBJZk5vdFByZXNlbnQKICAgICAgICBhcmdzOgogICAgICAgIC0gLS1wb3J0PTc0NzIKICAgICAgICAtIC0tY29uZmlnPW1ldGFsbGItY29uZmlnCiAgICAgICAgZW52OgogICAgICAgIC0gbmFtZTogTUVUQUxMQl9OT0RFX05BTUUKICAgICAgICAgIHZhbHVlRnJvbToKICAgICAgICAgICAgZmllbGRSZWY6CiAgICAgICAgICAgICAgZmllbGRQYXRoOiBzcGVjLm5vZGVOYW1lCiAgICAgICAgcG9ydHM6CiAgICAgICAgLSBuYW1lOiBtb25pdG9yaW5nCiAgICAgICAgICBjb250YWluZXJQb3J0OiA3NDcyCiAgICAgICAgcmVzb3VyY2VzOgogICAgICAgICAgbGltaXRzOgogICAgICAgICAgICBjcHU6IDEwMG0KICAgICAgICAgICAgbWVtb3J5OiAxMDBNaQogICAgICAgICAgCiAgICAgICAgc2VjdXJpdHlDb250ZXh0OgogICAgICAgICAgYWxsb3dQcml2aWxlZ2VFc2NhbGF0aW9uOiBmYWxzZQogICAgICAgICAgcmVhZE9ubHlSb290RmlsZXN5c3RlbTogdHJ1ZQogICAgICAgICAgY2FwYWJpbGl0aWVzOgogICAgICAgICAgICBkcm9wOgogICAgICAgICAgICAtIGFsbAogICAgICAgICAgICBhZGQ6CiAgICAgICAgICAgIC0gbmV0X3JhdwoKLS0tCmFwaVZlcnNpb246IGFwcHMvdjEKa2luZDogRGVwbG95bWVudAptZXRhZGF0YToKICBuYW1lc3BhY2U6IG5ldHdvcmtpbmcKICBuYW1lOiBtZXRhbGxiLWNvbnRyb2xsZXIKICBsYWJlbHM6CiAgICBhcHA6IG1ldGFsbGIKICAgIGNvbXBvbmVudDogY29udHJvbGxlcgpzcGVjOgogIHJldmlzaW9uSGlzdG9yeUxpbWl0OiAzCiAgc2VsZWN0b3I6CiAgICBtYXRjaExhYmVsczoKICAgICAgYXBwOiBtZXRhbGxiCiAgICAgIGNvbXBvbmVudDogY29udHJvbGxlcgogIHRlbXBsYXRlOgogICAgbWV0YWRhdGE6CiAgICAgIGxhYmVsczoKICAgICAgICBhcHA6IG1ldGFsbGIKICAgICAgICBjb21wb25lbnQ6IGNvbnRyb2xsZXIKICAgICAgYW5ub3RhdGlvbnM6CiAgICAgICAgcHJvbWV0aGV1cy5pby9zY3JhcGU6ICJ0cnVlIgogICAgICAgIHByb21ldGhldXMuaW8vcG9ydDogIjc0NzIiCiAgICBzcGVjOgogICAgICBzZXJ2aWNlQWNjb3VudE5hbWU6IG1ldGFsbGItY29udHJvbGxlcgogICAgICB0ZXJtaW5hdGlvbkdyYWNlUGVyaW9kU2Vjb25kczogMAogICAgICBzZWN1cml0eUNvbnRleHQ6CiAgICAgICAgcnVuQXNOb25Sb290OiB0cnVlCiAgICAgICAgcnVuQXNVc2VyOiA2NTUzNCAjIG5vYm9keQogICAgICBjb250YWluZXJzOgogICAgICAtIG5hbWU6IGNvbnRyb2xsZXIKICAgICAgICBpbWFnZToge3suTWV0YWxMQkNvbnRyb2xsZXJJbWFnZX19CiAgICAgICAgaW1hZ2VQdWxsUG9saWN5OiBJZk5vdFByZXNlbnQKICAgICAgICBhcmdzOgogICAgICAgIC0gLS1wb3J0PTc0NzIKICAgICAgICAtIC0tY29uZmlnPW1ldGFsbGItY29uZmlnCiAgICAgICAgcG9ydHM6CiAgICAgICAgLSBuYW1lOiBtb25pdG9yaW5nCiAgICAgICAgICBjb250YWluZXJQb3J0OiA3NDcyCiAgICAgICAgcmVzb3VyY2VzOgogICAgICAgICAgbGltaXRzOgogICAgICAgICAgICBjcHU6IDEwMG0KICAgICAgICAgICAgbWVtb3J5OiAxMDBNaQogICAgICAgICAgCiAgICAgICAgc2VjdXJpdHlDb250ZXh0OgogICAgICAgICAgYWxsb3dQcml2aWxlZ2VFc2NhbGF0aW9uOiBmYWxzZQogICAgICAgICAgY2FwYWJpbGl0aWVzOgogICAgICAgICAgICBkcm9wOgogICAgICAgICAgICAtIGFsbAogICAgICAgICAgcmVhZE9ubHlSb290RmlsZXN5c3RlbTogdHJ1ZQoKLS0tCmFwaVZlcnNpb246IHYxCmtpbmQ6IENvbmZpZ01hcAptZXRhZGF0YToKICBuYW1lc3BhY2U6IG5ldHdvcmtpbmcKICBuYW1lOiBtZXRhbGxiLWNvbmZpZwpkYXRhOgogIGNvbmZpZzogfAogICAgYWRkcmVzcy1wb29sczoKICAgIC0gbmFtZTogazhzLXRldy1pcC1zcGFjZQogICAgICBwcm90b2NvbDogbGF5ZXIyCiAgICAgIGFkZHJlc3NlczoKICAgICAge3stIHJhbmdlIC5NZXRhbExCQWRkcmVzc2VzIH19CiAgICAgIC0ge3sgLiB9fQogICAgICB7ey0gZW5kIH19Cg==\"")
	packr.PackJSONBytes("../../templates", "k8s/setup/networking/nginx-ingress.yaml", "\"\"")
	packr.PackJSONBytes("../../templates", "k8s/setup/storage/ceph-csi.yaml", "\"\"")
	packr.PackJSONBytes("../../templates", "k8s/setup/storage/ceph-secrets.yaml", "\"YXBpVmVyc2lvbjogdjEKa2luZDogTmFtZXNwYWNlCm1ldGFkYXRhOgogIG5hbWU6IHN0b3JhZ2UKCi0tLQphcGlWZXJzaW9uOiB2MQpraW5kOiBTZWNyZXQKbWV0YWRhdGE6CiAgICBuYW1lOiBjZXBoLWFkbWluCiAgICBuYW1lc3BhY2U6IHN0b3JhZ2UKdHlwZTogImt1YmVybmV0ZXMuaW8vcmJkIgpkYXRhOgogICAga2V5OiB7ey5DbGllbnRBZG1pbktleSB8IGJhc2U2NH19CgotLS0KYXBpVmVyc2lvbjogdjEKa2luZDogU2VjcmV0Cm1ldGFkYXRhOgogICAgbmFtZTogY2VwaC1rOHMtdGV3CiAgICBuYW1lc3BhY2U6IHN0b3JhZ2UKdHlwZTogImt1YmVybmV0ZXMuaW8vcmJkIgpkYXRhOgogICAga2V5OiB7ey5DbGllbnRLOFNURVdLZXkgfCBiYXNlNjR9fQoKLS0tCmFwaVZlcnNpb246IHYxCmtpbmQ6IFNlY3JldAptZXRhZGF0YToKICAgIG5hbWU6IGNzaS1yYmQtc2VjcmV0CiAgICBuYW1lc3BhY2U6IHN0b3JhZ2UKZGF0YToKICAgIGFkbWluSUQ6IHt7ImFkbWluIiB8IGJhc2U2NH19CiAgICBhZG1pbktleToge3suQ2xpZW50QWRtaW5LZXkgfCBiYXNlNjR9fQogICAgdXNlcklEOiB7eyJrOHMtdGV3IiB8IGJhc2U2NH19CiAgICB1c2VyS2V5OiB7ey5DbGllbnRLOFNURVdLZXkgfCBiYXNlNjR9fQoKLS0tCmFwaVZlcnNpb246IHYxCmtpbmQ6IFNlY3JldAptZXRhZGF0YToKICAgIG5hbWU6IGNzaS1jZXBoZnMtc2VjcmV0CiAgICBuYW1lc3BhY2U6IHN0b3JhZ2UKZGF0YToKICAgIGFkbWluSUQ6IHt7ImFkbWluIiB8IGJhc2U2NH19CiAgICBhZG1pbktleToge3suQ2xpZW50QWRtaW5LZXkgfCBiYXNlNjR9fQoK\"")
	packr.PackJSONBytes("../../templates", "k8s/setup/storage/ceph-setup.yaml", "\"\"")
	packr.PackJSONBytes("../../templates", "system/environment.sh", "\"ZXhwb3J0IFBBVEg9e3suSzhTVEVXUGF0aH19Ont7Lks4U1BhdGh9fTp7ey5FdGNkUGF0aH19Ont7LkNSSVBhdGh9fTp7ey5DTklQYXRofX06e3suVmVsZXJvUGF0aH19Ont7Lkhvc3RQYXRofX06e3suQ3VycmVudFBhdGh9fQp7ey0gaWYgLkt1YmVDb25maWcgfX0KZXhwb3J0IEtVQkVDT05GSUc9e3suS3ViZUNvbmZpZ319Cnt7LSBlbmQgfX0KZXhwb3J0IENPTlRBSU5FUl9SVU5USU1FX0VORFBPSU5UPXVuaXg6Ly97ey5Db250YWluZXJkU29ja319CmV4cG9ydCBDT05UQUlORVJEX05BTUVTUEFDRT1rOHMuaW8KZXhwb3J0IEVUQ0RDVExfQVBJPTMK\"")
	packr.PackJSONBytes("../../templates", "system/k8s-tew.service", "\"W1VuaXRdCkRlc2NyaXB0aW9uPXt7LlByb2plY3RUaXRsZX19CgpbU2VydmljZV0KRXhlY1N0YXJ0PXt7LkNvbW1hbmR9fSBydW4gLS1iYXNlLWRpcmVjdG9yeT17ey5CYXNlRGlyZWN0b3J5fX0gLS1oaWRlLXByb2dyZXNzIC0ta2lsbC1jb250YWluZXJzPXRydWUKUmVzdGFydD1vbi1mYWlsdXJlCktpbGxTaWduYWw9U0lHSU5UCktpbGxNb2RlPXByb2Nlc3MKUmVzdGFydFNlYz01CkxpbWl0Tk9GSUxFPTEwMDAwMDAKRGVsZWdhdGU9eWVzCgpbSW5zdGFsbF0KV2FudGVkQnk9bXVsdGktdXNlci50YXJnZXQK\"")
	packr.PackJSONBytes("../../templates", "system/k8s-tew.sh", "\"IyEvYmluL3NoCgpleHBvcnQgSzhTX1RFV19CQVNFX0RJUkVDVE9SWT17ey5CYXNlRGlyZWN0b3J5fX0KCnNvdXJjZSA8KHt7LkJpbmFyeX19IGVudmlyb25tZW50KQo=\"")
}
