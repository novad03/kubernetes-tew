// Code generated by github.com/gobuffalo/packr. DO NOT EDIT.

package utils

import "github.com/gobuffalo/packr"

// You can use the "packr clean" command to clean up this,
// and any other packr generated files.
func init() {
	packr.PackJSONBytes("../../templates", "ceph/ceph.conf", "\"W2dsb2JhbF0KZnNpZCA9IHt7LkNsdXN0ZXJJRH19CgphdXRoIGNsdXN0ZXIgcmVxdWlyZWQgPSBjZXBoeAphdXRoIHNlcnZpY2UgcmVxdWlyZWQgPSBjZXBoeAphdXRoIGNsaWVudCByZXF1aXJlZCA9IGNlcGh4Cgptb24gaW5pdGlhbCBtZW1iZXJzID0ge3tyYW5nZSAkaW5kZXgsJG5vZGUgOj0gLlN0b3JhZ2VDb250cm9sbGVyc319e3tpZiAkaW5kZXh9fSx7e2VuZH19e3skbm9kZS5OYW1lfX17e2VuZH19Cm1vbiBob3N0ID0ge3tyYW5nZSAkaW5kZXgsJG5vZGUgOj0gLlN0b3JhZ2VDb250cm9sbGVyc319e3tpZiAkaW5kZXh9fSx7e2VuZH19e3skbm9kZS5JUH19e3tlbmR9fQpwdWJsaWMgbmV0d29yayA9IHt7LlB1YmxpY05ldHdvcmt9fQpjbHVzdGVyIG5ldHdvcmsgPSB7ey5DbHVzdGVyTmV0d29ya319Cm9zZCBqb3VybmFsIHNpemUgPSAxMDAKbG9nIGZpbGUgPSAvZGV2L251bGwKb3NkIG1heCBvYmplY3QgbmFtZSBsZW4gPSAyNTYKb3NkIG1heCBvYmplY3QgbmFtZXNwYWNlIGxlbiA9IDY0Cm1vbl9tYXhfcGdfcGVyX29zZCA9IDEwMDAKb3NkIHBnIGJpdHMgPSAxMQpvc2QgcGdwIGJpdHMgPSAxMQpvc2QgcG9vbCBkZWZhdWx0IHNpemUgPSB7e2xlbiAuU3RvcmFnZU5vZGVzfX0Kb3NkIHBvb2wgZGVmYXVsdCBtaW4gc2l6ZSA9IDEKb3NkIHBvb2wgZGVmYXVsdCBwZyBudW0gPSAxMDAKb3NkIHBvb2wgZGVmYXVsdCBwZ3AgbnVtID0gMTAwCm9zZCBvYmplY3RzdG9yZSA9IGZpbGVzdG9yZQpyYmRfZGVmYXVsdF9mZWF0dXJlcyA9IDMKZmF0YWwgc2lnbmFsIGhhbmRsZXJzID0gZmFsc2UKbW9uX2FsbG93X3Bvb2xfZGVsZXRlID0gdHJ1ZQo=\"")
	packr.PackJSONBytes("../../templates", "ceph/client-admin.keyring", "\"W2NsaWVudC5hZG1pbl0KICAgICAgICBrZXkgPSB7ey5LZXkgfCB1bmVzY2FwZX19CiAgICAgICAgYXVpZCA9IDAKICAgICAgICBjYXBzIG1kcyA9ICJhbGxvdyIKICAgICAgICBjYXBzIG1nciA9ICJhbGxvdyAqIgogICAgICAgIGNhcHMgbW9uID0gImFsbG93ICoiCiAgICAgICAgY2FwcyBvc2QgPSAiYWxsb3cgKiIK\"")
	packr.PackJSONBytes("../../templates", "ceph/client.keyring", "\"W2NsaWVudC57ey5OYW1lfX1dCiAgICAgICAga2V5ID0ge3suS2V5IHwgdW5lc2NhcGV9fQogICAgICAgIGNhcHMgbW9uID0gImFsbG93IHByb2ZpbGUge3suTmFtZX19Igo=\"")
	packr.PackJSONBytes("../../templates", "ceph/monitor.keyring", "\"W21vbi5dCiAgICAgICAga2V5ID0ge3suTW9uaXRvcktleSB8IHVuZXNjYXBlfX0KICAgICAgICBjYXBzIG1vbiA9ICJhbGxvdyAqIgpbY2xpZW50LmFkbWluXQogICAgICAgIGtleSA9IHt7LkNsaWVudEFkbWluS2V5IHwgdW5lc2NhcGV9fQogICAgICAgIGF1aWQgPSAwCiAgICAgICAgY2FwcyBtZHMgPSAiYWxsb3ciCiAgICAgICAgY2FwcyBtZ3IgPSAiYWxsb3cgKiIKICAgICAgICBjYXBzIG1vbiA9ICJhbGxvdyAqIgogICAgICAgIGNhcHMgb3NkID0gImFsbG93ICoiCltjbGllbnQuYm9vdHN0cmFwLW1kc10KICAgICAgICBrZXkgPSB7ey5DbGllbnRCb290c3RyYXBNZXRhZGF0YVNlcnZlcktleSB8IHVuZXNjYXBlfX0KICAgICAgICBjYXBzIG1vbiA9ICJhbGxvdyBwcm9maWxlIGJvb3RzdHJhcC1tZHMiCltjbGllbnQuYm9vdHN0cmFwLW9zZF0KICAgICAgICBrZXkgPSB7ey5DbGllbnRCb290c3RyYXBPYmplY3RTdG9yYWdlS2V5IHwgdW5lc2NhcGV9fQogICAgICAgIGNhcHMgbW9uID0gImFsbG93IHByb2ZpbGUgYm9vdHN0cmFwLW9zZCIKW2NsaWVudC5ib290c3RyYXAtcmJkXQogICAgICAgIGtleSA9IHt7LkNsaWVudEJvb3RzdHJhcFJhZG9zQmxvY2tEZXZpY2VLZXkgfCB1bmVzY2FwZX19CiAgICAgICAgY2FwcyBtb24gPSAiYWxsb3cgcHJvZmlsZSBib290c3RyYXAtcmJkIgpbY2xpZW50LmJvb3RzdHJhcC1yZ3ddCiAgICAgICAga2V5ID0ge3suQ2xpZW50Qm9vdHN0cmFwUmFkb3NHYXRld2F5S2V5IHwgdW5lc2NhcGV9fQogICAgICAgIGNhcHMgbW9uID0gImFsbG93IHByb2ZpbGUgYm9vdHN0cmFwLXJndyIKW2NsaWVudC5rOHMtdGV3XQogICAgICAgIGtleSA9IHt7LkNsaWVudEs4U1RFV0tleSB8IHVuZXNjYXBlfX0KCQljYXBzIG1vbiA9ICJhbGxvdyByIgoJCWNhcHMgb3NkID0gImFsbG93IHJ3eCBwb29sPXt7LkNlcGhQb29sTmFtZX19Igo=\"")
	packr.PackJSONBytes("../../templates", "k8s/cri/containerd.toml", "\"dmVyc2lvbiA9IDIKcm9vdCA9ICJ7ey5Db250YWluZXJkUm9vdERpcmVjdG9yeX19IgpzdGF0ZSA9ICJ7ey5Db250YWluZXJkU3RhdGVEaXJlY3Rvcnl9fSIKcGx1Z2luX2RpciA9ICIiCmRpc2FibGVkX3BsdWdpbnMgPSBbXQpyZXF1aXJlZF9wbHVnaW5zID0gW10Kb29tX3Njb3JlID0gMAoKW2dycGNdCiAgYWRkcmVzcyA9ICJ7ey5Db250YWluZXJkU29ja319IgogIHRjcF9hZGRyZXNzID0gIiIKICB0Y3BfdGxzX2NlcnQgPSAiIgogIHRjcF90bHNfa2V5ID0gIiIKICB1aWQgPSAwCiAgZ2lkID0gMAogIG1heF9yZWN2X21lc3NhZ2Vfc2l6ZSA9IDE2Nzc3MjE2CiAgbWF4X3NlbmRfbWVzc2FnZV9zaXplID0gMTY3NzcyMTYKClt0dHJwY10KICBhZGRyZXNzID0gIiIKICB1aWQgPSAwCiAgZ2lkID0gMAoKW2RlYnVnXQogIGFkZHJlc3MgPSAiIgogIHVpZCA9IDAKICBnaWQgPSAwCiAgbGV2ZWwgPSAiIgoKW21ldHJpY3NdCiAgYWRkcmVzcyA9ICIiCiAgZ3JwY19oaXN0b2dyYW0gPSBmYWxzZQoKW2Nncm91cF0KICBwYXRoID0gIiIKClt0aW1lb3V0c10KICAiaW8uY29udGFpbmVyZC50aW1lb3V0LnNoaW0uY2xlYW51cCIgPSAiNXMiCiAgImlvLmNvbnRhaW5lcmQudGltZW91dC5zaGltLmxvYWQiID0gIjVzIgogICJpby5jb250YWluZXJkLnRpbWVvdXQuc2hpbS5zaHV0ZG93biIgPSAiM3MiCiAgImlvLmNvbnRhaW5lcmQudGltZW91dC50YXNrLnN0YXRlIiA9ICIycyIKCltwbHVnaW5zXQogIFtwbHVnaW5zLiJpby5jb250YWluZXJkLmdjLnYxLnNjaGVkdWxlciJdCiAgICBwYXVzZV90aHJlc2hvbGQgPSAwLjAyCiAgICBkZWxldGlvbl90aHJlc2hvbGQgPSAwCiAgICBtdXRhdGlvbl90aHJlc2hvbGQgPSAxMDAKICAgIHNjaGVkdWxlX2RlbGF5ID0gIjBzIgogICAgc3RhcnR1cF9kZWxheSA9ICIxMDBtcyIKICBbcGx1Z2lucy4iaW8uY29udGFpbmVyZC5ncnBjLnYxLmNyaSJdCiAgICBkaXNhYmxlX3RjcF9zZXJ2aWNlID0gdHJ1ZQogICAgc3RyZWFtX3NlcnZlcl9hZGRyZXNzID0gInt7LklQfX0iCiAgICBzdHJlYW1fc2VydmVyX3BvcnQgPSAiMCIKICAgIHN0cmVhbV9pZGxlX3RpbWVvdXQgPSAiNGgwbTBzIgogICAgZW5hYmxlX3NlbGludXggPSBmYWxzZQogICAgc2FuZGJveF9pbWFnZSA9ICJ7ey5QYXVzZUltYWdlfX0iCiAgICBzdGF0c19jb2xsZWN0X3BlcmlvZCA9IDEwCiAgICBzeXN0ZW1kX2Nncm91cCA9IGZhbHNlCiAgICBlbmFibGVfdGxzX3N0cmVhbWluZyA9IGZhbHNlCiAgICBtYXhfY29udGFpbmVyX2xvZ19saW5lX3NpemUgPSAxNjM4NAogICAgZGlzYWJsZV9jZ3JvdXAgPSBmYWxzZQogICAgZGlzYWJsZV9hcHBhcm1vciA9IGZhbHNlCiAgICByZXN0cmljdF9vb21fc2NvcmVfYWRqID0gZmFsc2UKICAgIG1heF9jb25jdXJyZW50X2Rvd25sb2FkcyA9IDMKICAgIGRpc2FibGVfcHJvY19tb3VudCA9IGZhbHNlCiAgICBbcGx1Z2lucy4iaW8uY29udGFpbmVyZC5ncnBjLnYxLmNyaSIuY29udGFpbmVyZF0KICAgICAgc25hcHNob3R0ZXIgPSAib3ZlcmxheWZzIgogICAgICBkZWZhdWx0X3J1bnRpbWVfbmFtZSA9ICJydW5jIgogICAgICBub19waXZvdCA9IGZhbHNlCiAgICAgIFtwbHVnaW5zLiJpby5jb250YWluZXJkLmdycGMudjEuY3JpIi5jb250YWluZXJkLnJ1bnRpbWVzXQogICAgICAgIFtwbHVnaW5zLiJpby5jb250YWluZXJkLmdycGMudjEuY3JpIi5jb250YWluZXJkLnJ1bnRpbWVzLnJ1bmNdCiAgICAgICAgICBydW50aW1lX3R5cGUgPSAiaW8uY29udGFpbmVyZC5ydW5jLnYyIgogICAgICAgICAgcnVudGltZV9lbmdpbmUgPSAiIgogICAgICAgICAgcnVudGltZV9yb290ID0gIiIKICAgICAgICAgIHByaXZpbGVnZWRfd2l0aG91dF9ob3N0X2RldmljZXMgPSBmYWxzZQogICAgICAgICAgW3BsdWdpbnMuImlvLmNvbnRhaW5lcmQuZ3JwYy52MS5jcmkiLmNvbnRhaW5lcmQucnVudGltZXMucnVuYy5vcHRpb25zXQoJCSAgICBCaW5hcnlOYW1lID0gInt7LkNSSUJpbmFyaWVzRGlyZWN0b3J5fX0vcnVuYyIKICAgIFtwbHVnaW5zLiJpby5jb250YWluZXJkLmdycGMudjEuY3JpIi5jbmldCiAgICAgIGJpbl9kaXIgPSAie3suQ05JQmluYXJpZXNEaXJlY3Rvcnl9fSIKICAgICAgY29uZl9kaXIgPSAie3suQ05JQ29uZmlnRGlyZWN0b3J5fX0iCiAgICAgIG1heF9jb25mX251bSA9IDEKICAgICAgY29uZl90ZW1wbGF0ZSA9ICIiCiAgICBbcGx1Z2lucy4iaW8uY29udGFpbmVyZC5ncnBjLnYxLmNyaSIucmVnaXN0cnldCiAgICAgIFtwbHVnaW5zLiJpby5jb250YWluZXJkLmdycGMudjEuY3JpIi5yZWdpc3RyeS5taXJyb3JzXQogICAgICAgIFtwbHVnaW5zLiJpby5jb250YWluZXJkLmdycGMudjEuY3JpIi5yZWdpc3RyeS5taXJyb3JzLiJkb2NrZXIuaW8iXQogICAgICAgICAgZW5kcG9pbnQgPSBbImh0dHBzOi8vcmVnaXN0cnktMS5kb2NrZXIuaW8iXQogICAgW3BsdWdpbnMuImlvLmNvbnRhaW5lcmQuZ3JwYy52MS5jcmkiLng1MDlfa2V5X3BhaXJfc3RyZWFtaW5nXQogICAgICB0bHNfY2VydF9maWxlID0gIiIKICAgICAgdGxzX2tleV9maWxlID0gIiIKICBbcGx1Z2lucy4iaW8uY29udGFpbmVyZC5pbnRlcm5hbC52MS5vcHQiXQogICAgcGF0aCA9ICIvb3B0L2NvbnRhaW5lcmQiCiAgW3BsdWdpbnMuImlvLmNvbnRhaW5lcmQuaW50ZXJuYWwudjEucmVzdGFydCJdCiAgICBpbnRlcnZhbCA9ICIxMHMiCiAgW3BsdWdpbnMuImlvLmNvbnRhaW5lcmQubWV0YWRhdGEudjEuYm9sdCJdCiAgICBjb250ZW50X3NoYXJpbmdfcG9saWN5ID0gInNoYXJlZCIKICBbcGx1Z2lucy4iaW8uY29udGFpbmVyZC5tb25pdG9yLnYxLmNncm91cHMiXQogICAgbm9fcHJvbWV0aGV1cyA9IGZhbHNlCiAgW3BsdWdpbnMuImlvLmNvbnRhaW5lcmQucnVudGltZS52MS5saW51eCJdCiAgICBzaGltID0gInt7LkNSSUJpbmFyaWVzRGlyZWN0b3J5fX0vY29udGFpbmVyZC1zaGltIgogICAgcnVudGltZSA9ICJ7ey5DUklCaW5hcmllc0RpcmVjdG9yeX19L3J1bmMiCiAgICBydW50aW1lX3Jvb3QgPSAiIgogICAgbm9fc2hpbSA9IGZhbHNlCiAgICBzaGltX2RlYnVnID0gZmFsc2UKICBbcGx1Z2lucy4iaW8uY29udGFpbmVyZC5ydW50aW1lLnYyLnRhc2siXQogICAgcGxhdGZvcm1zID0gWyJsaW51eC9hbWQ2NCJdCiAgW3BsdWdpbnMuImlvLmNvbnRhaW5lcmQuc2VydmljZS52MS5kaWZmLXNlcnZpY2UiXQogICAgZGVmYXVsdCA9IFsid2Fsa2luZyJdCiAgW3BsdWdpbnMuImlvLmNvbnRhaW5lcmQuc25hcHNob3R0ZXIudjEuZGV2bWFwcGVyIl0KICAgIHJvb3RfcGF0aCA9ICIiCiAgICBwb29sX25hbWUgPSAiIgogICAgYmFzZV9pbWFnZV9zaXplID0gIiIK\"")
	packr.PackJSONBytes("../../templates", "k8s/encryption-config.yaml", "\"YXBpVmVyc2lvbjogdjEKa2luZDogRW5jcnlwdGlvbkNvbmZpZwpyZXNvdXJjZXM6CiAgLSByZXNvdXJjZXM6CiAgICAgIC0gc2VjcmV0cwogICAgcHJvdmlkZXJzOgogICAgICAtIGFlc2NiYzoKICAgICAgICAgIGtleXM6CiAgICAgICAgICAgIC0gbmFtZToga2V5MQogICAgICAgICAgICAgIHNlY3JldDoge3suRW5jcnlwdGlvbktleSB8IHVuZXNjYXBlfX0KICAgICAgLSBpZGVudGl0eToge30K\"")
	packr.PackJSONBytes("../../templates", "k8s/kube-scheduler-configuration.yaml", "\"YXBpVmVyc2lvbjoga3ViZXNjaGVkdWxlci5jb25maWcuazhzLmlvL3YxYWxwaGExCmtpbmQ6IEt1YmVTY2hlZHVsZXJDb25maWd1cmF0aW9uCmNsaWVudENvbm5lY3Rpb246CiAga3ViZWNvbmZpZzogInt7Lkt1YmVDb25maWd9fSIKbGVhZGVyRWxlY3Rpb246CiAgbGVhZGVyRWxlY3Q6IHRydWUK\"")
	packr.PackJSONBytes("../../templates", "k8s/kubeconfig.yaml", "\"YXBpVmVyc2lvbjogdjEKa2luZDogQ29uZmlnCmNsdXN0ZXJzOgotIGNsdXN0ZXI6CiAgICBjZXJ0aWZpY2F0ZS1hdXRob3JpdHktZGF0YToge3suQ0FEYXRhfX0KICAgIHNlcnZlcjogaHR0cHM6Ly97ey5BUElTZXJ2ZXJ9fQogIG5hbWU6IGt1YmVybmV0ZXMtdGhlLWVhc2llci13YXkKdXNlcnM6Ci0gbmFtZToge3suTmFtZX19CiAgdXNlcjoKICAgIGNsaWVudC1jZXJ0aWZpY2F0ZS1kYXRhOiB7ey5DZXJ0aWZpY2F0ZURhdGF9fQogICAgY2xpZW50LWtleS1kYXRhOiB7ey5LZXlEYXRhfX0KY29udGV4dHM6Ci0gY29udGV4dDoKICAgIGNsdXN0ZXI6IGt1YmVybmV0ZXMtdGhlLWVhc2llci13YXkKICAgIHVzZXI6IHt7LlVzZXJ9fQogIG5hbWU6IGRlZmF1bHQKY3VycmVudC1jb250ZXh0OiBkZWZhdWx0Cg==\"")
	packr.PackJSONBytes("../../templates", "k8s/kubelet-configuration.yaml", "\"YXBpVmVyc2lvbjoga3ViZWxldC5jb25maWcuazhzLmlvL3YxYmV0YTEKa2luZDogS3ViZWxldENvbmZpZ3VyYXRpb24KYWxsb3dQcml2aWxlZ2VkOiB0cnVlCmF1dGhlbnRpY2F0aW9uOgogIGFub255bW91czoKICAgIGVuYWJsZWQ6IGZhbHNlCiAgd2ViaG9vazoKICAgIGVuYWJsZWQ6IHRydWUKICB4NTA5OgogICAgY2xpZW50Q0FGaWxlOiAie3suQ0F9fSIKYXV0aG9yaXphdGlvbjoKICBtb2RlOiBXZWJob29rCmNsdXN0ZXJEb21haW46ICJjbHVzdGVyLmxvY2FsIgpjbHVzdGVyRE5TOgogIC0gInt7LkNsdXN0ZXJETlNJUH19Igpwb2RDSURSOiAie3suUE9EQ0lEUn19IgpydW50aW1lUmVxdWVzdFRpbWVvdXQ6ICIxNW0iCnRsc0NlcnRGaWxlOiAie3suQ2VydGlmaWNhdGVGaWxlbmFtZX19Igp0bHNQcml2YXRlS2V5RmlsZTogInt7LktleUZpbGVuYW1lfX0iCnN0YXRpY1BvZFBhdGg6ICJ7ey5TdGF0aWNQb2RQYXRofX0iCmZhaWxTd2FwT246IGZhbHNlCmZlYXR1cmVHYXRlczogCiAgQ1NJQmxvY2tWb2x1bWU6IHRydWUKICBCbG9ja1ZvbHVtZTogdHJ1ZQogIFZvbHVtZVNuYXBzaG90RGF0YVNvdXJjZTogdHJ1ZQpyZXNvbHZDb25mOiAie3suUmVzb2x2Q29uZn19IgpyZWFkT25seVBvcnQ6IDEwMjU1Cm1heFBvZHM6IHt7Lk1heFBvZHN9fQo=\"")
	packr.PackJSONBytes("../../templates", "k8s/lb/gobetween.toml", "\"W3NlcnZlcnMua3ViZS1hcGlzZXJ2ZXJdCmJpbmQgPSAiMC4wLjAuMDp7eyAuTG9hZEJhbGFuY2VyUG9ydCB9fSIKcHJvdG9jb2wgPSAidGNwIiAKYmFsYW5jZSA9ICJyb3VuZHJvYmluIgoKbWF4X2Nvbm5lY3Rpb25zID0gMTAwMDAKY2xpZW50X2lkbGVfdGltZW91dCA9ICIxMG0iCmJhY2tlbmRfaWRsZV90aW1lb3V0ID0gIjEwbSIKYmFja2VuZF9jb25uZWN0aW9uX3RpbWVvdXQgPSAiMnMiCgpbc2VydmVycy5rdWJlLWFwaXNlcnZlci5kaXNjb3ZlcnldCmtpbmQgPSAic3RhdGljIgpzdGF0aWNfbGlzdCA9IFsge3sgLkt1YmVBUElTZXJ2ZXJzIHwgcXVvdGVkX3N0cmluZ19saXN0IH19IF0K\"")
	packr.PackJSONBytes("../../templates", "k8s/manifests/etcd.yaml", "\"YXBpVmVyc2lvbjogdjEKa2luZDogUG9kCm1ldGFkYXRhOgogIG5hbWVzcGFjZToga3ViZS1zeXN0ZW0KICBuYW1lOiBldGNkCnNwZWM6CiAgaG9zdE5ldHdvcms6IHRydWUKICBjb250YWluZXJzOgogIC0gbmFtZTogZXRjZAogICAgaW1hZ2U6IHt7LkV0Y2RJbWFnZX19CiAgICBjb21tYW5kOgogICAgLSBldGNkCiAgICAtIC0tYWR2ZXJ0aXNlLWNsaWVudC11cmxzPWh0dHBzOi8ve3suTm9kZUlQfX06MjM3OQogICAgLSAtLWNlcnQtZmlsZT17ey5QZW1LdWJlcm5ldGVzfX0KICAgIC0gLS1jbGllbnQtY2VydC1hdXRoCiAgICAtIC0tZGF0YS1kaXI9e3suRXRjZERhdGFEaXJlY3Rvcnl9fQogICAgLSAtLWluaXRpYWwtYWR2ZXJ0aXNlLXBlZXItdXJscz1odHRwczovL3t7Lk5vZGVJUH19OjIzODAKICAgIC0gLS1pbml0aWFsLWNsdXN0ZXI9e3suRXRjZENsdXN0ZXJ9fQogICAgLSAtLWluaXRpYWwtY2x1c3Rlci1zdGF0ZT1uZXcKICAgIC0gLS1pbml0aWFsLWNsdXN0ZXItdG9rZW49ZXRjZC1jbHVzdGVyCiAgICAtIC0ta2V5LWZpbGU9e3suUGVtS3ViZXJuZXRlc0tleX19CiAgICAtIC0tbGlzdGVuLWNsaWVudC11cmxzPWh0dHBzOi8ve3suTm9kZUlQfX06MjM3OQogICAgLSAtLWxpc3Rlbi1wZWVyLXVybHM9aHR0cHM6Ly97ey5Ob2RlSVB9fToyMzgwCiAgICAtIC0tbmFtZT17ey5OYW1lfX0KICAgIC0gLS1wZWVyLWNlcnQtZmlsZT17ey5QZW1LdWJlcm5ldGVzfX0KICAgIC0gLS1wZWVyLWNsaWVudC1jZXJ0LWF1dGgKICAgIC0gLS1wZWVyLWtleS1maWxlPXt7LlBlbUt1YmVybmV0ZXNLZXl9fQogICAgLSAtLXBlZXItdHJ1c3RlZC1jYS1maWxlPXt7LlBlbUNBfX0KICAgIC0gLS10cnVzdGVkLWNhLWZpbGU9e3suUGVtQ0F9fQogICAgcmVhZGluZXNzUHJvYmU6CiAgICAgIGV4ZWM6CiAgICAgICAgY29tbWFuZDoKICAgICAgICAtIC9iaW4vc2gKICAgICAgICAtIC1lYwogICAgICAgIC0gRVRDRENUTF9BUEk9MyBldGNkY3RsIAogICAgICAgICAgLS1lbmRwb2ludHM9aHR0cHM6Ly97ey5Ob2RlSVB9fToyMzc5IAogICAgICAgICAgLS1jYWNlcnQ9e3suUGVtQ0F9fQogICAgICAgICAgLS1jZXJ0PXt7LlBlbUt1YmVybmV0ZXN9fQogICAgICAgICAgLS1rZXk9e3suUGVtS3ViZXJuZXRlc0tleX19CiAgICAgICAgICBlbmRwb2ludCBoZWFsdGgKICAgICAgaW5pdGlhbERlbGF5U2Vjb25kczogMQogICAgICB0aW1lb3V0U2Vjb25kczogNQogICAgICBmYWlsdXJlVGhyZXNob2xkOiA1CiAgICBsaXZlbmVzc1Byb2JlOgogICAgICBleGVjOgogICAgICAgIGNvbW1hbmQ6CiAgICAgICAgLSAvYmluL3NoCiAgICAgICAgLSAtZWMKICAgICAgICAtIEVUQ0RDVExfQVBJPTMgZXRjZGN0bCAKICAgICAgICAgIC0tZW5kcG9pbnRzPWh0dHBzOi8ve3suTm9kZUlQfX06MjM3OSAKICAgICAgICAgIC0tY2FjZXJ0PXt7LlBlbUNBfX0KICAgICAgICAgIC0tY2VydD17ey5QZW1LdWJlcm5ldGVzfX0KICAgICAgICAgIC0ta2V5PXt7LlBlbUt1YmVybmV0ZXNLZXl9fQogICAgICAgICAgZW5kcG9pbnQgaGVhbHRoCiAgICAgIGluaXRpYWxEZWxheVNlY29uZHM6IDEwCiAgICAgIHRpbWVvdXRTZWNvbmRzOiAxMAogICAgICBmYWlsdXJlVGhyZXNob2xkOiA1CiAgICB2b2x1bWVNb3VudHM6CiAgICAtIG5hbWU6IGV0Y2QtZGF0YS1kaXJlY3RvcnkKICAgICAgbW91bnRQYXRoOiB7ey5FdGNkRGF0YURpcmVjdG9yeX19CiAgICAtIG5hbWU6IHBlbS1jYQogICAgICBtb3VudFBhdGg6IHt7LlBlbUNBfX0KICAgICAgcmVhZE9ubHk6IHRydWUKICAgIC0gbmFtZTogcGVtLWt1YmVybmV0ZXMKICAgICAgbW91bnRQYXRoOiB7ey5QZW1LdWJlcm5ldGVzfX0KICAgICAgcmVhZE9ubHk6IHRydWUKICAgIC0gbmFtZTogcGVtLWt1YmVybmV0ZXMta2V5CiAgICAgIG1vdW50UGF0aDoge3suUGVtS3ViZXJuZXRlc0tleX19CiAgICAgIHJlYWRPbmx5OiB0cnVlCiAgdm9sdW1lczoKICAtIG5hbWU6IGV0Y2QtZGF0YS1kaXJlY3RvcnkKICAgIGhvc3RQYXRoOgogICAgICB0eXBlOiBEaXJlY3RvcnlPckNyZWF0ZQogICAgICBwYXRoOiB7ey5FdGNkRGF0YURpcmVjdG9yeX19CiAgLSBuYW1lOiBwZW0tY2EKICAgIGhvc3RQYXRoOgogICAgICB0eXBlOiBGaWxlCiAgICAgIHBhdGg6IHt7LlBlbUNBfX0KICAtIG5hbWU6IHBlbS1rdWJlcm5ldGVzCiAgICBob3N0UGF0aDoKICAgICAgdHlwZTogRmlsZQogICAgICBwYXRoOiB7ey5QZW1LdWJlcm5ldGVzfX0KICAtIG5hbWU6IHBlbS1rdWJlcm5ldGVzLWtleQogICAgaG9zdFBhdGg6CiAgICAgIHR5cGU6IEZpbGUKICAgICAgcGF0aDoge3suUGVtS3ViZXJuZXRlc0tleX19Cg==\"")
	packr.PackJSONBytes("../../templates", "k8s/manifests/gobetween.yaml", "\"YXBpVmVyc2lvbjogdjEKa2luZDogUG9kCm1ldGFkYXRhOgogIG5hbWVzcGFjZToga3ViZS1zeXN0ZW0KICBuYW1lOiBnb2JldHdlZW4Kc3BlYzoKICBob3N0TmV0d29yazogdHJ1ZQogIGNvbnRhaW5lcnM6CiAgLSBuYW1lOiBnb2JldHdlZW4KICAgIGltYWdlOiB7ey5Hb2JldHdlZW5JbWFnZX19CiAgICBjb21tYW5kOgogICAgLSAvdXNyL2Jpbi9nb2JldHdlZW4KICAgIC0gLWMKICAgIC0ge3suQ29uZmlnfX0KICAgIHJlc291cmNlczoKICAgICAgcmVxdWVzdHM6CiAgICAgICAgY3B1OiAxMDBtCiAgICB2b2x1bWVNb3VudHM6CiAgICAtIG5hbWU6IGNvbmZpZwogICAgICBtb3VudFBhdGg6IHt7LkNvbmZpZ319CiAgICAgIHJlYWRPbmx5OiB0cnVlCiAgdm9sdW1lczoKICAtIG5hbWU6IGNvbmZpZwogICAgaG9zdFBhdGg6CiAgICAgIHR5cGU6IEZpbGUKICAgICAgcGF0aDoge3suQ29uZmlnfX0K\"")
	packr.PackJSONBytes("../../templates", "k8s/manifests/kube-apiserver.yaml", "\"YXBpVmVyc2lvbjogdjEKa2luZDogUG9kCm1ldGFkYXRhOgogIG5hbWVzcGFjZToga3ViZS1zeXN0ZW0KICBuYW1lOiBrdWJlLWFwaXNlcnZlcgpzcGVjOgogIGhvc3ROZXR3b3JrOiB0cnVlCiAgY29udGFpbmVyczoKICAtIG5hbWU6IGt1YmUtYXBpc2VydmVyCiAgICBpbWFnZToge3suS3ViZXJuZXRlc0ltYWdlfX0KICAgIGNvbW1hbmQ6CiAgICAtIC9oeXBlcmt1YmUKICAgIC0ga3ViZS1hcGlzZXJ2ZXIKICAgIC0gLS1hZHZlcnRpc2UtYWRkcmVzcz17ey5Ob2RlSVB9fQogICAgLSAtLWFsbG93LXByaXZpbGVnZWQ9dHJ1ZQogICAgLSAtLWFwaXNlcnZlci1jb3VudD17ey5Db250cm9sbGVyc0NvdW50fX0KICAgIC0gLS1hdWRpdC1sb2ctbWF4YWdlPTMwCiAgICAtIC0tYXVkaXQtbG9nLW1heGJhY2t1cD0zCiAgICAtIC0tYXVkaXQtbG9nLW1heHNpemU9MTAwCiAgICAtIC0tYXVkaXQtbG9nLXBhdGg9e3suQXVkaXRMb2d9fQogICAgLSAtLWF1dGhvcml6YXRpb24tbW9kZT1Ob2RlLFJCQUMKICAgIC0gLS1iaW5kLWFkZHJlc3M9MC4wLjAuMAogICAgLSAtLWNsaWVudC1jYS1maWxlPXt7LlBlbUNBfX0KICAgIC0gLS1lbmFibGUtYWRtaXNzaW9uLXBsdWdpbnM9TmFtZXNwYWNlTGlmZWN5Y2xlLE5vZGVSZXN0cmljdGlvbixMaW1pdFJhbmdlcixTZXJ2aWNlQWNjb3VudCxEZWZhdWx0U3RvcmFnZUNsYXNzLFJlc291cmNlUXVvdGEKICAgIC0gLS1lbmFibGUtYWdncmVnYXRvci1yb3V0aW5nPXRydWUKICAgIC0gLS1lbmFibGUtc3dhZ2dlci11aT10cnVlCiAgICAtIC0tZXRjZC1jYWZpbGU9e3suUGVtQ0F9fQogICAgLSAtLWV0Y2QtY2VydGZpbGU9e3suUGVtS3ViZXJuZXRlc319CiAgICAtIC0tZXRjZC1rZXlmaWxlPXt7LlBlbUt1YmVybmV0ZXNLZXl9fQogICAgLSAtLWV0Y2Qtc2VydmVycz17ey5FdGNkU2VydmVyc319CiAgICAtIC0tZXZlbnQtdHRsPTFoCiAgICAtIC0tZW5jcnlwdGlvbi1wcm92aWRlci1jb25maWc9e3suRW5jcnlwdGlvbkNvbmZpZ319CiAgICAtIC0tZmVhdHVyZS1nYXRlcz1DU0lCbG9ja1ZvbHVtZT10cnVlLEJsb2NrVm9sdW1lPXRydWUsVm9sdW1lU25hcHNob3REYXRhU291cmNlPXRydWUKICAgIC0gLS1rdWJlbGV0LWNlcnRpZmljYXRlLWF1dGhvcml0eT17ey5QZW1DQX19CiAgICAtIC0ta3ViZWxldC1jbGllbnQtY2VydGlmaWNhdGU9e3suUGVtS3ViZXJuZXRlc319CiAgICAtIC0ta3ViZWxldC1jbGllbnQta2V5PXt7LlBlbUt1YmVybmV0ZXNLZXl9fQogICAgLSAtLWt1YmVsZXQtaHR0cHM9dHJ1ZQogICAgLSAtLXByb3h5LWNsaWVudC1jZXJ0LWZpbGU9e3suUGVtQWdncmVnYXRvcn19CiAgICAtIC0tcHJveHktY2xpZW50LWtleS1maWxlPXt7LlBlbUFnZ3JlZ2F0b3JLZXl9fQogICAgLSAtLXJlcXVlc3RoZWFkZXItYWxsb3dlZC1uYW1lcz1hZ2dyZWdhdG9yLGFkbWluLHN5c3RlbTprdWJlLWNvbnRyb2xsZXItbWFuYWdlcixzeXN0ZW06a3ViZS1jb250cm9sbGVyLW1hbmFnZXIsc3lzdGVtOmt1YmUtc2NoZWR1bGVyLHN5c3RlbTpub2RlOnNpbmdsZS1ub2RlCiAgICAtIC0tcmVxdWVzdGhlYWRlci1jbGllbnQtY2EtZmlsZT17ey5QZW1DQX19CiAgICAtIC0tcmVxdWVzdGhlYWRlci1leHRyYS1oZWFkZXJzLXByZWZpeD1YLVJlbW90ZS1FeHRyYS0KICAgIC0gLS1yZXF1ZXN0aGVhZGVyLWdyb3VwLWhlYWRlcnM9WC1SZW1vdGUtR3JvdXAKICAgIC0gLS1yZXF1ZXN0aGVhZGVyLXVzZXJuYW1lLWhlYWRlcnM9WC1SZW1vdGUtVXNlcgogICAgLSAtLXJ1bnRpbWUtY29uZmlnPWFwaS9hbGw9dHJ1ZQogICAgLSAtLXNlY3VyZS1wb3J0PXt7LkFQSVNlcnZlclBvcnR9fQogICAgLSAtLXNlcnZpY2UtYWNjb3VudC1rZXktZmlsZT17ey5QZW1TZXJ2aWNlQWNjb3VudH19CiAgICAtIC0tc2VydmljZS1jbHVzdGVyLWlwLXJhbmdlPXt7LkNsdXN0ZXJJUFJhbmdlfX0KICAgIC0gLS1zZXJ2aWNlLW5vZGUtcG9ydC1yYW5nZT0zMDAwMC0zMjc2NwogICAgLSAtLXRscy1jZXJ0LWZpbGU9e3suUGVtS3ViZXJuZXRlc319CiAgICAtIC0tdGxzLXByaXZhdGUta2V5LWZpbGU9e3suUGVtS3ViZXJuZXRlc0tleX19CiAgICBsaXZlbmVzc1Byb2JlOgogICAgICBmYWlsdXJlVGhyZXNob2xkOiA4CiAgICAgIGh0dHBHZXQ6CiAgICAgICAgc2NoZW1lOiBIVFRQUwogICAgICAgIGhvc3Q6IHt7Lk5vZGVJUH19CiAgICAgICAgcG9ydDogNjQ0MwogICAgICAgIHBhdGg6IC9oZWFsdGh6CiAgICAgIGluaXRpYWxEZWxheVNlY29uZHM6IDE1CiAgICAgIHRpbWVvdXRTZWNvbmRzOiAxNQogICAgcmVzb3VyY2VzOgogICAgICByZXF1ZXN0czoKICAgICAgICBjcHU6IDI1MG0KICAgIHZvbHVtZU1vdW50czoKICAgIC0gbmFtZTogcGVtLWNhCiAgICAgIG1vdW50UGF0aDoge3suUGVtQ0F9fQogICAgICByZWFkT25seTogdHJ1ZQogICAgLSBuYW1lOiBwZW0ta3ViZXJuZXRlcwogICAgICBtb3VudFBhdGg6IHt7LlBlbUt1YmVybmV0ZXN9fQogICAgICByZWFkT25seTogdHJ1ZQogICAgLSBuYW1lOiBwZW0ta3ViZXJuZXRlcy1rZXkKICAgICAgbW91bnRQYXRoOiB7ey5QZW1LdWJlcm5ldGVzS2V5fX0KICAgICAgcmVhZE9ubHk6IHRydWUKICAgIC0gbmFtZTogcGVtLWFnZ3JlZ2F0b3IKICAgICAgbW91bnRQYXRoOiB7ey5QZW1BZ2dyZWdhdG9yfX0KICAgICAgcmVhZE9ubHk6IHRydWUKICAgIC0gbmFtZTogcGVtLWFnZ3JlZ2F0b3Ita2V5CiAgICAgIG1vdW50UGF0aDoge3suUGVtQWdncmVnYXRvcktleX19CiAgICAgIHJlYWRPbmx5OiB0cnVlCiAgICAtIG5hbWU6IHBlbS1zZXJ2aWNlLWFjY291bnQKICAgICAgbW91bnRQYXRoOiB7ey5QZW1TZXJ2aWNlQWNjb3VudH19CiAgICAgIHJlYWRPbmx5OiB0cnVlCiAgICAtIG5hbWU6IGVuY3J5cHRpb24tY29uZmlnCiAgICAgIG1vdW50UGF0aDoge3suRW5jcnlwdGlvbkNvbmZpZ319CiAgICAgIHJlYWRPbmx5OiB0cnVlCiAgICAtIG5hbWU6IGF1ZGl0LWxvZwogICAgICBtb3VudFBhdGg6IHt7LkF1ZGl0TG9nfX0KICB2b2x1bWVzOgogIC0gbmFtZTogcGVtLWNhCiAgICBob3N0UGF0aDoKICAgICAgdHlwZTogRmlsZQogICAgICBwYXRoOiB7ey5QZW1DQX19CiAgLSBuYW1lOiBwZW0ta3ViZXJuZXRlcwogICAgaG9zdFBhdGg6CiAgICAgIHR5cGU6IEZpbGUKICAgICAgcGF0aDoge3suUGVtS3ViZXJuZXRlc319CiAgLSBuYW1lOiBwZW0ta3ViZXJuZXRlcy1rZXkKICAgIGhvc3RQYXRoOgogICAgICB0eXBlOiBGaWxlCiAgICAgIHBhdGg6IHt7LlBlbUt1YmVybmV0ZXNLZXl9fQogIC0gbmFtZTogcGVtLWFnZ3JlZ2F0b3IKICAgIGhvc3RQYXRoOgogICAgICB0eXBlOiBGaWxlCiAgICAgIHBhdGg6IHt7LlBlbUFnZ3JlZ2F0b3J9fQogIC0gbmFtZTogcGVtLWFnZ3JlZ2F0b3Ita2V5CiAgICBob3N0UGF0aDoKICAgICAgdHlwZTogRmlsZQogICAgICBwYXRoOiB7ey5QZW1BZ2dyZWdhdG9yS2V5fX0KICAtIG5hbWU6IHBlbS1zZXJ2aWNlLWFjY291bnQKICAgIGhvc3RQYXRoOgogICAgICB0eXBlOiBGaWxlCiAgICAgIHBhdGg6IHt7LlBlbVNlcnZpY2VBY2NvdW50fX0KICAtIG5hbWU6IGVuY3J5cHRpb24tY29uZmlnCiAgICBob3N0UGF0aDoKICAgICAgdHlwZTogRmlsZQogICAgICBwYXRoOiB7ey5FbmNyeXB0aW9uQ29uZmlnfX0KICAtIG5hbWU6IGF1ZGl0LWxvZwogICAgaG9zdFBhdGg6CiAgICAgIHR5cGU6IEZpbGVPckNyZWF0ZQogICAgICBwYXRoOiB7ey5BdWRpdExvZ319Cg==\"")
	packr.PackJSONBytes("../../templates", "k8s/manifests/kube-controller-manager.yaml", "\"YXBpVmVyc2lvbjogdjEKa2luZDogUG9kCm1ldGFkYXRhOgogIG5hbWVzcGFjZToga3ViZS1zeXN0ZW0KICBuYW1lOiBrdWJlLWNvbnRyb2xsZXItbWFuYWdlcgpzcGVjOgogIGhvc3ROZXR3b3JrOiB0cnVlCiAgY29udGFpbmVyczoKICAtIG5hbWU6IGt1YmUtY29udHJvbGxlci1tYW5hZ2VyCiAgICBpbWFnZToge3suS3ViZXJuZXRlc0ltYWdlfX0KICAgIGNvbW1hbmQ6CiAgICAtIC9oeXBlcmt1YmUKICAgIC0ga3ViZS1jb250cm9sbGVyLW1hbmFnZXIKICAgIC0gLS1iaW5kLWFkZHJlc3M9MC4wLjAuMAogICAgLSAtLWFsbG9jYXRlLW5vZGUtY2lkcnM9dHJ1ZQogICAgLSAtLWNsdXN0ZXItY2lkcj17ey5DbHVzdGVyQ0lEUn19CiAgICAtIC0tY2x1c3Rlci1uYW1lPWt1YmVybmV0ZXMKICAgIC0gLS1jbHVzdGVyLXNpZ25pbmctY2VydC1maWxlPXt7LlBlbUNBfX0KICAgIC0gLS1jbHVzdGVyLXNpZ25pbmcta2V5LWZpbGU9e3suUGVtQ0FLZXl9fQogICAgLSAtLWt1YmVjb25maWc9e3suS3ViZWNvbmZpZ319CiAgICAtIC0tbGVhZGVyLWVsZWN0PXRydWUKICAgIC0gLS1yb290LWNhLWZpbGU9e3suUGVtQ0F9fQogICAgLSAtLXNlcnZpY2UtYWNjb3VudC1wcml2YXRlLWtleS1maWxlPXt7LlBlbVNlcnZpY2VBY2NvdW50S2V5fX0KICAgIC0gLS1zZXJ2aWNlLWNsdXN0ZXItaXAtcmFuZ2U9e3suQ2x1c3RlcklQUmFuZ2V9fQogICAgLSAtLXVzZS1zZXJ2aWNlLWFjY291bnQtY3JlZGVudGlhbHM9dHJ1ZQogICAgbGl2ZW5lc3NQcm9iZToKICAgICAgZmFpbHVyZVRocmVzaG9sZDogOAogICAgICBodHRwR2V0OgogICAgICAgIHNjaGVtZTogSFRUUAogICAgICAgIGhvc3Q6IDEyNy4wLjAuMQogICAgICAgIHBvcnQ6IDEwMjUyCiAgICAgICAgcGF0aDogL2hlYWx0aHoKICAgICAgaW5pdGlhbERlbGF5U2Vjb25kczogMTUKICAgICAgdGltZW91dFNlY29uZHM6IDE1CiAgICByZXNvdXJjZXM6CiAgICAgIHJlcXVlc3RzOgogICAgICAgIGNwdTogMjAwbQogICAgdm9sdW1lTW91bnRzOgogICAgLSBuYW1lOiBwZW0tY2EKICAgICAgbW91bnRQYXRoOiB7ey5QZW1DQX19CiAgICAgIHJlYWRPbmx5OiB0cnVlCiAgICAtIG5hbWU6IHBlbS1jYS1rZXkKICAgICAgbW91bnRQYXRoOiB7ey5QZW1DQUtleX19CiAgICAgIHJlYWRPbmx5OiB0cnVlCiAgICAtIG5hbWU6IHBlbS1zZXJ2aWNlLWFjY291bnQta2V5CiAgICAgIG1vdW50UGF0aDoge3suUGVtU2VydmljZUFjY291bnRLZXl9fQogICAgICByZWFkT25seTogdHJ1ZQogICAgLSBuYW1lOiBrdWJlY29uZmlnCiAgICAgIG1vdW50UGF0aDoge3suS3ViZWNvbmZpZ319CiAgICAgIHJlYWRPbmx5OiB0cnVlCiAgdm9sdW1lczoKICAtIG5hbWU6IHBlbS1jYQogICAgaG9zdFBhdGg6CiAgICAgIHR5cGU6IEZpbGUKICAgICAgcGF0aDoge3suUGVtQ0F9fQogIC0gbmFtZTogcGVtLWNhLWtleQogICAgaG9zdFBhdGg6CiAgICAgIHR5cGU6IEZpbGUKICAgICAgcGF0aDoge3suUGVtQ0FLZXl9fQogIC0gbmFtZTogcGVtLXNlcnZpY2UtYWNjb3VudC1rZXkKICAgIGhvc3RQYXRoOgogICAgICB0eXBlOiBGaWxlCiAgICAgIHBhdGg6IHt7LlBlbVNlcnZpY2VBY2NvdW50S2V5fX0KICAtIG5hbWU6IGt1YmVjb25maWcKICAgIGhvc3RQYXRoOgogICAgICB0eXBlOiBGaWxlCiAgICAgIHBhdGg6IHt7Lkt1YmVjb25maWd9fQo=\"")
	packr.PackJSONBytes("../../templates", "k8s/manifests/kube-proxy.yaml", "\"YXBpVmVyc2lvbjogdjEKa2luZDogUG9kCm1ldGFkYXRhOgogIG5hbWVzcGFjZToga3ViZS1zeXN0ZW0KICBuYW1lOiBrdWJlLXByb3h5CnNwZWM6CiAgaG9zdE5ldHdvcms6IHRydWUKICBjb250YWluZXJzOgogIC0gbmFtZToga3ViZS1wcm94eQogICAgaW1hZ2U6IHt7Lkt1YmVybmV0ZXNJbWFnZX19CiAgICBjb21tYW5kOgogICAgLSAvaHlwZXJrdWJlCiAgICAtIGt1YmUtcHJveHkKICAgIC0gLS1jbHVzdGVyLWNpZHI9e3suQ2x1c3RlckNJRFJ9fQogICAgLSAtLWt1YmVjb25maWc9e3suS3ViZVByb3h5S3ViZWNvbmZpZ319CiAgICAtIC0tcHJveHktbW9kZT1pcHRhYmxlcwogICAgLSAtLW1ldHJpY3MtYmluZC1hZGRyZXNzPTAuMC4wLjAKICAgIC0gLS1tZXRyaWNzLXBvcnQ9MTAyNDkKICAgIHNlY3VyaXR5Q29udGV4dDoKICAgICAgICBwcml2aWxlZ2VkOiB0cnVlCiAgICBsaXZlbmVzc1Byb2JlOgogICAgICBmYWlsdXJlVGhyZXNob2xkOiA4CiAgICAgIGh0dHBHZXQ6CiAgICAgICAgc2NoZW1lOiBIVFRQCiAgICAgICAgaG9zdDogMTI3LjAuMC4xCiAgICAgICAgcG9ydDogMTAyNDkKICAgICAgICBwYXRoOiAvaGVhbHRoegogICAgICBpbml0aWFsRGVsYXlTZWNvbmRzOiAxNQogICAgICB0aW1lb3V0U2Vjb25kczogMTUKICAgIHJlc291cmNlczoKICAgICAgcmVxdWVzdHM6CiAgICAgICAgY3B1OiAyMDBtCiAgICB2b2x1bWVNb3VudHM6CiAgICAtIG5hbWU6IGt1YmUtcHJveHkta3ViZWNvbmZpZwogICAgICBtb3VudFBhdGg6IHt7Lkt1YmVQcm94eUt1YmVjb25maWd9fQogICAgICByZWFkT25seTogdHJ1ZQogIHZvbHVtZXM6CiAgLSBuYW1lOiBrdWJlLXByb3h5LWt1YmVjb25maWcKICAgIGhvc3RQYXRoOgogICAgICB0eXBlOiBGaWxlCiAgICAgIHBhdGg6IHt7Lkt1YmVQcm94eUt1YmVjb25maWd9fQo=\"")
	packr.PackJSONBytes("../../templates", "k8s/manifests/kube-scheduler.yaml", "\"YXBpVmVyc2lvbjogdjEKa2luZDogUG9kCm1ldGFkYXRhOgogIG5hbWVzcGFjZToga3ViZS1zeXN0ZW0KICBuYW1lOiBrdWJlLXNjaGVkdWxlcgpzcGVjOgogIGhvc3ROZXR3b3JrOiB0cnVlCiAgY29udGFpbmVyczoKICAtIG5hbWU6IGt1YmUtc2NoZWR1bGVyCiAgICBpbWFnZToge3suS3ViZXJuZXRlc0ltYWdlfX0KICAgIGNvbW1hbmQ6CiAgICAtIC9oeXBlcmt1YmUKICAgIC0ga3ViZS1zY2hlZHVsZXIKICAgIC0gLS1jb25maWc9e3suS3ViZVNjaGVkdWxlckNvbmZpZ319CiAgICBsaXZlbmVzc1Byb2JlOgogICAgICBmYWlsdXJlVGhyZXNob2xkOiA4CiAgICAgIGh0dHBHZXQ6CiAgICAgICAgc2NoZW1lOiBIVFRQCiAgICAgICAgaG9zdDogMTI3LjAuMC4xCiAgICAgICAgcG9ydDogMTAyNTEKICAgICAgICBwYXRoOiAvaGVhbHRoegogICAgICBpbml0aWFsRGVsYXlTZWNvbmRzOiAxNQogICAgICB0aW1lb3V0U2Vjb25kczogMTUKICAgIHJlc291cmNlczoKICAgICAgcmVxdWVzdHM6CiAgICAgICAgY3B1OiAxMDBtCiAgICB2b2x1bWVNb3VudHM6CiAgICAtIG5hbWU6IGt1YmUtc2NoZWR1bGVyLWNvbmZpZwogICAgICBtb3VudFBhdGg6IHt7Lkt1YmVTY2hlZHVsZXJDb25maWd9fQogICAgICByZWFkT25seTogdHJ1ZQogICAgLSBuYW1lOiBrdWJlLXNjaGVkdWxlci1rdWJlY29uZmlnCiAgICAgIG1vdW50UGF0aDoge3suS3ViZVNjaGVkdWxlckt1YmVjb25maWd9fQogICAgICByZWFkT25seTogdHJ1ZQogIHZvbHVtZXM6CiAgLSBuYW1lOiBrdWJlLXNjaGVkdWxlci1jb25maWcKICAgIGhvc3RQYXRoOgogICAgICB0eXBlOiBGaWxlCiAgICAgIHBhdGg6IHt7Lkt1YmVTY2hlZHVsZXJDb25maWd9fQogIC0gbmFtZToga3ViZS1zY2hlZHVsZXIta3ViZWNvbmZpZwogICAgaG9zdFBhdGg6CiAgICAgIHR5cGU6IEZpbGUKICAgICAgcGF0aDoge3suS3ViZVNjaGVkdWxlckt1YmVjb25maWd9fQo=\"")
	packr.PackJSONBytes("../../templates", "k8s/manifests/virtual-ip.yaml", "\"YXBpVmVyc2lvbjogdjEKa2luZDogUG9kCm1ldGFkYXRhOgogIG5hbWVzcGFjZToga3ViZS1zeXN0ZW0KICBuYW1lOiB7ey5UeXBlfX0tdmlydHVhbC1pcApzcGVjOgogIGhvc3ROZXR3b3JrOiB0cnVlCiAgY29udGFpbmVyczoKICAtIG5hbWU6IHZpcnR1YWwtaXAKICAgIGltYWdlOiB7ey5WaXJ0dWFsSVBJbWFnZX19CiAgICBjb21tYW5kOgogICAgLSAvdmlydHVhbC1pcAogICAgLSAtaWQgCiAgICAtIHt7LklEfX0KICAgIC0gLWJpbmQgCiAgICAtIHt7LkJpbmR9fQogICAgLSAtcGVlcnMgCiAgICAtIHt7LlBlZXJzfX0KICAgIC0gLWludGVyZmFjZSAKICAgIC0ge3suSW50ZXJmYWNlfX0KICAgIC0gLXZpcnR1YWwtaXAgCiAgICAtIHt7LlZpcnR1YWxJUH19CiAgICBzZWN1cml0eUNvbnRleHQ6CiAgICAgICAgcHJpdmlsZWdlZDogdHJ1ZQo=\"")
	packr.PackJSONBytes("../../templates", "k8s/service-account.yaml", "\"YXBpVmVyc2lvbjogdjEKa2luZDogU2VydmljZUFjY291bnQKbWV0YWRhdGE6CiAgbmFtZToge3suTmFtZX19CiAgbmFtZXNwYWNlOiB7ey5OYW1lc3BhY2V9fQotLS0KYXBpVmVyc2lvbjogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MQpraW5kOiBDbHVzdGVyUm9sZUJpbmRpbmcKbWV0YWRhdGE6CiAgbmFtZToge3suTmFtZX19CnJvbGVSZWY6CiAgYXBpR3JvdXA6IHJiYWMuYXV0aG9yaXphdGlvbi5rOHMuaW8KICBraW5kOiBDbHVzdGVyUm9sZQogIG5hbWU6IGNsdXN0ZXItYWRtaW4Kc3ViamVjdHM6Ci0ga2luZDogU2VydmljZUFjY291bnQKICBuYW1lOiB7ey5OYW1lfX0KICBuYW1lc3BhY2U6IHt7Lk5hbWVzcGFjZX19Cg==\"")
	packr.PackJSONBytes("../../templates", "k8s/setup/backup/velero.yaml", "\"\"")
	packr.PackJSONBytes("../../templates", "k8s/setup/dns/coredns.yaml", "\"YXBpVmVyc2lvbjogdjEKa2luZDogU2VydmljZUFjY291bnQKbWV0YWRhdGE6CiAgbmFtZTogY29yZWRucwogIG5hbWVzcGFjZToga3ViZS1zeXN0ZW0KLS0tCmFwaVZlcnNpb246IHJiYWMuYXV0aG9yaXphdGlvbi5rOHMuaW8vdjFiZXRhMQpraW5kOiBDbHVzdGVyUm9sZQptZXRhZGF0YToKICBsYWJlbHM6CiAgICBrdWJlcm5ldGVzLmlvL2Jvb3RzdHJhcHBpbmc6IHJiYWMtZGVmYXVsdHMKICBuYW1lOiBzeXN0ZW06Y29yZWRucwpydWxlczoKLSBhcGlHcm91cHM6CiAgLSAiIgogIHJlc291cmNlczoKICAtIGVuZHBvaW50cwogIC0gc2VydmljZXMKICAtIHBvZHMKICAtIG5hbWVzcGFjZXMKICB2ZXJiczoKICAtIGxpc3QKICAtIHdhdGNoCi0tLQphcGlWZXJzaW9uOiByYmFjLmF1dGhvcml6YXRpb24uazhzLmlvL3YxYmV0YTEKa2luZDogQ2x1c3RlclJvbGVCaW5kaW5nCm1ldGFkYXRhOgogIGFubm90YXRpb25zOgogICAgcmJhYy5hdXRob3JpemF0aW9uLmt1YmVybmV0ZXMuaW8vYXV0b3VwZGF0ZTogInRydWUiCiAgbGFiZWxzOgogICAga3ViZXJuZXRlcy5pby9ib290c3RyYXBwaW5nOiByYmFjLWRlZmF1bHRzCiAgbmFtZTogc3lzdGVtOmNvcmVkbnMKcm9sZVJlZjoKICBhcGlHcm91cDogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pbwogIGtpbmQ6IENsdXN0ZXJSb2xlCiAgbmFtZTogc3lzdGVtOmNvcmVkbnMKc3ViamVjdHM6Ci0ga2luZDogU2VydmljZUFjY291bnQKICBuYW1lOiBjb3JlZG5zCiAgbmFtZXNwYWNlOiBrdWJlLXN5c3RlbQotLS0KYXBpVmVyc2lvbjogdjEKa2luZDogQ29uZmlnTWFwCm1ldGFkYXRhOgogIG5hbWU6IGNvcmVkbnMKICBuYW1lc3BhY2U6IGt1YmUtc3lzdGVtCmRhdGE6CiAgQ29yZWZpbGU6IHwKICAgIC46NTMgewogICAgICAgIGVycm9ycwogICAgICAgIGhlYWx0aCB7CiAgICAgICAgICAgIGxhbWVkdWNrIDVzCiAgICAgICAgfQogICAgICAgIHJlYWR5CiAgICAgICAga3ViZXJuZXRlcyB7ey5DbHVzdGVyRG9tYWlufX0gaW4tYWRkci5hcnBhIGlwNi5hcnBhIHsKICAgICAgICAgIHBvZHMgaW5zZWN1cmUKICAgICAgICAgIGZhbGx0aHJvdWdoIGluLWFkZHIuYXJwYSBpcDYuYXJwYQogICAgICAgICAgdHRsIDMwCiAgICAgICAgfQogICAgICAgIHByb21ldGhldXMgOjkxNTMKICAgICAgICBmb3J3YXJkIC4gL2V0Yy9yZXNvbHYuY29uZgogICAgICAgIGNhY2hlIDMwCiAgICAgICAgbG9vcAogICAgICAgIHJlbG9hZAogICAgICAgIGxvYWRiYWxhbmNlCiAgICB9Ci0tLQphcGlWZXJzaW9uOiBhcHBzL3YxCmtpbmQ6IERlcGxveW1lbnQKbWV0YWRhdGE6CiAgbmFtZTogY29yZWRucwogIG5hbWVzcGFjZToga3ViZS1zeXN0ZW0KICBsYWJlbHM6CiAgICBrOHMtYXBwOiBrdWJlLWRucwogICAga3ViZXJuZXRlcy5pby9uYW1lOiAiQ29yZUROUyIKc3BlYzoKICByZXBsaWNhczogMgogIHN0cmF0ZWd5OgogICAgdHlwZTogUm9sbGluZ1VwZGF0ZQogICAgcm9sbGluZ1VwZGF0ZToKICAgICAgbWF4VW5hdmFpbGFibGU6IDEKICBzZWxlY3RvcjoKICAgIG1hdGNoTGFiZWxzOgogICAgICBrOHMtYXBwOiBrdWJlLWRucwogIHRlbXBsYXRlOgogICAgbWV0YWRhdGE6CiAgICAgIGxhYmVsczoKICAgICAgICBrOHMtYXBwOiBrdWJlLWRucwogICAgc3BlYzoKICAgICAgc2VydmljZUFjY291bnROYW1lOiBjb3JlZG5zCiAgICAgIHRvbGVyYXRpb25zOgogICAgICAgIC0ga2V5OiAiQ3JpdGljYWxBZGRvbnNPbmx5IgogICAgICAgICAgb3BlcmF0b3I6ICJFeGlzdHMiCiAgICAgIGNvbnRhaW5lcnM6CiAgICAgIC0gbmFtZTogY29yZWRucwogICAgICAgIGltYWdlOiB7ey5Db3JlRE5TSW1hZ2V9fQogICAgICAgIGFyZ3M6IFsgIi1jb25mIiwgIi9ldGMvY29yZWRucy9Db3JlZmlsZSIgXQogICAgICAgIHZvbHVtZU1vdW50czoKICAgICAgICAtIG5hbWU6IGNvbmZpZy12b2x1bWUKICAgICAgICAgIG1vdW50UGF0aDogL2V0Yy9jb3JlZG5zCiAgICAgICAgICByZWFkT25seTogdHJ1ZQogICAgICAgIHBvcnRzOgogICAgICAgIC0gY29udGFpbmVyUG9ydDogNTMKICAgICAgICAgIG5hbWU6IGRucwogICAgICAgICAgcHJvdG9jb2w6IFVEUAogICAgICAgIC0gY29udGFpbmVyUG9ydDogNTMKICAgICAgICAgIG5hbWU6IGRucy10Y3AKICAgICAgICAgIHByb3RvY29sOiBUQ1AKICAgICAgICAtIGNvbnRhaW5lclBvcnQ6IDkxNTMKICAgICAgICAgIG5hbWU6IG1ldHJpY3MKICAgICAgICAgIHByb3RvY29sOiBUQ1AKICAgICAgICBzZWN1cml0eUNvbnRleHQ6CiAgICAgICAgICBhbGxvd1ByaXZpbGVnZUVzY2FsYXRpb246IGZhbHNlCiAgICAgICAgICBjYXBhYmlsaXRpZXM6CiAgICAgICAgICAgIGFkZDoKICAgICAgICAgICAgLSBORVRfQklORF9TRVJWSUNFCiAgICAgICAgICAgIGRyb3A6CiAgICAgICAgICAgIC0gYWxsCiAgICAgICAgICByZWFkT25seVJvb3RGaWxlc3lzdGVtOiB0cnVlCiAgICAgICAgbGl2ZW5lc3NQcm9iZToKICAgICAgICAgIGh0dHBHZXQ6CiAgICAgICAgICAgIHBhdGg6IC9oZWFsdGgKICAgICAgICAgICAgcG9ydDogODA4MAogICAgICAgICAgICBzY2hlbWU6IEhUVFAKICAgICAgICAgIGluaXRpYWxEZWxheVNlY29uZHM6IDYwCiAgICAgICAgICB0aW1lb3V0U2Vjb25kczogNQogICAgICAgICAgc3VjY2Vzc1RocmVzaG9sZDogMQogICAgICAgICAgZmFpbHVyZVRocmVzaG9sZDogNQogICAgICBkbnNQb2xpY3k6IERlZmF1bHQKICAgICAgdm9sdW1lczoKICAgICAgICAtIG5hbWU6IGNvbmZpZy12b2x1bWUKICAgICAgICAgIGNvbmZpZ01hcDoKICAgICAgICAgICAgbmFtZTogY29yZWRucwogICAgICAgICAgICBpdGVtczoKICAgICAgICAgICAgLSBrZXk6IENvcmVmaWxlCiAgICAgICAgICAgICAgcGF0aDogQ29yZWZpbGUKLS0tCmFwaVZlcnNpb246IHYxCmtpbmQ6IFNlcnZpY2UKbWV0YWRhdGE6CiAgbmFtZToga3ViZS1kbnMKICBuYW1lc3BhY2U6IGt1YmUtc3lzdGVtCiAgYW5ub3RhdGlvbnM6CiAgICBwcm9tZXRoZXVzLmlvL3BvcnQ6ICI5MTUzIgogICAgcHJvbWV0aGV1cy5pby9zY3JhcGU6ICJ0cnVlIgogIGxhYmVsczoKICAgIGs4cy1hcHA6IGt1YmUtZG5zCiAgICBrdWJlcm5ldGVzLmlvL2NsdXN0ZXItc2VydmljZTogInRydWUiCiAgICBrdWJlcm5ldGVzLmlvL25hbWU6ICJDb3JlRE5TIgpzcGVjOgogIHNlbGVjdG9yOgogICAgazhzLWFwcDoga3ViZS1kbnMKICBjbHVzdGVySVA6IHt7LkNsdXN0ZXJETlNJUH19CiAgcG9ydHM6CiAgLSBuYW1lOiBkbnMKICAgIHBvcnQ6IDUzCiAgICBwcm90b2NvbDogVURQCiAgLSBuYW1lOiBkbnMtdGNwCiAgICBwb3J0OiA1MwogICAgcHJvdG9jb2w6IFRDUAo=\"")
	packr.PackJSONBytes("../../templates", "k8s/setup/ingress/letsencrypt-cluster-issuer.yaml", "\"YXBpVmVyc2lvbjogY2VydC1tYW5hZ2VyLmlvL3YxYWxwaGEyCmtpbmQ6IENsdXN0ZXJJc3N1ZXIKbWV0YWRhdGE6CiAgbmFtZTogbGV0c2VuY3J5cHQtcHJvZHVjdGlvbgpzcGVjOgogIGFjbWU6CiAgICBzZXJ2ZXI6IGh0dHBzOi8vYWNtZS12MDIuYXBpLmxldHNlbmNyeXB0Lm9yZy9kaXJlY3RvcnkKICAgIGVtYWlsOiAie3suRW1haWx9fSIKICAgIHNvbHZlcnM6CiAgICAtIHNlbGVjdG9yOiB7fQogICAgICBodHRwMDE6IAogICAgICAgIGluZ3Jlc3M6CiAgICAgICAgICBjbGFzczogbmdpbngKICAgIHByaXZhdGVLZXlTZWNyZXRSZWY6CiAgICAgIG5hbWU6IGxldHNlbmNyeXB0LXByb2R1Y3Rpb24K\"")
	packr.PackJSONBytes("../../templates", "k8s/setup/kubelet-setup.yaml", "\"YXBpVmVyc2lvbjogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MWJldGExCmtpbmQ6IENsdXN0ZXJSb2xlCm1ldGFkYXRhOgogIGFubm90YXRpb25zOgogICAgcmJhYy5hdXRob3JpemF0aW9uLmt1YmVybmV0ZXMuaW8vYXV0b3VwZGF0ZTogInRydWUiCiAgbGFiZWxzOgogICAga3ViZXJuZXRlcy5pby9ib290c3RyYXBwaW5nOiByYmFjLWRlZmF1bHRzCiAgbmFtZTogc3lzdGVtOmt1YmUtYXBpc2VydmVyLXRvLWt1YmVsZXQKcnVsZXM6CiAgLSBhcGlHcm91cHM6CiAgICAgIC0gIiIKICAgIHJlc291cmNlczoKICAgICAgLSBub2Rlcy9wcm94eQogICAgICAtIG5vZGVzL3N0YXRzCiAgICAgIC0gbm9kZXMvbG9nCiAgICAgIC0gbm9kZXMvc3BlYwogICAgICAtIG5vZGVzL21ldHJpY3MKICAgIHZlcmJzOgogICAgICAtICIqIgotLS0KYXBpVmVyc2lvbjogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MWJldGExCmtpbmQ6IENsdXN0ZXJSb2xlQmluZGluZwptZXRhZGF0YToKICBuYW1lOiBzeXN0ZW06a3ViZS1hcGlzZXJ2ZXIKICBuYW1lc3BhY2U6ICIiCnJvbGVSZWY6CiAgYXBpR3JvdXA6IHJiYWMuYXV0aG9yaXphdGlvbi5rOHMuaW8KICBraW5kOiBDbHVzdGVyUm9sZQogIG5hbWU6IHN5c3RlbTprdWJlLWFwaXNlcnZlci10by1rdWJlbGV0CnN1YmplY3RzOgogIC0gYXBpR3JvdXA6IHJiYWMuYXV0aG9yaXphdGlvbi5rOHMuaW8KICAgIGtpbmQ6IFVzZXIKICAgIG5hbWU6IGt1YmVybmV0ZXMK\"")
	packr.PackJSONBytes("../../templates", "k8s/setup/logging/efk.yaml", "\"\"")
	packr.PackJSONBytes("../../templates", "k8s/setup/management/kubernetes-dashboard.yaml", "\"LS0tCmFwaVZlcnNpb246IHYxCmtpbmQ6IFNlY3JldAptZXRhZGF0YToKICBuYW1lc3BhY2U6IGt1YmUtc3lzdGVtCiAgbmFtZToga3ViZXJuZXRlcy1kYXNoYm9hcmQKICBsYWJlbHM6CiAgICBrOHMtYXBwOiBrdWJlcm5ldGVzLWRhc2hib2FyZAp0eXBlOiBPcGFxdWUKLS0tCmFwaVZlcnNpb246IHYxCmtpbmQ6IFNlY3JldAptZXRhZGF0YToKICBuYW1lc3BhY2U6IGt1YmUtc3lzdGVtCiAgbmFtZToga3ViZXJuZXRlcy1kYXNoYm9hcmQtY2VydHMKICBsYWJlbHM6CiAgICBrOHMtYXBwOiBrdWJlcm5ldGVzLWRhc2hib2FyZAp0eXBlOiBPcGFxdWUKLS0tCmFwaVZlcnNpb246IHYxCmtpbmQ6IFNlY3JldAptZXRhZGF0YToKICBuYW1lc3BhY2U6IGt1YmUtc3lzdGVtCiAgbmFtZToga3ViZXJuZXRlcy1kYXNoYm9hcmQtY3NyZgogIGxhYmVsczoKICAgIGs4cy1hcHA6IGt1YmVybmV0ZXMtZGFzaGJvYXJkCnR5cGU6IE9wYXF1ZQpkYXRhOgogIGNzcmY6ICIiCi0tLQphcGlWZXJzaW9uOiB2MQpraW5kOiBTZWNyZXQKbWV0YWRhdGE6CiAgbmFtZXNwYWNlOiBrdWJlLXN5c3RlbQogIG5hbWU6IGt1YmVybmV0ZXMtZGFzaGJvYXJkLWtleS1ob2xkZXIKICBsYWJlbHM6CiAgICBrOHMtYXBwOiBrdWJlcm5ldGVzLWRhc2hib2FyZAp0eXBlOiBPcGFxdWUKLS0tCmFwaVZlcnNpb246IHYxCmtpbmQ6IFNlcnZpY2VBY2NvdW50Cm1ldGFkYXRhOgogIG5hbWVzcGFjZToga3ViZS1zeXN0ZW0KICBuYW1lOiBrdWJlcm5ldGVzLWRhc2hib2FyZAogIGxhYmVsczoKICAgIGFwcDoga3ViZXJuZXRlcy1kYXNoYm9hcmQKLS0tCmFwaVZlcnNpb246IHJiYWMuYXV0aG9yaXphdGlvbi5rOHMuaW8vdjFiZXRhMQpraW5kOiBSb2xlCm1ldGFkYXRhOgogIG5hbWVzcGFjZToga3ViZS1zeXN0ZW0KICBuYW1lOiBrdWJlcm5ldGVzLWRhc2hib2FyZAogIGxhYmVsczoKICAgIGFwcDoga3ViZXJuZXRlcy1kYXNoYm9hcmQKcnVsZXM6CiAgLSBhcGlHcm91cHM6IFsiIl0KICAgIHJlc291cmNlczogWyJzZWNyZXRzIl0KICAgIHJlc291cmNlTmFtZXM6IFsia3ViZXJuZXRlcy1kYXNoYm9hcmQta2V5LWhvbGRlciIsICJrdWJlcm5ldGVzLWRhc2hib2FyZC1jZXJ0cyIsICJrdWJlcm5ldGVzLWRhc2hib2FyZC1jc3JmIl0KICAgIHZlcmJzOiBbImdldCIsICJ1cGRhdGUiLCAiZGVsZXRlIl0KICAtIGFwaUdyb3VwczogWyIiXQogICAgcmVzb3VyY2VzOiBbImNvbmZpZ21hcHMiXQogICAgcmVzb3VyY2VOYW1lczogWyJrdWJlcm5ldGVzLWRhc2hib2FyZC1zZXR0aW5ncyJdCiAgICB2ZXJiczogWyJnZXQiLCAidXBkYXRlIl0KICAtIGFwaUdyb3VwczogWyIiXQogICAgcmVzb3VyY2VzOiBbInNlcnZpY2VzIl0KICAgIHJlc291cmNlTmFtZXM6IFsiaGVhcHN0ZXIiLCAiZGFzaGJvYXJkLW1ldHJpY3Mtc2NyYXBlciJdCiAgICB2ZXJiczogWyJwcm94eSJdCiAgLSBhcGlHcm91cHM6IFsiIl0KICAgIHJlc291cmNlczogWyJzZXJ2aWNlcy9wcm94eSJdCiAgICByZXNvdXJjZU5hbWVzOiBbImhlYXBzdGVyIiwgImh0dHA6aGVhcHN0ZXI6IiwgImh0dHBzOmhlYXBzdGVyOiIsICJkYXNoYm9hcmQtbWV0cmljcy1zY3JhcGVyIiwgImh0dHA6ZGFzaGJvYXJkLW1ldHJpY3Mtc2NyYXBlciJdCiAgICB2ZXJiczogWyJnZXQiXQotLS0Ka2luZDogQ2x1c3RlclJvbGUKYXBpVmVyc2lvbjogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MQptZXRhZGF0YToKICBuYW1lOiBrdWJlcm5ldGVzLWRhc2hib2FyZAogIGxhYmVsczoKICAgIGs4cy1hcHA6IGt1YmVybmV0ZXMtZGFzaGJvYXJkCnJ1bGVzOgogIC0gYXBpR3JvdXBzOiBbIm1ldHJpY3MuazhzLmlvIl0KICAgIHJlc291cmNlczogWyJwb2RzIiwgIm5vZGVzIl0KICAgIHZlcmJzOiBbImdldCIsICJsaXN0IiwgIndhdGNoIl0KLS0tCmFwaVZlcnNpb246IHJiYWMuYXV0aG9yaXphdGlvbi5rOHMuaW8vdjFiZXRhMQpraW5kOiBSb2xlQmluZGluZwptZXRhZGF0YToKICBuYW1lc3BhY2U6IGt1YmUtc3lzdGVtCiAgbmFtZToga3ViZXJuZXRlcy1kYXNoYm9hcmQKICBsYWJlbHM6CiAgICBhcHA6IGt1YmVybmV0ZXMtZGFzaGJvYXJkCnJvbGVSZWY6CiAgYXBpR3JvdXA6IHJiYWMuYXV0aG9yaXphdGlvbi5rOHMuaW8KICBraW5kOiBSb2xlCiAgbmFtZToga3ViZXJuZXRlcy1kYXNoYm9hcmQKc3ViamVjdHM6CiAgLSBraW5kOiBTZXJ2aWNlQWNjb3VudAogICAgbmFtZXNwYWNlOiBrdWJlLXN5c3RlbQogICAgbmFtZToga3ViZXJuZXRlcy1kYXNoYm9hcmQKLS0tCmFwaVZlcnNpb246IHJiYWMuYXV0aG9yaXphdGlvbi5rOHMuaW8vdjEKa2luZDogQ2x1c3RlclJvbGVCaW5kaW5nCm1ldGFkYXRhOgogIG5hbWVzcGFjZToga3ViZS1zeXN0ZW0KICBuYW1lOiBrdWJlcm5ldGVzLWRhc2hib2FyZApyb2xlUmVmOgogIGFwaUdyb3VwOiByYmFjLmF1dGhvcml6YXRpb24uazhzLmlvCiAga2luZDogQ2x1c3RlclJvbGUKICBuYW1lOiBrdWJlcm5ldGVzLWRhc2hib2FyZApzdWJqZWN0czoKICAtIGtpbmQ6IFNlcnZpY2VBY2NvdW50CiAgICBuYW1lc3BhY2U6IGt1YmUtc3lzdGVtCiAgICBuYW1lOiBrdWJlcm5ldGVzLWRhc2hib2FyZAotLS0KYXBpVmVyc2lvbjogdjEKa2luZDogU2VydmljZQptZXRhZGF0YToKICBuYW1lc3BhY2U6IGt1YmUtc3lzdGVtCiAgbmFtZToga3ViZXJuZXRlcy1kYXNoYm9hcmQKICBsYWJlbHM6CiAgICBhcHA6IGt1YmVybmV0ZXMtZGFzaGJvYXJkCnNwZWM6CiAgdHlwZTogTm9kZVBvcnQKICBwb3J0czoKICAtIHBvcnQ6IDQ0MwogICAgdGFyZ2V0UG9ydDogaHR0cHMKICAgIG5vZGVQb3J0OiB7ey5LdWJlcm5ldGVzRGFzaGJvYXJkUG9ydH19CiAgc2VsZWN0b3I6CiAgICBhcHA6IGt1YmVybmV0ZXMtZGFzaGJvYXJkCi0tLQphcGlWZXJzaW9uOiBhcHBzL3YxCmtpbmQ6IERlcGxveW1lbnQKbWV0YWRhdGE6CiAgbmFtZXNwYWNlOiBrdWJlLXN5c3RlbQogIG5hbWU6IGt1YmVybmV0ZXMtZGFzaGJvYXJkCiAgbGFiZWxzOgogICAgYXBwOiBrdWJlcm5ldGVzLWRhc2hib2FyZApzcGVjOgogIHNlbGVjdG9yOgogICAgbWF0Y2hMYWJlbHM6CiAgICAgIGFwcDoga3ViZXJuZXRlcy1kYXNoYm9hcmQKICByZXBsaWNhczogMQogIHN0cmF0ZWd5OgogICAgcm9sbGluZ1VwZGF0ZToKICAgICAgbWF4U3VyZ2U6IDAKICAgICAgbWF4VW5hdmFpbGFibGU6IDEKICAgIHR5cGU6IFJvbGxpbmdVcGRhdGUKICB0ZW1wbGF0ZToKICAgIG1ldGFkYXRhOgogICAgICBsYWJlbHM6CiAgICAgICAgYXBwOiBrdWJlcm5ldGVzLWRhc2hib2FyZAogICAgc3BlYzoKICAgICAgc2VydmljZUFjY291bnROYW1lOiBrdWJlcm5ldGVzLWRhc2hib2FyZAogICAgICBjb250YWluZXJzOgogICAgICAtIG5hbWU6IGt1YmVybmV0ZXMtZGFzaGJvYXJkCiAgICAgICAgaW1hZ2U6ICJ7ey5LdWJlcm5ldGVzRGFzaGJvYXJkSW1hZ2V9fSIKICAgICAgICBhcmdzOgogICAgICAgICAgLSAtLWF1dG8tZ2VuZXJhdGUtY2VydGlmaWNhdGVzCiAgICAgICAgcG9ydHM6CiAgICAgICAgLSBuYW1lOiBodHRwcwogICAgICAgICAgY29udGFpbmVyUG9ydDogODQ0MwogICAgICAgICAgcHJvdG9jb2w6IFRDUAogICAgICAgIHZvbHVtZU1vdW50czoKICAgICAgICAtIG5hbWU6IGt1YmVybmV0ZXMtZGFzaGJvYXJkLWNlcnRzCiAgICAgICAgICBtb3VudFBhdGg6IC9jZXJ0cwogICAgICAgIC0gbW91bnRQYXRoOiAvdG1wCiAgICAgICAgICBuYW1lOiB0bXAtdm9sdW1lCiAgICAgICAgbGl2ZW5lc3NQcm9iZToKICAgICAgICAgIGh0dHBHZXQ6CiAgICAgICAgICAgIHNjaGVtZTogSFRUUFMKICAgICAgICAgICAgcGF0aDogLwogICAgICAgICAgICBwb3J0OiA4NDQzCiAgICAgICAgICBpbml0aWFsRGVsYXlTZWNvbmRzOiAzMAogICAgICAgICAgdGltZW91dFNlY29uZHM6IDMwCiAgICAgICAgcmVzb3VyY2VzOgogICAgICAgICAgbGltaXRzOgogICAgICAgICAgICBjcHU6IDEwMG0KICAgICAgICAgICAgbWVtb3J5OiA1ME1pCiAgICAgICAgICByZXF1ZXN0czoKICAgICAgICAgICAgY3B1OiAxMDBtCiAgICAgICAgICAgIG1lbW9yeTogNTBNaQogICAgICB2b2x1bWVzOgogICAgICAtIG5hbWU6IGt1YmVybmV0ZXMtZGFzaGJvYXJkLWNlcnRzCiAgICAgICAgc2VjcmV0OgogICAgICAgICAgc2VjcmV0TmFtZToga3ViZXJuZXRlcy1kYXNoYm9hcmQKICAgICAgLSBuYW1lOiB0bXAtdm9sdW1lCiAgICAgICAgZW1wdHlEaXI6IHt9Ci0tLQphcGlWZXJzaW9uOiB2MQpraW5kOiBDb25maWdNYXAKbWV0YWRhdGE6CiAgbmFtZXNwYWNlOiBrdWJlLXN5c3RlbQogIG5hbWU6IGt1YmVybmV0ZXMtZGFzaGJvYXJkLXNldHRpbmdzCmRhdGE6CiAgX2dsb2JhbDogJ3siY2x1c3Rlck5hbWUiOiJ7ey5DbHVzdGVyTmFtZX19IiwiaXRlbXNQZXJQYWdlIjo1MCwiYXV0b1JlZnJlc2hUaW1lSW50ZXJ2YWwiOjV9JwotLS0Ka2luZDogU2VydmljZQphcGlWZXJzaW9uOiB2MQptZXRhZGF0YToKICBuYW1lc3BhY2U6IGt1YmUtc3lzdGVtCiAgbmFtZTogZGFzaGJvYXJkLW1ldHJpY3Mtc2NyYXBlcgogIGxhYmVsczoKICAgIGs4cy1hcHA6IGRhc2hib2FyZC1tZXRyaWNzLXNjcmFwZXIKc3BlYzoKICBwb3J0czoKICAgIC0gcG9ydDogODAwMAogICAgICB0YXJnZXRQb3J0OiA4MDAwCiAgc2VsZWN0b3I6CiAgICBrOHMtYXBwOiBkYXNoYm9hcmQtbWV0cmljcy1zY3JhcGVyCi0tLQpraW5kOiBEZXBsb3ltZW50CmFwaVZlcnNpb246IGFwcHMvdjEKbWV0YWRhdGE6CiAgbmFtZXNwYWNlOiBrdWJlLXN5c3RlbQogIG5hbWU6IGRhc2hib2FyZC1tZXRyaWNzLXNjcmFwZXIKICBsYWJlbHM6CiAgICBrOHMtYXBwOiBkYXNoYm9hcmQtbWV0cmljcy1zY3JhcGVyCnNwZWM6CiAgcmVwbGljYXM6IDEKICByZXZpc2lvbkhpc3RvcnlMaW1pdDogMTAKICBzZWxlY3RvcjoKICAgIG1hdGNoTGFiZWxzOgogICAgICBrOHMtYXBwOiBkYXNoYm9hcmQtbWV0cmljcy1zY3JhcGVyCiAgdGVtcGxhdGU6CiAgICBtZXRhZGF0YToKICAgICAgbGFiZWxzOgogICAgICAgIGs4cy1hcHA6IGRhc2hib2FyZC1tZXRyaWNzLXNjcmFwZXIKICAgIHNwZWM6CiAgICAgIGNvbnRhaW5lcnM6CiAgICAgICAgLSBuYW1lOiBkYXNoYm9hcmQtbWV0cmljcy1zY3JhcGVyCiAgICAgICAgICBpbWFnZToge3sgLk1ldHJpY3NTY3JhcGVySW1hZ2UgfX0KICAgICAgICAgIHBvcnRzOgogICAgICAgICAgICAtIGNvbnRhaW5lclBvcnQ6IDgwMDAKICAgICAgICAgICAgICBwcm90b2NvbDogVENQCiAgICAgICAgICBsaXZlbmVzc1Byb2JlOgogICAgICAgICAgICBodHRwR2V0OgogICAgICAgICAgICAgIHNjaGVtZTogSFRUUAogICAgICAgICAgICAgIHBhdGg6IC8KICAgICAgICAgICAgICBwb3J0OiA4MDAwCiAgICAgICAgICAgIGluaXRpYWxEZWxheVNlY29uZHM6IDMwCiAgICAgICAgICAgIHRpbWVvdXRTZWNvbmRzOiAzMAogICAgICAgICAgdm9sdW1lTW91bnRzOgogICAgICAgICAgLSBtb3VudFBhdGg6IC90bXAKICAgICAgICAgICAgbmFtZTogdG1wLXZvbHVtZQogICAgICBzZXJ2aWNlQWNjb3VudE5hbWU6IGt1YmVybmV0ZXMtZGFzaGJvYXJkCiAgICAgIHZvbHVtZXM6CiAgICAgICAgLSBuYW1lOiB0bXAtdm9sdW1lCiAgICAgICAgICBlbXB0eURpcjoge30K\"")
	packr.PackJSONBytes("../../templates", "k8s/setup/miscellaneous/wordpress.yaml", "\"YXBpVmVyc2lvbjogdjEKa2luZDogTmFtZXNwYWNlCm1ldGFkYXRhOgogICAgbmFtZTogc2hvd2Nhc2UKLS0tCmFwaVZlcnNpb246IHYxCmtpbmQ6IFBlcnNpc3RlbnRWb2x1bWVDbGFpbQptZXRhZGF0YToKICBuYW1lOiBteXNxbC1wdi1jbGFpbQogIG5hbWVzcGFjZTogc2hvd2Nhc2UKICBsYWJlbHM6CiAgICBhcHA6IHdvcmRwcmVzcwpzcGVjOgogIGFjY2Vzc01vZGVzOgogIC0gUmVhZFdyaXRlT25jZQogIHJlc291cmNlczoKICAgIHJlcXVlc3RzOgogICAgICBzdG9yYWdlOiAyR2kKLS0tCmFwaVZlcnNpb246IHYxCmtpbmQ6IFBlcnNpc3RlbnRWb2x1bWVDbGFpbQptZXRhZGF0YToKICBuYW1lOiB3b3JkcHJlc3MtcHYtY2xhaW0KICBuYW1lc3BhY2U6IHNob3djYXNlCiAgbGFiZWxzOgogICAgYXBwOiB3b3JkcHJlc3MKc3BlYzoKICBhY2Nlc3NNb2RlczoKICAtIFJlYWRXcml0ZU9uY2UKICByZXNvdXJjZXM6CiAgICByZXF1ZXN0czoKICAgICAgc3RvcmFnZTogMkdpCi0tLQphcGlWZXJzaW9uOiBhcHBzL3YxCmtpbmQ6IERlcGxveW1lbnQKbWV0YWRhdGE6CiAgbmFtZTogbXlzcWwKICBuYW1lc3BhY2U6IHNob3djYXNlCiAgbGFiZWxzOgogICAgYXBwOiB3b3JkcHJlc3MKc3BlYzoKICBzZWxlY3RvcjoKICAgIG1hdGNoTGFiZWxzOgogICAgICBhcHA6IHdvcmRwcmVzcwogICAgICB0aWVyOiBteXNxbAogIHN0cmF0ZWd5OgogICAgdHlwZTogUmVjcmVhdGUKICB0ZW1wbGF0ZToKICAgIG1ldGFkYXRhOgogICAgICBsYWJlbHM6CiAgICAgICAgYXBwOiB3b3JkcHJlc3MKICAgICAgICB0aWVyOiBteXNxbAogICAgc3BlYzoKICAgICAgY29udGFpbmVyczoKICAgICAgLSBpbWFnZToge3suTXlTUUxJbWFnZX19CiAgICAgICAgbmFtZTogbXlzcWwKICAgICAgICBlbnY6CiAgICAgICAgLSBuYW1lOiBNWVNRTF9ST09UX1BBU1NXT1JECiAgICAgICAgICB2YWx1ZTogY2hhbmdlbWUKICAgICAgICBwb3J0czoKICAgICAgICAtIGNvbnRhaW5lclBvcnQ6IDMzMDYKICAgICAgICAgIG5hbWU6IG15c3FsCiAgICAgICAgdm9sdW1lTW91bnRzOgogICAgICAgIC0gbmFtZTogbXlzcWwtcGVyc2lzdGVudC1zdG9yYWdlCiAgICAgICAgICBtb3VudFBhdGg6IC92YXIvbGliL215c3FsCiAgICAgIHZvbHVtZXM6CiAgICAgIC0gbmFtZTogbXlzcWwtcGVyc2lzdGVudC1zdG9yYWdlCiAgICAgICAgcGVyc2lzdGVudFZvbHVtZUNsYWltOgogICAgICAgICAgY2xhaW1OYW1lOiBteXNxbC1wdi1jbGFpbQotLS0KYXBpVmVyc2lvbjogYXBwcy92MQpraW5kOiBEZXBsb3ltZW50Cm1ldGFkYXRhOgogIG5hbWU6IHdvcmRwcmVzcwogIG5hbWVzcGFjZTogc2hvd2Nhc2UKICBsYWJlbHM6CiAgICBhcHA6IHdvcmRwcmVzcwpzcGVjOgogIHNlbGVjdG9yOgogICAgbWF0Y2hMYWJlbHM6CiAgICAgIGFwcDogd29yZHByZXNzCiAgc3RyYXRlZ3k6CiAgICB0eXBlOiBSZWNyZWF0ZQogIHRlbXBsYXRlOgogICAgbWV0YWRhdGE6CiAgICAgIGxhYmVsczoKICAgICAgICBhcHA6IHdvcmRwcmVzcwogICAgICAgIHRpZXI6IGZyb250ZW5kCiAgICBzcGVjOgogICAgICBjb250YWluZXJzOgogICAgICAtIGltYWdlOiB7ey5Xb3JkUHJlc3NJbWFnZX19CiAgICAgICAgbmFtZTogd29yZHByZXNzCiAgICAgICAgZW52OgogICAgICAgIC0gbmFtZTogV09SRFBSRVNTX0RCX0hPU1QKICAgICAgICAgIHZhbHVlOiBteXNxbAogICAgICAgIC0gbmFtZTogV09SRFBSRVNTX0RCX1BBU1NXT1JECiAgICAgICAgICB2YWx1ZTogY2hhbmdlbWUKICAgICAgICBwb3J0czoKICAgICAgICAtIGNvbnRhaW5lclBvcnQ6IDgwCiAgICAgICAgICBuYW1lOiB3b3JkcHJlc3MKICAgICAgICB2b2x1bWVNb3VudHM6CiAgICAgICAgLSBuYW1lOiB3b3JkcHJlc3MtcGVyc2lzdGVudC1zdG9yYWdlCiAgICAgICAgICBtb3VudFBhdGg6IC92YXIvd3d3L2h0bWwKICAgICAgdm9sdW1lczoKICAgICAgLSBuYW1lOiB3b3JkcHJlc3MtcGVyc2lzdGVudC1zdG9yYWdlCiAgICAgICAgcGVyc2lzdGVudFZvbHVtZUNsYWltOgogICAgICAgICAgY2xhaW1OYW1lOiB3b3JkcHJlc3MtcHYtY2xhaW0KLS0tCmFwaVZlcnNpb246IHYxCmtpbmQ6IFNlcnZpY2UKbWV0YWRhdGE6CiAgbmFtZTogbXlzcWwKICBuYW1lc3BhY2U6IHNob3djYXNlCiAgbGFiZWxzOgogICAgYXBwOiB3b3JkcHJlc3MKc3BlYzoKICBwb3J0czoKICAgIC0gcG9ydDogMzMwNgogIHNlbGVjdG9yOgogICAgYXBwOiB3b3JkcHJlc3MKICAgIHRpZXI6IG15c3FsCiAgY2x1c3RlcklQOiBOb25lCi0tLQphcGlWZXJzaW9uOiB2MQpraW5kOiBTZXJ2aWNlCm1ldGFkYXRhOgogIG5hbWU6IHdvcmRwcmVzcwogIG5hbWVzcGFjZTogc2hvd2Nhc2UKICBsYWJlbHM6CiAgICBhcHA6IHdvcmRwcmVzcwpzcGVjOgogIHBvcnRzOgogIC0gcG9ydDogODAKICAgIG5vZGVQb3J0OiB7ey5Xb3JkUHJlc3NQb3J0fX0KICBzZWxlY3RvcjoKICAgIGFwcDogd29yZHByZXNzCiAgICB0aWVyOiBmcm9udGVuZAogIHR5cGU6IE5vZGVQb3J0Ci0tLQphcGlWZXJzaW9uOiBuZXR3b3JraW5nLms4cy5pby92MWJldGExCmtpbmQ6IEluZ3Jlc3MKbWV0YWRhdGE6CiAgbmFtZTogd29yZHByZXNzCiAgbmFtZXNwYWNlOiBzaG93Y2FzZQogIGFubm90YXRpb25zOgogICAgaW5ncmVzcy5rdWJlcm5ldGVzLmlvL3NzbC1yZWRpcmVjdDogInRydWUiCiAgICBrdWJlcm5ldGVzLmlvL3Rscy1hY21lOiAidHJ1ZSIKICAgIGNlcnQtbWFuYWdlci5pby9jbHVzdGVyLWlzc3VlcjogbGV0c2VuY3J5cHQtcHJvZHVjdGlvbgogICAga3ViZXJuZXRlcy5pby9pbmdyZXNzLmNsYXNzOiAibmdpbngiCnNwZWM6CiAgdGxzOgogIC0gaG9zdHM6CiAgICAtIHt7LldvcmRQcmVzc0luZ3Jlc3NEb21haW59fQogICAgc2VjcmV0TmFtZTogd29yZHByZXNzLWxldHNlbmNyeXB0CiAgcnVsZXM6CiAgLSBob3N0OiB7ey5Xb3JkUHJlc3NJbmdyZXNzRG9tYWlufX0KICAgIGh0dHA6CiAgICAgIHBhdGhzOgogICAgICAtIHBhdGg6IC8KICAgICAgICBiYWNrZW5kOgogICAgICAgICAgc2VydmljZU5hbWU6IHdvcmRwcmVzcwogICAgICAgICAgc2VydmljZVBvcnQ6IDgwCg==\"")
	packr.PackJSONBytes("../../templates", "k8s/setup/monitoring/alert-manager.yaml", "\"YXBpVmVyc2lvbjogdjEKa2luZDogU2VydmljZUFjY291bnQKbWV0YWRhdGE6CiAgbmFtZXNwYWNlOiBtb25pdG9yaW5nCiAgbmFtZTogYWxlcnQtbWFuYWdlcgotLS0KYXBpVmVyc2lvbjogdjEKa2luZDogQ29uZmlnTWFwCm1ldGFkYXRhOgogIG5hbWVzcGFjZTogbW9uaXRvcmluZwogIG5hbWU6IGFsZXJ0LW1hbmFnZXItY29uZmlnCiAgbGFiZWxzOgogICAgazhzLWFwcDogYWxlcnQtbWFuYWdlcgpkYXRhOgogIGFsZXJ0LW1hbmFnZXIueW1sOiB8CiAgICBnbG9iYWw6IG51bGwKICAgIHJlY2VpdmVyczoKICAgIC0gbmFtZTogZGVmYXVsdC1yZWNlaXZlcgogICAgcm91dGU6CiAgICAgIGdyb3VwX2ludGVydmFsOiA1bQogICAgICBncm91cF93YWl0OiAxMHMKICAgICAgcmVjZWl2ZXI6IGRlZmF1bHQtcmVjZWl2ZXIKICAgICAgcmVwZWF0X2ludGVydmFsOiAzaAotLS0KYXBpVmVyc2lvbjogdjEKa2luZDogU2VydmljZQptZXRhZGF0YToKICBuYW1lc3BhY2U6IG1vbml0b3JpbmcKICBuYW1lOiBhbGVydC1tYW5hZ2VyLW9wZXJhdGVkCiAgbGFiZWxzOgogICAgazhzLWFwcDogYWxlcnQtbWFuYWdlcgpzcGVjOgogIHR5cGU6ICJDbHVzdGVySVAiCiAgY2x1c3RlcklQOiBOb25lCiAgc2VsZWN0b3I6CiAgICBrOHMtYXBwOiBhbGVydC1tYW5hZ2VyCiAgcG9ydHM6CiAgICAtIG5hbWU6IG1lc2gKICAgICAgcG9ydDogNjc4MwogICAgICBwcm90b2NvbDogVENQCiAgICAgIHRhcmdldFBvcnQ6IDY3ODMKICAgIC0gbmFtZTogaHR0cAogICAgICBwb3J0OiA5MDkzCiAgICAgIHByb3RvY29sOiBUQ1AKICAgICAgdGFyZ2V0UG9ydDogOTA5MwotLS0KYXBpVmVyc2lvbjogdjEKa2luZDogU2VydmljZQptZXRhZGF0YToKICBuYW1lc3BhY2U6IG1vbml0b3JpbmcKICBuYW1lOiBhbGVydC1tYW5hZ2VyCiAgbGFiZWxzOgogICAgazhzLWFwcDogYWxlcnQtbWFuYWdlcgpzcGVjOgogIHBvcnRzOgogICAgLSBuYW1lOiBodHRwCiAgICAgIHBvcnQ6IDkwOTMKICAgICAgcHJvdG9jb2w6IFRDUAogICAgICB0YXJnZXRQb3J0OiA5MDkzCiAgc2VsZWN0b3I6CiAgICBrOHMtYXBwOiBhbGVydC1tYW5hZ2VyCiAgdHlwZTogIkNsdXN0ZXJJUCIKLS0tCmFwaVZlcnNpb246IGFwcHMvdjEKa2luZDogU3RhdGVmdWxTZXQKbWV0YWRhdGE6CiAgbmFtZXNwYWNlOiBtb25pdG9yaW5nCiAgbmFtZTogYWxlcnQtbWFuYWdlcgogIGxhYmVsczogCiAgICBrOHMtYXBwOiBhbGVydC1tYW5hZ2VyCnNwZWM6CiAgc2VydmljZU5hbWU6ICJhbGVydC1tYW5hZ2VyLW9wZXJhdGVkIgogIHJlcGxpY2FzOiB7eyAuQWxlcnRNYW5hZ2VyQ291bnQgfX0gCiAgcG9kTWFuYWdlbWVudFBvbGljeTogT3JkZXJlZFJlYWR5CiAgdXBkYXRlU3RyYXRlZ3k6CiAgICB0eXBlOiBSb2xsaW5nVXBkYXRlCiAgcmV2aXNpb25IaXN0b3J5TGltaXQ6IDEwCiAgc2VsZWN0b3I6CiAgICBtYXRjaExhYmVsczogCiAgICAgIGs4cy1hcHA6IGFsZXJ0LW1hbmFnZXIKICB0ZW1wbGF0ZToKICAgIG1ldGFkYXRhOgogICAgICBsYWJlbHM6CiAgICAgICAgazhzLWFwcDogYWxlcnQtbWFuYWdlcgogICAgc3BlYzoKICAgICAgc2VydmljZUFjY291bnROYW1lOiBhbGVydC1tYW5hZ2VyCiAgICAgIGluaXRDb250YWluZXJzOgogICAgICAgICAgLSBuYW1lOiAiaW5pdC1jaG1vZC1kYXRhIgogICAgICAgICAgICBpbWFnZToge3sgLkJ1c3lib3hJbWFnZSB9fQogICAgICAgICAgICBpbWFnZVB1bGxQb2xpY3k6ICJJZk5vdFByZXNlbnQiCiAgICAgICAgICAgIGNvbW1hbmQ6IFsiY2htb2QiLCAiNzc3IiwgIi9kYXRhIl0KICAgICAgICAgICAgdm9sdW1lTW91bnRzOgogICAgICAgICAgICAtIG5hbWU6IGFsZXJ0LW1hbmFnZXItZGF0YQogICAgICAgICAgICAgIG1vdW50UGF0aDogIi9kYXRhIgogICAgICBjb250YWluZXJzOgogICAgICAgIC0gbmFtZTogYWxlcnQtbWFuYWdlcgogICAgICAgICAgaW1hZ2U6IHt7IC5BbGVydE1hbmFnZXJJbWFnZSB9fQogICAgICAgICAgaW1hZ2VQdWxsUG9saWN5OiBJZk5vdFByZXNlbnQKICAgICAgICAgIGFyZ3M6CiAgICAgICAgICAgIC0gLS1jb25maWcuZmlsZT0vZXRjL2NvbmZpZy9hbGVydC1tYW5hZ2VyLnltbAogICAgICAgICAgICAtIC0tc3RvcmFnZS5wYXRoPS9kYXRhCiAgICAgICAgICAgIC0gLS13ZWIubGlzdGVuLWFkZHJlc3M9OjkwOTMKICAgICAgICAgICAgLSAtLXdlYi5yb3V0ZS1wcmVmaXg9LwogICAgICAgICAgICAtIC0tY2x1c3Rlci5saXN0ZW4tYWRkcmVzcz0kKFBPRF9JUCk6Njc4MwogICAgICAgICAgICB7eyByYW5nZSAkaW5kZXgsICRlbGVtZW50IDo9IC5BbGVydE1hbmFnZXJDb3VudHMgLX19CiAgICAgICAgICAgIC0gLS1jbHVzdGVyLnBlZXI9YWxlcnQtbWFuYWdlci17eyAkZWxlbWVudCB9fS5hbGVydC1tYW5hZ2VyLW9wZXJhdGVkLm1vbml0b3Jpbmcuc3ZjOjY3ODMKICAgICAgICAgICAge3sgZW5kIC19fQogICAgICAgICAgICAtIC0tbG9nLmxldmVsPWRlYnVnCiAgICAgICAgICBlbnY6CiAgICAgICAgICAtIG5hbWU6IFBPRF9JUAogICAgICAgICAgICB2YWx1ZUZyb206CiAgICAgICAgICAgICAgZmllbGRSZWY6CiAgICAgICAgICAgICAgICBhcGlWZXJzaW9uOiB2MQogICAgICAgICAgICAgICAgZmllbGRQYXRoOiBzdGF0dXMucG9kSVAKICAgICAgICAgIHBvcnRzOgogICAgICAgICAgICAtIGNvbnRhaW5lclBvcnQ6IDkwOTMKICAgICAgICAgICAgICBuYW1lOiBodHRwCiAgICAgICAgICAgIC0gY29udGFpbmVyUG9ydDogNjc4MwogICAgICAgICAgICAgIG5hbWU6IG1lc2gKICAgICAgICAgIHJlYWRpbmVzc1Byb2JlOgogICAgICAgICAgICBodHRwR2V0OgogICAgICAgICAgICAgIHBhdGg6IC8jL3N0YXR1cwogICAgICAgICAgICAgIHBvcnQ6IDkwOTMKICAgICAgICAgICAgaW5pdGlhbERlbGF5U2Vjb25kczogMzAKICAgICAgICAgICAgdGltZW91dFNlY29uZHM6IDMwCiAgICAgICAgICB2b2x1bWVNb3VudHM6CiAgICAgICAgICAgIC0gbmFtZTogY29uZmlnLXZvbHVtZQogICAgICAgICAgICAgIG1vdW50UGF0aDogL2V0Yy9jb25maWcKICAgICAgICAgICAgLSBuYW1lOiBhbGVydC1tYW5hZ2VyLWRhdGEKICAgICAgICAgICAgICBtb3VudFBhdGg6ICIvZGF0YSIKICAgICAgICAgIHJlc291cmNlczoKICAgICAgICAgICAgbGltaXRzOgogICAgICAgICAgICAgIGNwdTogMTBtCiAgICAgICAgICAgICAgbWVtb3J5OiA1ME1pCiAgICAgICAgICAgIHJlcXVlc3RzOgogICAgICAgICAgICAgIGNwdTogMTBtCiAgICAgICAgICAgICAgbWVtb3J5OiA1ME1pCiAgICAgIHZvbHVtZXM6CiAgICAgICAgLSBuYW1lOiBjb25maWctdm9sdW1lCiAgICAgICAgICBjb25maWdNYXA6CiAgICAgICAgICAgIG5hbWU6IGFsZXJ0LW1hbmFnZXItY29uZmlnCiAgICAgIGFmZmluaXR5OgogICAgICAgIHBvZEFudGlBZmZpbml0eToKICAgICAgICAgIHJlcXVpcmVkRHVyaW5nU2NoZWR1bGluZ0lnbm9yZWREdXJpbmdFeGVjdXRpb246CiAgICAgICAgICAtIGxhYmVsU2VsZWN0b3I6CiAgICAgICAgICAgICAgbWF0Y2hFeHByZXNzaW9uczoKICAgICAgICAgICAgICAtIGtleTogazhzLWFwcAogICAgICAgICAgICAgICAgb3BlcmF0b3I6IEluCiAgICAgICAgICAgICAgICB2YWx1ZXM6CiAgICAgICAgICAgICAgICAtIGFsZXJ0LW1hbmFnZXIKICAgICAgICAgICAgdG9wb2xvZ3lLZXk6ICJrdWJlcm5ldGVzLmlvL2hvc3RuYW1lIgogIHZvbHVtZUNsYWltVGVtcGxhdGVzOgogIC0gbWV0YWRhdGE6CiAgICAgIG5hbWU6IGFsZXJ0LW1hbmFnZXItZGF0YQogICAgc3BlYzoKICAgICAgYWNjZXNzTW9kZXM6CiAgICAgICAgLSBSZWFkV3JpdGVPbmNlCiAgICAgIHJlc291cmNlczoKICAgICAgICByZXF1ZXN0czoKICAgICAgICAgIHN0b3JhZ2U6ICJ7eyAuQWxlcnRNYW5hZ2VyU2l6ZSB9fUdpIgo=\"")
	packr.PackJSONBytes("../../templates", "k8s/setup/monitoring/grafana.yaml", "\"\"")
	packr.PackJSONBytes("../../templates", "k8s/setup/monitoring/kube-state-metrics.yaml", "\"LS0tCmFwaVZlcnNpb246IHYxCmtpbmQ6IFNlcnZpY2VBY2NvdW50Cm1ldGFkYXRhOgogIG5hbWVzcGFjZTogbW9uaXRvcmluZwogIG5hbWU6IGt1YmUtc3RhdGUtbWV0cmljcwotLS0KYXBpVmVyc2lvbjogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MQpraW5kOiBDbHVzdGVyUm9sZQptZXRhZGF0YToKICBuYW1lOiBrdWJlLXN0YXRlLW1ldHJpY3MKcnVsZXM6Ci0gYXBpR3JvdXBzOgogIC0gIiIKICByZXNvdXJjZXM6CiAgLSBjb25maWdtYXBzCiAgLSBzZWNyZXRzCiAgLSBub2RlcwogIC0gcG9kcwogIC0gc2VydmljZXMKICAtIHJlc291cmNlcXVvdGFzCiAgLSByZXBsaWNhdGlvbmNvbnRyb2xsZXJzCiAgLSBsaW1pdHJhbmdlcwogIC0gcGVyc2lzdGVudHZvbHVtZWNsYWltcwogIC0gcGVyc2lzdGVudHZvbHVtZXMKICAtIG5hbWVzcGFjZXMKICAtIGVuZHBvaW50cwogIHZlcmJzOgogIC0gZ2V0CiAgLSBsaXN0CiAgLSB3YXRjaAotIGFwaUdyb3VwczoKICAtIGV4dGVuc2lvbnMKICByZXNvdXJjZXM6CiAgLSBkYWVtb25zZXRzCiAgLSBkZXBsb3ltZW50cwogIC0gcmVwbGljYXNldHMKICAtIGluZ3Jlc3NlcwogIHZlcmJzOgogIC0gZ2V0CiAgLSB1cGRhdGUKICAtIGxpc3QKICAtIHdhdGNoCi0gYXBpR3JvdXBzOgogIC0gYXBwcwogIHJlc291cmNlczoKICAtIHN0YXRlZnVsc2V0cwogIC0gZGFlbW9uc2V0cwogIC0gZGVwbG95bWVudHMKICAtIHJlcGxpY2FzZXRzCiAgdmVyYnM6CiAgLSBsaXN0CiAgLSB3YXRjaAotIGFwaUdyb3VwczoKICAtIGJhdGNoCiAgcmVzb3VyY2VzOgogIC0gY3JvbmpvYnMKICAtIGpvYnMKICB2ZXJiczoKICAtIGxpc3QKICAtIHdhdGNoCi0gYXBpR3JvdXBzOgogIC0gYXV0b3NjYWxpbmcKICByZXNvdXJjZXM6CiAgLSBob3Jpem9udGFscG9kYXV0b3NjYWxlcnMKICB2ZXJiczoKICAtIGxpc3QKICAtIHdhdGNoCi0gYXBpR3JvdXBzOgogIC0gYXV0aGVudGljYXRpb24uazhzLmlvCiAgcmVzb3VyY2VzOgogIC0gdG9rZW5yZXZpZXdzCiAgdmVyYnM6CiAgLSBjcmVhdGUKLSBhcGlHcm91cHM6CiAgLSBhdXRob3JpemF0aW9uLms4cy5pbwogIHJlc291cmNlczoKICAtIHN1YmplY3RhY2Nlc3NyZXZpZXdzCiAgdmVyYnM6CiAgLSBjcmVhdGUKLSBhcGlHcm91cHM6CiAgLSBwb2xpY3kKICByZXNvdXJjZXM6CiAgLSBwb2RkaXNydXB0aW9uYnVkZ2V0cwogIHZlcmJzOgogIC0gbGlzdAogIC0gd2F0Y2gKLSBhcGlHcm91cHM6CiAgLSBjZXJ0aWZpY2F0ZXMuazhzLmlvCiAgcmVzb3VyY2VzOgogIC0gY2VydGlmaWNhdGVzaWduaW5ncmVxdWVzdHMKICB2ZXJiczoKICAtIGxpc3QKICAtIHdhdGNoCi0gYXBpR3JvdXBzOgogIC0gc3RvcmFnZS5rOHMuaW8KICByZXNvdXJjZXM6CiAgLSBzdG9yYWdlY2xhc3NlcwogIHZlcmJzOgogIC0gbGlzdAogIC0gd2F0Y2gKLSBhcGlHcm91cHM6CiAgLSBhZG1pc3Npb25yZWdpc3RyYXRpb24uazhzLmlvCiAgcmVzb3VyY2VzOgogIC0gbXV0YXRpbmd3ZWJob29rY29uZmlndXJhdGlvbnMKICAtIHZhbGlkYXRpbmd3ZWJob29rY29uZmlndXJhdGlvbnMKICB2ZXJiczoKICAtIGxpc3QKICAtIHdhdGNoCi0tLQphcGlWZXJzaW9uOiByYmFjLmF1dGhvcml6YXRpb24uazhzLmlvL3YxCmtpbmQ6IENsdXN0ZXJSb2xlQmluZGluZwptZXRhZGF0YToKICBuYW1lOiBrdWJlLXN0YXRlLW1ldHJpY3MKcm9sZVJlZjoKICBhcGlHcm91cDogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pbwogIGtpbmQ6IENsdXN0ZXJSb2xlCiAgbmFtZToga3ViZS1zdGF0ZS1tZXRyaWNzCnN1YmplY3RzOgotIGtpbmQ6IFNlcnZpY2VBY2NvdW50CiAgbmFtZXNwYWNlOiBtb25pdG9yaW5nCiAgbmFtZToga3ViZS1zdGF0ZS1tZXRyaWNzCi0tLQphcGlWZXJzaW9uOiBhcHBzL3YxCmtpbmQ6IERlcGxveW1lbnQKbWV0YWRhdGE6CiAgbmFtZXNwYWNlOiBtb25pdG9yaW5nCiAgbmFtZToga3ViZS1zdGF0ZS1tZXRyaWNzCiAgbGFiZWxzOgogICAgazhzLWFwcDoga3ViZS1zdGF0ZS1tZXRyaWNzCnNwZWM6CiAgc2VsZWN0b3I6CiAgICBtYXRjaExhYmVsczoKICAgICAgazhzLWFwcDoga3ViZS1zdGF0ZS1tZXRyaWNzCiAgcmVwbGljYXM6IHt7IC5LdWJlU3RhdGVNZXRyaWNzQ291bnQgfX0KICB0ZW1wbGF0ZToKICAgIG1ldGFkYXRhOgogICAgICBsYWJlbHM6CiAgICAgICAgazhzLWFwcDoga3ViZS1zdGF0ZS1tZXRyaWNzCiAgICBzcGVjOgogICAgICBzZXJ2aWNlQWNjb3VudE5hbWU6IGt1YmUtc3RhdGUtbWV0cmljcwogICAgICBjb250YWluZXJzOgogICAgICAtIG5hbWU6IGt1YmUtc3RhdGUtbWV0cmljcwogICAgICAgIGltYWdlOiB7eyAuS3ViZVN0YXRlTWV0cmljc0ltYWdlIH19IAogICAgICAgIGltYWdlUHVsbFBvbGljeTogIklmTm90UHJlc2VudCIKICAgICAgICBwb3J0czoKICAgICAgICAtIG5hbWU6IGh0dHAtbWV0cmljcwogICAgICAgICAgY29udGFpbmVyUG9ydDogODA4MAogICAgICAgIC0gbmFtZTogdGVsZW1ldHJ5CiAgICAgICAgICBjb250YWluZXJQb3J0OiA4MDgxCiAgICAgICAgcmVhZGluZXNzUHJvYmU6CiAgICAgICAgICBodHRwR2V0OgogICAgICAgICAgICBwYXRoOiAvaGVhbHRoegogICAgICAgICAgICBwb3J0OiA4MDgwCiAgICAgICAgICBpbml0aWFsRGVsYXlTZWNvbmRzOiA1CiAgICAgICAgICB0aW1lb3V0U2Vjb25kczogNQotLS0KYXBpVmVyc2lvbjogdjEKa2luZDogU2VydmljZQptZXRhZGF0YToKICBuYW1lc3BhY2U6IG1vbml0b3JpbmcKICBuYW1lOiBrdWJlLXN0YXRlLW1ldHJpY3MKICBsYWJlbHM6CiAgICBrOHMtYXBwOiBrdWJlLXN0YXRlLW1ldHJpY3MKc3BlYzoKICBwb3J0czoKICAtIG5hbWU6IGh0dHAtbWV0cmljcwogICAgcG9ydDogODA4MAogICAgdGFyZ2V0UG9ydDogaHR0cC1tZXRyaWNzCiAgICBwcm90b2NvbDogVENQCiAgLSBuYW1lOiB0ZWxlbWV0cnkKICAgIHBvcnQ6IDgwODEKICAgIHRhcmdldFBvcnQ6IHRlbGVtZXRyeQogICAgcHJvdG9jb2w6IFRDUAogIHNlbGVjdG9yOgogICAgazhzLWFwcDoga3ViZS1zdGF0ZS1tZXRyaWNzCg==\"")
	packr.PackJSONBytes("../../templates", "k8s/setup/monitoring/metrics-server.yaml", "\"YXBpVmVyc2lvbjogdjEKa2luZDogTmFtZXNwYWNlCm1ldGFkYXRhOgogIG5hbWU6IG1vbml0b3JpbmcKLS0tCmFwaVZlcnNpb246IHYxCmtpbmQ6IFNlcnZpY2VBY2NvdW50Cm1ldGFkYXRhOgogIG5hbWVzcGFjZTogbW9uaXRvcmluZwogIG5hbWU6IG1ldHJpY3Mtc2VydmVyCi0tLQphcGlWZXJzaW9uOiByYmFjLmF1dGhvcml6YXRpb24uazhzLmlvL3YxCmtpbmQ6IENsdXN0ZXJSb2xlCm1ldGFkYXRhOgogIG5hbWU6IHN5c3RlbTptZXRyaWNzLXNlcnZlcgpydWxlczoKLSBhcGlHcm91cHM6CiAgLSAiIgogIHJlc291cmNlczoKICAtIHBvZHMKICAtIG5vZGVzCiAgLSBub2Rlcy9zdGF0cwogIHZlcmJzOgogIC0gZ2V0CiAgLSBsaXN0CiAgLSB3YXRjaAotLS0KYXBpVmVyc2lvbjogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MQpraW5kOiBDbHVzdGVyUm9sZUJpbmRpbmcKbWV0YWRhdGE6CiAgbmFtZTogbWV0cmljcy1zZXJ2ZXI6c3lzdGVtOmF1dGgtZGVsZWdhdG9yCiAgbmFtZXNwYWNlOiBtb25pdG9yaW5nCnJvbGVSZWY6CiAgYXBpR3JvdXA6IHJiYWMuYXV0aG9yaXphdGlvbi5rOHMuaW8KICBraW5kOiBDbHVzdGVyUm9sZQogIG5hbWU6IHN5c3RlbTphdXRoLWRlbGVnYXRvcgpzdWJqZWN0czoKICAtIGtpbmQ6IFNlcnZpY2VBY2NvdW50CiAgICBuYW1lc3BhY2U6IG1vbml0b3JpbmcKICAgIG5hbWU6IG1ldHJpY3Mtc2VydmVyCi0tLQphcGlWZXJzaW9uOiByYmFjLmF1dGhvcml6YXRpb24uazhzLmlvL3YxCmtpbmQ6IENsdXN0ZXJSb2xlQmluZGluZwptZXRhZGF0YToKICBuYW1lOiBzeXN0ZW06bWV0cmljcy1zZXJ2ZXIKcm9sZVJlZjoKICBhcGlHcm91cDogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pbwogIGtpbmQ6IENsdXN0ZXJSb2xlCiAgbmFtZTogc3lzdGVtOm1ldHJpY3Mtc2VydmVyCnN1YmplY3RzOgogIC0ga2luZDogU2VydmljZUFjY291bnQKICAgIG5hbWU6IG1ldHJpY3Mtc2VydmVyCiAgICBuYW1lc3BhY2U6IG1vbml0b3JpbmcKLS0tCmtpbmQ6IENsdXN0ZXJSb2xlCmFwaVZlcnNpb246IHJiYWMuYXV0aG9yaXphdGlvbi5rOHMuaW8vdjEKbWV0YWRhdGE6CiAgbmFtZTogc3lzdGVtOmFnZ3JlZ2F0ZWQtbWV0cmljcy1yZWFkZXIKICBsYWJlbHM6CiAgICByYmFjLmF1dGhvcml6YXRpb24uazhzLmlvL2FnZ3JlZ2F0ZS10by12aWV3OiAidHJ1ZSIKICAgIHJiYWMuYXV0aG9yaXphdGlvbi5rOHMuaW8vYWdncmVnYXRlLXRvLWVkaXQ6ICJ0cnVlIgogICAgcmJhYy5hdXRob3JpemF0aW9uLms4cy5pby9hZ2dyZWdhdGUtdG8tYWRtaW46ICJ0cnVlIgpydWxlczoKLSBhcGlHcm91cHM6IFsibWV0cmljcy5rOHMuaW8iXQogIHJlc291cmNlczogWyJwb2RzIl0KICB2ZXJiczogWyJnZXQiLCAibGlzdCIsICJ3YXRjaCJdCi0tLQphcGlWZXJzaW9uOiByYmFjLmF1dGhvcml6YXRpb24uazhzLmlvL3YxYmV0YTEKa2luZDogUm9sZUJpbmRpbmcKbWV0YWRhdGE6CiAgbmFtZTogbWV0cmljcy1zZXJ2ZXItYXV0aC1yZWFkZXIKICBuYW1lc3BhY2U6IGt1YmUtc3lzdGVtCnJvbGVSZWY6CiAgYXBpR3JvdXA6IHJiYWMuYXV0aG9yaXphdGlvbi5rOHMuaW8KICBraW5kOiBSb2xlCiAgbmFtZTogZXh0ZW5zaW9uLWFwaXNlcnZlci1hdXRoZW50aWNhdGlvbi1yZWFkZXIKc3ViamVjdHM6CiAgLSBraW5kOiBTZXJ2aWNlQWNjb3VudAogICAgbmFtZTogbWV0cmljcy1zZXJ2ZXIKICAgIG5hbWVzcGFjZTogbW9uaXRvcmluZwotLS0KYXBpVmVyc2lvbjogdjEKa2luZDogU2VydmljZQptZXRhZGF0YToKICBuYW1lc3BhY2U6IG1vbml0b3JpbmcKICBuYW1lOiBtZXRyaWNzLXNlcnZlcgogIGxhYmVsczoKICAgIGt1YmVybmV0ZXMuaW8vbmFtZTogIk1ldHJpY3Mtc2VydmVyIgpzcGVjOgogIHNlbGVjdG9yOgogICAgYXBwOiBtZXRyaWNzLXNlcnZlcgogIHBvcnRzOgogICAgLSBwb3J0OiA0NDMKICAgICAgcHJvdG9jb2w6IFRDUAogICAgICB0YXJnZXRQb3J0OiA0NDMKLS0tCmFwaVZlcnNpb246IGFwcHMvdjEKa2luZDogRGVwbG95bWVudAptZXRhZGF0YToKICBuYW1lc3BhY2U6IG1vbml0b3JpbmcKICBuYW1lOiBtZXRyaWNzLXNlcnZlcgogIGxhYmVsczoKICAgIGFwcDogbWV0cmljcy1zZXJ2ZXIKc3BlYzoKICBzZWxlY3RvcjoKICAgIG1hdGNoTGFiZWxzOgogICAgICBhcHA6IG1ldHJpY3Mtc2VydmVyCiAgdGVtcGxhdGU6CiAgICBtZXRhZGF0YToKICAgICAgbmFtZTogbWV0cmljcy1zZXJ2ZXIKICAgICAgbGFiZWxzOgogICAgICAgIGFwcDogbWV0cmljcy1zZXJ2ZXIKICAgIHNwZWM6CiAgICAgIHNlcnZpY2VBY2NvdW50TmFtZTogbWV0cmljcy1zZXJ2ZXIKICAgICAgdm9sdW1lczoKICAgICAgLSBuYW1lOiB0bXAtZGlyCiAgICAgICAgZW1wdHlEaXI6IHt9CiAgICAgIGNvbnRhaW5lcnM6CiAgICAgIC0gbmFtZTogbWV0cmljcy1zZXJ2ZXIKICAgICAgICBpbWFnZToge3sgLk1ldHJpY3NTZXJ2ZXJJbWFnZSB9fQogICAgICAgIGFyZ3M6CiAgICAgICAgLSAtLWt1YmVsZXQtcHJlZmVycmVkLWFkZHJlc3MtdHlwZXM9SW50ZXJuYWxJUAogICAgICAgIC0gLS1rdWJlbGV0LWluc2VjdXJlLXRscwogICAgICAgIC0gLS12PTEwCiAgICAgICAgdm9sdW1lTW91bnRzOgogICAgICAgIC0gbmFtZTogdG1wLWRpcgogICAgICAgICAgbW91bnRQYXRoOiAvdG1wCi0tLQphcGlWZXJzaW9uOiBhcGlyZWdpc3RyYXRpb24uazhzLmlvL3YxYmV0YTEKa2luZDogQVBJU2VydmljZQptZXRhZGF0YToKICBuYW1lc3BhY2U6IG1vbml0b3JpbmcKICBuYW1lOiB2MWJldGExLm1ldHJpY3MuazhzLmlvCnNwZWM6CiAgc2VydmljZToKICAgIG5hbWVzcGFjZTogbW9uaXRvcmluZwogICAgbmFtZTogbWV0cmljcy1zZXJ2ZXIKICBncm91cDogbWV0cmljcy5rOHMuaW8KICB2ZXJzaW9uOiB2MWJldGExCiAgaW5zZWN1cmVTa2lwVExTVmVyaWZ5OiB0cnVlCiAgZ3JvdXBQcmlvcml0eU1pbmltdW06IDEwMAogIHZlcnNpb25Qcmlvcml0eTogMTAwCg==\"")
	packr.PackJSONBytes("../../templates", "k8s/setup/monitoring/node-exporter.yaml", "\"LS0tCmFwaVZlcnNpb246IHYxCmtpbmQ6IFNlcnZpY2VBY2NvdW50Cm1ldGFkYXRhOgogIG5hbWVzcGFjZTogbW9uaXRvcmluZwogIG5hbWU6IG5vZGUtZXhwb3J0ZXIKLS0tCmFwaVZlcnNpb246IGFwcHMvdjEKa2luZDogRGFlbW9uU2V0Cm1ldGFkYXRhOgogIG5hbWVzcGFjZTogbW9uaXRvcmluZwogIG5hbWU6IG5vZGUtZXhwb3J0ZXIKICBsYWJlbHM6CiAgICBrOHMtYXBwOiBub2RlLWV4cG9ydGVyCnNwZWM6CiAgc2VsZWN0b3I6CiAgICBtYXRjaExhYmVsczogCiAgICAgIGs4cy1hcHA6IG5vZGUtZXhwb3J0ZXIKICB1cGRhdGVTdHJhdGVneToKICAgIHR5cGU6IE9uRGVsZXRlCiAgdGVtcGxhdGU6CiAgICBtZXRhZGF0YToKICAgICAgbGFiZWxzOgogICAgICAgIGs4cy1hcHA6IG5vZGUtZXhwb3J0ZXIKICAgIHNwZWM6CiAgICAgIHNlcnZpY2VBY2NvdW50TmFtZTogbm9kZS1leHBvcnRlcgogICAgICBjb250YWluZXJzOgogICAgICAgIC0gbmFtZTogbm9kZS1leHBvcnRlcgogICAgICAgICAgaW1hZ2U6IHt7IC5Ob2RlRXhwb3J0ZXJJbWFnZSB9fSAKICAgICAgICAgIGltYWdlUHVsbFBvbGljeTogIklmTm90UHJlc2VudCIKICAgICAgICAgIGFyZ3M6CiAgICAgICAgICAgIC0gLS1wYXRoLnByb2Nmcz0vaG9zdC9wcm9jCiAgICAgICAgICAgIC0gLS1wYXRoLnN5c2ZzPS9ob3N0L3N5cwogICAgICAgICAgcG9ydHM6CiAgICAgICAgICAgIC0gbmFtZTogbWV0cmljcwogICAgICAgICAgICAgIGNvbnRhaW5lclBvcnQ6IDkxMDAKICAgICAgICAgICAgICBob3N0UG9ydDogOTEwMAogICAgICAgICAgdm9sdW1lTW91bnRzOgogICAgICAgICAgICAtIG5hbWU6IHByb2MKICAgICAgICAgICAgICBtb3VudFBhdGg6IC9ob3N0L3Byb2MKICAgICAgICAgICAgICByZWFkT25seTogIHRydWUKICAgICAgICAgICAgLSBuYW1lOiBzeXMKICAgICAgICAgICAgICBtb3VudFBhdGg6IC9ob3N0L3N5cwogICAgICAgICAgICAgIHJlYWRPbmx5OiB0cnVlCiAgICAgICAgICByZXNvdXJjZXM6CiAgICAgICAgICAgIGxpbWl0czoKICAgICAgICAgICAgICBjcHU6IDEwbQogICAgICAgICAgICAgIG1lbW9yeTogNTBNaQogICAgICAgICAgICByZXF1ZXN0czoKICAgICAgICAgICAgICBjcHU6IDEwbQogICAgICAgICAgICAgIG1lbW9yeTogNTBNaQogICAgICBob3N0TmV0d29yazogdHJ1ZQogICAgICBob3N0UElEOiB0cnVlCiAgICAgIHZvbHVtZXM6CiAgICAgICAgLSBuYW1lOiBwcm9jCiAgICAgICAgICBob3N0UGF0aDoKICAgICAgICAgICAgcGF0aDogL3Byb2MKICAgICAgICAtIG5hbWU6IHN5cwogICAgICAgICAgaG9zdFBhdGg6CiAgICAgICAgICAgIHBhdGg6IC9zeXMK\"")
	packr.PackJSONBytes("../../templates", "k8s/setup/monitoring/prometheus.yaml", "\"\"")
	packr.PackJSONBytes("../../templates", "k8s/setup/networking/calico.yaml", "\"YXBpVmVyc2lvbjogdjEKa2luZDogTmFtZXNwYWNlCm1ldGFkYXRhOgogIG5hbWU6IG5ldHdvcmtpbmcKLS0tCmtpbmQ6IENvbmZpZ01hcAphcGlWZXJzaW9uOiB2MQptZXRhZGF0YToKICBuYW1lOiBjYWxpY28tY29uZmlnCiAgbmFtZXNwYWNlOiBuZXR3b3JraW5nCmRhdGE6CiAgdHlwaGFfc2VydmljZV9uYW1lOiAibm9uZSIKICBjYWxpY29fYmFja2VuZDogImJpcmQiCiAgdmV0aF9tdHU6ICIxNDQwIgogIGNuaV9uZXR3b3JrX2NvbmZpZzogfC0KICAgIHsKICAgICAgIm5hbWUiOiAiazhzLXBvZC1uZXR3b3JrIiwKICAgICAgImNuaVZlcnNpb24iOiAiMC4zLjEiLAogICAgICAicGx1Z2lucyI6IFsKICAgICAgICB7CiAgICAgICAgICAidHlwZSI6ICJjYWxpY28iLAogICAgICAgICAgImxvZ19sZXZlbCI6ICJpbmZvIiwKICAgICAgICAgICJkYXRhc3RvcmVfdHlwZSI6ICJrdWJlcm5ldGVzIiwKICAgICAgICAgICJub2RlbmFtZSI6ICJfX0tVQkVSTkVURVNfTk9ERV9OQU1FX18iLAogICAgICAgICAgIm10dSI6IF9fQ05JX01UVV9fLAogICAgICAgICAgImlwYW0iOiB7CiAgICAgICAgICAgICJ0eXBlIjogImNhbGljby1pcGFtIiwKICAgICAgICAgICAgInN1Ym5ldCI6ICJ1c2VQb2RDaWRyIgogICAgICAgICAgfSwKICAgICAgICAgICJwb2xpY3kiOiB7CiAgICAgICAgICAgICJ0eXBlIjogIms4cyIKICAgICAgICAgIH0sCiAgICAgICAgICAia3ViZXJuZXRlcyI6IHsKICAgICAgICAgICAgImt1YmVjb25maWciOiAiX19LVUJFQ09ORklHX0ZJTEVQQVRIX18iCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAidHlwZSI6ICJwb3J0bWFwIiwKICAgICAgICAgICJzbmF0IjogdHJ1ZSwKICAgICAgICAgICJjYXBhYmlsaXRpZXMiOiB7InBvcnRNYXBwaW5ncyI6IHRydWV9CiAgICAgICAgfQogICAgICBdCiAgICB9Ci0tLQphcGlWZXJzaW9uOiBhcGlleHRlbnNpb25zLms4cy5pby92MWJldGExCmtpbmQ6IEN1c3RvbVJlc291cmNlRGVmaW5pdGlvbgptZXRhZGF0YToKICAgbmFtZTogZmVsaXhjb25maWd1cmF0aW9ucy5jcmQucHJvamVjdGNhbGljby5vcmcKc3BlYzoKICBzY29wZTogQ2x1c3RlcgogIGdyb3VwOiBjcmQucHJvamVjdGNhbGljby5vcmcKICB2ZXJzaW9uOiB2MQogIG5hbWVzOgogICAga2luZDogRmVsaXhDb25maWd1cmF0aW9uCiAgICBwbHVyYWw6IGZlbGl4Y29uZmlndXJhdGlvbnMKICAgIHNpbmd1bGFyOiBmZWxpeGNvbmZpZ3VyYXRpb24KLS0tCgphcGlWZXJzaW9uOiBhcGlleHRlbnNpb25zLms4cy5pby92MWJldGExCmtpbmQ6IEN1c3RvbVJlc291cmNlRGVmaW5pdGlvbgptZXRhZGF0YToKICBuYW1lOiBpcGFtYmxvY2tzLmNyZC5wcm9qZWN0Y2FsaWNvLm9yZwpzcGVjOgogIHNjb3BlOiBDbHVzdGVyCiAgZ3JvdXA6IGNyZC5wcm9qZWN0Y2FsaWNvLm9yZwogIHZlcnNpb246IHYxCiAgbmFtZXM6CiAgICBraW5kOiBJUEFNQmxvY2sKICAgIHBsdXJhbDogaXBhbWJsb2NrcwogICAgc2luZ3VsYXI6IGlwYW1ibG9jawoKLS0tCgphcGlWZXJzaW9uOiBhcGlleHRlbnNpb25zLms4cy5pby92MWJldGExCmtpbmQ6IEN1c3RvbVJlc291cmNlRGVmaW5pdGlvbgptZXRhZGF0YToKICBuYW1lOiBibG9ja2FmZmluaXRpZXMuY3JkLnByb2plY3RjYWxpY28ub3JnCnNwZWM6CiAgc2NvcGU6IENsdXN0ZXIKICBncm91cDogY3JkLnByb2plY3RjYWxpY28ub3JnCiAgdmVyc2lvbjogdjEKICBuYW1lczoKICAgIGtpbmQ6IEJsb2NrQWZmaW5pdHkKICAgIHBsdXJhbDogYmxvY2thZmZpbml0aWVzCiAgICBzaW5ndWxhcjogYmxvY2thZmZpbml0eQoKLS0tCgphcGlWZXJzaW9uOiBhcGlleHRlbnNpb25zLms4cy5pby92MWJldGExCmtpbmQ6IEN1c3RvbVJlc291cmNlRGVmaW5pdGlvbgptZXRhZGF0YToKICBuYW1lOiBpcGFtaGFuZGxlcy5jcmQucHJvamVjdGNhbGljby5vcmcKc3BlYzoKICBzY29wZTogQ2x1c3RlcgogIGdyb3VwOiBjcmQucHJvamVjdGNhbGljby5vcmcKICB2ZXJzaW9uOiB2MQogIG5hbWVzOgogICAga2luZDogSVBBTUhhbmRsZQogICAgcGx1cmFsOiBpcGFtaGFuZGxlcwogICAgc2luZ3VsYXI6IGlwYW1oYW5kbGUKCi0tLQoKYXBpVmVyc2lvbjogYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjFiZXRhMQpraW5kOiBDdXN0b21SZXNvdXJjZURlZmluaXRpb24KbWV0YWRhdGE6CiAgbmFtZTogaXBhbWNvbmZpZ3MuY3JkLnByb2plY3RjYWxpY28ub3JnCnNwZWM6CiAgc2NvcGU6IENsdXN0ZXIKICBncm91cDogY3JkLnByb2plY3RjYWxpY28ub3JnCiAgdmVyc2lvbjogdjEKICBuYW1lczoKICAgIGtpbmQ6IElQQU1Db25maWcKICAgIHBsdXJhbDogaXBhbWNvbmZpZ3MKICAgIHNpbmd1bGFyOiBpcGFtY29uZmlnCgotLS0KCmFwaVZlcnNpb246IGFwaWV4dGVuc2lvbnMuazhzLmlvL3YxYmV0YTEKa2luZDogQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uCm1ldGFkYXRhOgogIG5hbWU6IGJncHBlZXJzLmNyZC5wcm9qZWN0Y2FsaWNvLm9yZwpzcGVjOgogIHNjb3BlOiBDbHVzdGVyCiAgZ3JvdXA6IGNyZC5wcm9qZWN0Y2FsaWNvLm9yZwogIHZlcnNpb246IHYxCiAgbmFtZXM6CiAgICBraW5kOiBCR1BQZWVyCiAgICBwbHVyYWw6IGJncHBlZXJzCiAgICBzaW5ndWxhcjogYmdwcGVlcgotLS0KYXBpVmVyc2lvbjogYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjFiZXRhMQpraW5kOiBDdXN0b21SZXNvdXJjZURlZmluaXRpb24KbWV0YWRhdGE6CiAgbmFtZTogYmdwY29uZmlndXJhdGlvbnMuY3JkLnByb2plY3RjYWxpY28ub3JnCnNwZWM6CiAgc2NvcGU6IENsdXN0ZXIKICBncm91cDogY3JkLnByb2plY3RjYWxpY28ub3JnCiAgdmVyc2lvbjogdjEKICBuYW1lczoKICAgIGtpbmQ6IEJHUENvbmZpZ3VyYXRpb24KICAgIHBsdXJhbDogYmdwY29uZmlndXJhdGlvbnMKICAgIHNpbmd1bGFyOiBiZ3Bjb25maWd1cmF0aW9uCi0tLQphcGlWZXJzaW9uOiBhcGlleHRlbnNpb25zLms4cy5pby92MWJldGExCmtpbmQ6IEN1c3RvbVJlc291cmNlRGVmaW5pdGlvbgptZXRhZGF0YToKICBuYW1lOiBpcHBvb2xzLmNyZC5wcm9qZWN0Y2FsaWNvLm9yZwpzcGVjOgogIHNjb3BlOiBDbHVzdGVyCiAgZ3JvdXA6IGNyZC5wcm9qZWN0Y2FsaWNvLm9yZwogIHZlcnNpb246IHYxCiAgbmFtZXM6CiAgICBraW5kOiBJUFBvb2wKICAgIHBsdXJhbDogaXBwb29scwogICAgc2luZ3VsYXI6IGlwcG9vbAotLS0KYXBpVmVyc2lvbjogYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjFiZXRhMQpraW5kOiBDdXN0b21SZXNvdXJjZURlZmluaXRpb24KbWV0YWRhdGE6CiAgbmFtZTogaG9zdGVuZHBvaW50cy5jcmQucHJvamVjdGNhbGljby5vcmcKc3BlYzoKICBzY29wZTogQ2x1c3RlcgogIGdyb3VwOiBjcmQucHJvamVjdGNhbGljby5vcmcKICB2ZXJzaW9uOiB2MQogIG5hbWVzOgogICAga2luZDogSG9zdEVuZHBvaW50CiAgICBwbHVyYWw6IGhvc3RlbmRwb2ludHMKICAgIHNpbmd1bGFyOiBob3N0ZW5kcG9pbnQKLS0tCmFwaVZlcnNpb246IGFwaWV4dGVuc2lvbnMuazhzLmlvL3YxYmV0YTEKa2luZDogQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uCm1ldGFkYXRhOgogIG5hbWU6IGNsdXN0ZXJpbmZvcm1hdGlvbnMuY3JkLnByb2plY3RjYWxpY28ub3JnCnNwZWM6CiAgc2NvcGU6IENsdXN0ZXIKICBncm91cDogY3JkLnByb2plY3RjYWxpY28ub3JnCiAgdmVyc2lvbjogdjEKICBuYW1lczoKICAgIGtpbmQ6IENsdXN0ZXJJbmZvcm1hdGlvbgogICAgcGx1cmFsOiBjbHVzdGVyaW5mb3JtYXRpb25zCiAgICBzaW5ndWxhcjogY2x1c3RlcmluZm9ybWF0aW9uCi0tLQphcGlWZXJzaW9uOiBhcGlleHRlbnNpb25zLms4cy5pby92MWJldGExCmtpbmQ6IEN1c3RvbVJlc291cmNlRGVmaW5pdGlvbgptZXRhZGF0YToKICBuYW1lOiBnbG9iYWxuZXR3b3JrcG9saWNpZXMuY3JkLnByb2plY3RjYWxpY28ub3JnCnNwZWM6CiAgc2NvcGU6IENsdXN0ZXIKICBncm91cDogY3JkLnByb2plY3RjYWxpY28ub3JnCiAgdmVyc2lvbjogdjEKICBuYW1lczoKICAgIGtpbmQ6IEdsb2JhbE5ldHdvcmtQb2xpY3kKICAgIHBsdXJhbDogZ2xvYmFsbmV0d29ya3BvbGljaWVzCiAgICBzaW5ndWxhcjogZ2xvYmFsbmV0d29ya3BvbGljeQotLS0KYXBpVmVyc2lvbjogYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjFiZXRhMQpraW5kOiBDdXN0b21SZXNvdXJjZURlZmluaXRpb24KbWV0YWRhdGE6CiAgbmFtZTogZ2xvYmFsbmV0d29ya3NldHMuY3JkLnByb2plY3RjYWxpY28ub3JnCnNwZWM6CiAgc2NvcGU6IENsdXN0ZXIKICBncm91cDogY3JkLnByb2plY3RjYWxpY28ub3JnCiAgdmVyc2lvbjogdjEKICBuYW1lczoKICAgIGtpbmQ6IEdsb2JhbE5ldHdvcmtTZXQKICAgIHBsdXJhbDogZ2xvYmFsbmV0d29ya3NldHMKICAgIHNpbmd1bGFyOiBnbG9iYWxuZXR3b3Jrc2V0Ci0tLQphcGlWZXJzaW9uOiBhcGlleHRlbnNpb25zLms4cy5pby92MWJldGExCmtpbmQ6IEN1c3RvbVJlc291cmNlRGVmaW5pdGlvbgptZXRhZGF0YToKICBuYW1lOiBuZXR3b3JrcG9saWNpZXMuY3JkLnByb2plY3RjYWxpY28ub3JnCnNwZWM6CiAgc2NvcGU6IE5hbWVzcGFjZWQKICBncm91cDogY3JkLnByb2plY3RjYWxpY28ub3JnCiAgdmVyc2lvbjogdjEKICBuYW1lczoKICAgIGtpbmQ6IE5ldHdvcmtQb2xpY3kKICAgIHBsdXJhbDogbmV0d29ya3BvbGljaWVzCiAgICBzaW5ndWxhcjogbmV0d29ya3BvbGljeQotLS0Ka2luZDogQ2x1c3RlclJvbGUKYXBpVmVyc2lvbjogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MWJldGExCm1ldGFkYXRhOgogIG5hbWU6IGNhbGljby1rdWJlLWNvbnRyb2xsZXJzCnJ1bGVzOgogIC0gYXBpR3JvdXBzOiBbIiJdCiAgICByZXNvdXJjZXM6CiAgICAgIC0gbm9kZXMKICAgIHZlcmJzOgogICAgICAtIHdhdGNoCiAgICAgIC0gbGlzdAogICAgICAtIGdldAogIC0gYXBpR3JvdXBzOiBbIiJdCiAgICByZXNvdXJjZXM6CiAgICAgIC0gcG9kcwogICAgdmVyYnM6CiAgICAgIC0gZ2V0CiAgLSBhcGlHcm91cHM6IFsiY3JkLnByb2plY3RjYWxpY28ub3JnIl0KICAgIHJlc291cmNlczoKICAgICAgLSBpcHBvb2xzCiAgICB2ZXJiczoKICAgICAgLSBsaXN0CiAgLSBhcGlHcm91cHM6IFsiY3JkLnByb2plY3RjYWxpY28ub3JnIl0KICAgIHJlc291cmNlczoKICAgICAgLSBibG9ja2FmZmluaXRpZXMKICAgICAgLSBpcGFtYmxvY2tzCiAgICAgIC0gaXBhbWhhbmRsZXMKICAgIHZlcmJzOgogICAgICAtIGdldAogICAgICAtIGxpc3QKICAgICAgLSBjcmVhdGUKICAgICAgLSB1cGRhdGUKICAgICAgLSBkZWxldGUKICAtIGFwaUdyb3VwczogWyJjcmQucHJvamVjdGNhbGljby5vcmciXQogICAgcmVzb3VyY2VzOgogICAgICAtIGNsdXN0ZXJpbmZvcm1hdGlvbnMKICAgIHZlcmJzOgogICAgICAtIGdldAogICAgICAtIGNyZWF0ZQogICAgICAtIHVwZGF0ZQotLS0Ka2luZDogQ2x1c3RlclJvbGVCaW5kaW5nCmFwaVZlcnNpb246IHJiYWMuYXV0aG9yaXphdGlvbi5rOHMuaW8vdjFiZXRhMQptZXRhZGF0YToKICBuYW1lOiBjYWxpY28ta3ViZS1jb250cm9sbGVycwpyb2xlUmVmOgogIGFwaUdyb3VwOiByYmFjLmF1dGhvcml6YXRpb24uazhzLmlvCiAga2luZDogQ2x1c3RlclJvbGUKICBuYW1lOiBjYWxpY28ta3ViZS1jb250cm9sbGVycwpzdWJqZWN0czoKLSBraW5kOiBTZXJ2aWNlQWNjb3VudAogIG5hbWU6IGNhbGljby1rdWJlLWNvbnRyb2xsZXJzCiAgbmFtZXNwYWNlOiBuZXR3b3JraW5nCi0tLQpraW5kOiBDbHVzdGVyUm9sZQphcGlWZXJzaW9uOiByYmFjLmF1dGhvcml6YXRpb24uazhzLmlvL3YxYmV0YTEKbWV0YWRhdGE6CiAgbmFtZTogY2FsaWNvLW5vZGUKcnVsZXM6CiAgLSBhcGlHcm91cHM6IFsiIl0KICAgIHJlc291cmNlczoKICAgICAgLSBwb2RzCiAgICAgIC0gbm9kZXMKICAgICAgLSBuYW1lc3BhY2VzCiAgICB2ZXJiczoKICAgICAgLSBnZXQKICAtIGFwaUdyb3VwczogWyIiXQogICAgcmVzb3VyY2VzOgogICAgICAtIGVuZHBvaW50cwogICAgICAtIHNlcnZpY2VzCiAgICB2ZXJiczoKICAgICAgIyBVc2VkIHRvIGRpc2NvdmVyIHNlcnZpY2UgSVBzIGZvciBhZHZlcnRpc2VtZW50LgogICAgICAtIHdhdGNoCiAgICAgIC0gbGlzdAogICAgICAjIFVzZWQgdG8gZGlzY292ZXIgVHlwaGFzLgogICAgICAtIGdldAogIC0gYXBpR3JvdXBzOiBbIiJdCiAgICByZXNvdXJjZXM6CiAgICAgIC0gbm9kZXMvc3RhdHVzCiAgICB2ZXJiczoKICAgICAgIyBOZWVkZWQgZm9yIGNsZWFyaW5nIE5vZGVOZXR3b3JrVW5hdmFpbGFibGUgZmxhZy4KICAgICAgLSBwYXRjaAogICAgICAjIENhbGljbyBzdG9yZXMgc29tZSBjb25maWd1cmF0aW9uIGluZm9ybWF0aW9uIGluIG5vZGUgYW5ub3RhdGlvbnMuCiAgICAgIC0gdXBkYXRlCiAgIyBXYXRjaCBmb3IgY2hhbmdlcyB0byBLdWJlcm5ldGVzIE5ldHdvcmtQb2xpY2llcy4KICAtIGFwaUdyb3VwczogWyJuZXR3b3JraW5nLms4cy5pbyJdCiAgICByZXNvdXJjZXM6CiAgICAgIC0gbmV0d29ya3BvbGljaWVzCiAgICB2ZXJiczoKICAgICAgLSB3YXRjaAogICAgICAtIGxpc3QKICAjIFVzZWQgYnkgQ2FsaWNvIGZvciBwb2xpY3kgaW5mb3JtYXRpb24uCiAgLSBhcGlHcm91cHM6IFsiIl0KICAgIHJlc291cmNlczoKICAgICAgLSBwb2RzCiAgICAgIC0gbmFtZXNwYWNlcwogICAgICAtIHNlcnZpY2VhY2NvdW50cwogICAgdmVyYnM6CiAgICAgIC0gbGlzdAogICAgICAtIHdhdGNoCiAgIyBUaGUgQ05JIHBsdWdpbiBwYXRjaGVzIHBvZHMvc3RhdHVzLgogIC0gYXBpR3JvdXBzOiBbIiJdCiAgICByZXNvdXJjZXM6CiAgICAgIC0gcG9kcy9zdGF0dXMKICAgIHZlcmJzOgogICAgICAtIHBhdGNoCiAgIyBDYWxpY28gbW9uaXRvcnMgdmFyaW91cyBDUkRzIGZvciBjb25maWcuCiAgLSBhcGlHcm91cHM6IFsiY3JkLnByb2plY3RjYWxpY28ub3JnIl0KICAgIHJlc291cmNlczoKICAgICAgLSBnbG9iYWxmZWxpeGNvbmZpZ3MKICAgICAgLSBmZWxpeGNvbmZpZ3VyYXRpb25zCiAgICAgIC0gYmdwcGVlcnMKICAgICAgLSBnbG9iYWxiZ3Bjb25maWdzCiAgICAgIC0gYmdwY29uZmlndXJhdGlvbnMKICAgICAgLSBpcHBvb2xzCiAgICAgIC0gaXBhbWJsb2NrcwogICAgICAtIGdsb2JhbG5ldHdvcmtwb2xpY2llcwogICAgICAtIGdsb2JhbG5ldHdvcmtzZXRzCiAgICAgIC0gbmV0d29ya3BvbGljaWVzCiAgICAgIC0gbmV0d29ya3NldHMKICAgICAgLSBjbHVzdGVyaW5mb3JtYXRpb25zCiAgICAgIC0gaG9zdGVuZHBvaW50cwogICAgICAtIGJsb2NrYWZmaW5pdGllcwogICAgdmVyYnM6CiAgICAgIC0gZ2V0CiAgICAgIC0gbGlzdAogICAgICAtIHdhdGNoCiAgIyBDYWxpY28gbXVzdCBjcmVhdGUgYW5kIHVwZGF0ZSBzb21lIENSRHMgb24gc3RhcnR1cC4KICAtIGFwaUdyb3VwczogWyJjcmQucHJvamVjdGNhbGljby5vcmciXQogICAgcmVzb3VyY2VzOgogICAgICAtIGlwcG9vbHMKICAgICAgLSBmZWxpeGNvbmZpZ3VyYXRpb25zCiAgICAgIC0gY2x1c3RlcmluZm9ybWF0aW9ucwogICAgdmVyYnM6CiAgICAgIC0gY3JlYXRlCiAgICAgIC0gdXBkYXRlCiAgIyBDYWxpY28gc3RvcmVzIHNvbWUgY29uZmlndXJhdGlvbiBpbmZvcm1hdGlvbiBvbiB0aGUgbm9kZS4KICAtIGFwaUdyb3VwczogWyIiXQogICAgcmVzb3VyY2VzOgogICAgICAtIG5vZGVzCiAgICB2ZXJiczoKICAgICAgLSBnZXQKICAgICAgLSBsaXN0CiAgICAgIC0gd2F0Y2gKICAjIFRoZXNlIHBlcm1pc3Npb25zIGFyZSBvbmx5IHJlcXVyaWVkIGZvciB1cGdyYWRlIGZyb20gdjIuNiwgYW5kIGNhbgogICMgYmUgcmVtb3ZlZCBhZnRlciB1cGdyYWRlIG9yIG9uIGZyZXNoIGluc3RhbGxhdGlvbnMuCiAgLSBhcGlHcm91cHM6IFsiY3JkLnByb2plY3RjYWxpY28ub3JnIl0KICAgIHJlc291cmNlczoKICAgICAgLSBiZ3Bjb25maWd1cmF0aW9ucwogICAgICAtIGJncHBlZXJzCiAgICB2ZXJiczoKICAgICAgLSBjcmVhdGUKICAgICAgLSB1cGRhdGUKICAjIFRoZXNlIHBlcm1pc3Npb25zIGFyZSByZXF1aXJlZCBmb3IgQ2FsaWNvIENOSSB0byBwZXJmb3JtIElQQU0gYWxsb2NhdGlvbnMuCiAgLSBhcGlHcm91cHM6IFsiY3JkLnByb2plY3RjYWxpY28ub3JnIl0KICAgIHJlc291cmNlczoKICAgICAgLSBibG9ja2FmZmluaXRpZXMKICAgICAgLSBpcGFtYmxvY2tzCiAgICAgIC0gaXBhbWhhbmRsZXMKICAgIHZlcmJzOgogICAgICAtIGdldAogICAgICAtIGxpc3QKICAgICAgLSBjcmVhdGUKICAgICAgLSB1cGRhdGUKICAgICAgLSBkZWxldGUKICAtIGFwaUdyb3VwczogWyJjcmQucHJvamVjdGNhbGljby5vcmciXQogICAgcmVzb3VyY2VzOgogICAgICAtIGlwYW1jb25maWdzCiAgICB2ZXJiczoKICAgICAgLSBnZXQKICAjIEJsb2NrIGFmZmluaXRpZXMgbXVzdCBhbHNvIGJlIHdhdGNoYWJsZSBieSBjb25mZCBmb3Igcm91dGUgYWdncmVnYXRpb24uCiAgLSBhcGlHcm91cHM6IFsiY3JkLnByb2plY3RjYWxpY28ub3JnIl0KICAgIHJlc291cmNlczoKICAgICAgLSBibG9ja2FmZmluaXRpZXMKICAgIHZlcmJzOgogICAgICAtIHdhdGNoCiAgIyBUaGUgQ2FsaWNvIElQQU0gbWlncmF0aW9uIG5lZWRzIHRvIGdldCBkYWVtb25zZXRzLiBUaGVzZSBwZXJtaXNzaW9ucyBjYW4gYmUKICAjIHJlbW92ZWQgaWYgbm90IHVwZ3JhZGluZyBmcm9tIGFuIGluc3RhbGxhdGlvbiB1c2luZyBob3N0LWxvY2FsIElQQU0uCiAgLSBhcGlHcm91cHM6IFsiYXBwcyJdCiAgICByZXNvdXJjZXM6CiAgICAgIC0gZGFlbW9uc2V0cwogICAgdmVyYnM6CiAgICAgIC0gZ2V0Ci0tLQphcGlWZXJzaW9uOiByYmFjLmF1dGhvcml6YXRpb24uazhzLmlvL3YxYmV0YTEKa2luZDogQ2x1c3RlclJvbGVCaW5kaW5nCm1ldGFkYXRhOgogIG5hbWU6IGNhbGljby1ub2RlCnJvbGVSZWY6CiAgYXBpR3JvdXA6IHJiYWMuYXV0aG9yaXphdGlvbi5rOHMuaW8KICBraW5kOiBDbHVzdGVyUm9sZQogIG5hbWU6IGNhbGljby1ub2RlCnN1YmplY3RzOgotIGtpbmQ6IFNlcnZpY2VBY2NvdW50CiAgbmFtZTogY2FsaWNvLW5vZGUKICBuYW1lc3BhY2U6IG5ldHdvcmtpbmcKLS0tCmtpbmQ6IERhZW1vblNldAphcGlWZXJzaW9uOiBhcHBzL3YxCm1ldGFkYXRhOgogIG5hbWVzcGFjZTogbmV0d29ya2luZwogIG5hbWU6IGNhbGljby1ub2RlCiAgbGFiZWxzOgogICAgazhzLWFwcDogY2FsaWNvLW5vZGUKc3BlYzoKICBzZWxlY3RvcjoKICAgIG1hdGNoTGFiZWxzOgogICAgICBrOHMtYXBwOiBjYWxpY28tbm9kZQogIHVwZGF0ZVN0cmF0ZWd5OgogICAgdHlwZTogUm9sbGluZ1VwZGF0ZQogICAgcm9sbGluZ1VwZGF0ZToKICAgICAgbWF4VW5hdmFpbGFibGU6IDEKICB0ZW1wbGF0ZToKICAgIG1ldGFkYXRhOgogICAgICBsYWJlbHM6CiAgICAgICAgazhzLWFwcDogY2FsaWNvLW5vZGUKICAgICAgYW5ub3RhdGlvbnM6CiAgICAgICAgc2NoZWR1bGVyLmFscGhhLmt1YmVybmV0ZXMuaW8vY3JpdGljYWwtcG9kOiAnJwogICAgc3BlYzoKICAgICAgbm9kZVNlbGVjdG9yOgogICAgICAgIGJldGEua3ViZXJuZXRlcy5pby9vczogbGludXgKICAgICAgaG9zdE5ldHdvcms6IHRydWUKICAgICAgdG9sZXJhdGlvbnM6CiAgICAgICAgLSBlZmZlY3Q6IE5vU2NoZWR1bGUKICAgICAgICAgIG9wZXJhdG9yOiBFeGlzdHMKICAgICAgICAtIGtleTogQ3JpdGljYWxBZGRvbnNPbmx5CiAgICAgICAgICBvcGVyYXRvcjogRXhpc3RzCiAgICAgICAgLSBlZmZlY3Q6IE5vRXhlY3V0ZQogICAgICAgICAgb3BlcmF0b3I6IEV4aXN0cwogICAgICBzZXJ2aWNlQWNjb3VudE5hbWU6IGNhbGljby1ub2RlCiAgICAgIHRlcm1pbmF0aW9uR3JhY2VQZXJpb2RTZWNvbmRzOiAwCiAgICAgIGluaXRDb250YWluZXJzOgogICAgICAgIC0gbmFtZTogdXBncmFkZS1pcGFtCiAgICAgICAgICBpbWFnZToge3suQ2FsaWNvQ05JSW1hZ2V9fQogICAgICAgICAgY29tbWFuZDogWyIvb3B0L2NuaS9iaW4vY2FsaWNvLWlwYW0iLCAiLXVwZ3JhZGUiXQogICAgICAgICAgZW52OgogICAgICAgICAgICAtIG5hbWU6IEtVQkVSTkVURVNfTk9ERV9OQU1FCiAgICAgICAgICAgICAgdmFsdWVGcm9tOgogICAgICAgICAgICAgICAgZmllbGRSZWY6CiAgICAgICAgICAgICAgICAgIGZpZWxkUGF0aDogc3BlYy5ub2RlTmFtZQogICAgICAgICAgICAtIG5hbWU6IENBTElDT19ORVRXT1JLSU5HX0JBQ0tFTkQKICAgICAgICAgICAgICB2YWx1ZUZyb206CiAgICAgICAgICAgICAgICBjb25maWdNYXBLZXlSZWY6CiAgICAgICAgICAgICAgICAgIG5hbWU6IGNhbGljby1jb25maWcKICAgICAgICAgICAgICAgICAga2V5OiBjYWxpY29fYmFja2VuZAogICAgICAgICAgdm9sdW1lTW91bnRzOgogICAgICAgICAgICAtIG1vdW50UGF0aDogL3Zhci9saWIvY25pL25ldHdvcmtzCiAgICAgICAgICAgICAgbmFtZTogaG9zdC1sb2NhbC1uZXQtZGlyCiAgICAgICAgICAgIC0gbW91bnRQYXRoOiAvaG9zdC9vcHQvY25pL2JpbgogICAgICAgICAgICAgIG5hbWU6IGNuaS1iaW4tZGlyCiAgICAgICAgLSBuYW1lOiBpbnN0YWxsLWNuaQogICAgICAgICAgaW1hZ2U6IHt7LkNhbGljb0NOSUltYWdlfX0KICAgICAgICAgIGNvbW1hbmQ6IFsiL2luc3RhbGwtY25pLnNoIl0KICAgICAgICAgIGVudjoKICAgICAgICAgICAgLSBuYW1lOiBDTklfTkVUX0RJUgogICAgICAgICAgICAgIHZhbHVlOiAie3suQ05JQ29uZmlnRGlyZWN0b3J5fX0iCiAgICAgICAgICAgIC0gbmFtZTogQ05JX0NPTkZfTkFNRQogICAgICAgICAgICAgIHZhbHVlOiAiMTAtY2FsaWNvLmNvbmZsaXN0IgogICAgICAgICAgICAtIG5hbWU6IENOSV9ORVRXT1JLX0NPTkZJRwogICAgICAgICAgICAgIHZhbHVlRnJvbToKICAgICAgICAgICAgICAgIGNvbmZpZ01hcEtleVJlZjoKICAgICAgICAgICAgICAgICAgbmFtZTogY2FsaWNvLWNvbmZpZwogICAgICAgICAgICAgICAgICBrZXk6IGNuaV9uZXR3b3JrX2NvbmZpZwogICAgICAgICAgICAtIG5hbWU6IEtVQkVSTkVURVNfTk9ERV9OQU1FCiAgICAgICAgICAgICAgdmFsdWVGcm9tOgogICAgICAgICAgICAgICAgZmllbGRSZWY6CiAgICAgICAgICAgICAgICAgIGZpZWxkUGF0aDogc3BlYy5ub2RlTmFtZQogICAgICAgICAgICAtIG5hbWU6IENOSV9NVFUKICAgICAgICAgICAgICB2YWx1ZUZyb206CiAgICAgICAgICAgICAgICBjb25maWdNYXBLZXlSZWY6CiAgICAgICAgICAgICAgICAgIG5hbWU6IGNhbGljby1jb25maWcKICAgICAgICAgICAgICAgICAga2V5OiB2ZXRoX210dQogICAgICAgICAgICAtIG5hbWU6IFNMRUVQCiAgICAgICAgICAgICAgdmFsdWU6ICJmYWxzZSIKICAgICAgICAgIHZvbHVtZU1vdW50czoKICAgICAgICAgICAgLSBtb3VudFBhdGg6IC9ob3N0L29wdC9jbmkvYmluCiAgICAgICAgICAgICAgbmFtZTogY25pLWJpbi1kaXIKICAgICAgICAgICAgLSBtb3VudFBhdGg6IC9ob3N0L2V0Yy9jbmkvbmV0LmQKICAgICAgICAgICAgICBuYW1lOiBjbmktbmV0LWRpcgogICAgICBjb250YWluZXJzOgogICAgICAgIC0gbmFtZTogY2FsaWNvLW5vZGUKICAgICAgICAgIGltYWdlOiB7ey5DYWxpY29Ob2RlSW1hZ2V9fQogICAgICAgICAgZW52OgogICAgICAgICAgICAtIG5hbWU6IENBTElDT19ESVNBQkxFX0ZJTEVfTE9HR0lORwogICAgICAgICAgICAgIHZhbHVlOiAidHJ1ZSIKICAgICAgICAgICAgLSBuYW1lOiBDQUxJQ09fSVBWNFBPT0xfQ0lEUgogICAgICAgICAgICAgIHZhbHVlOiAie3suQ2x1c3RlckNJRFJ9fSIKICAgICAgICAgICAgLSBuYW1lOiBDQUxJQ09fSVBWNFBPT0xfSVBJUAogICAgICAgICAgICAgIHZhbHVlOiAiQWx3YXlzIgogICAgICAgICAgICAtIG5hbWU6IENBTElDT19ORVRXT1JLSU5HX0JBQ0tFTkQKICAgICAgICAgICAgICB2YWx1ZUZyb206CiAgICAgICAgICAgICAgICBjb25maWdNYXBLZXlSZWY6CiAgICAgICAgICAgICAgICAgIG5hbWU6IGNhbGljby1jb25maWcKICAgICAgICAgICAgICAgICAga2V5OiBjYWxpY29fYmFja2VuZAogICAgICAgICAgICAtIG5hbWU6IENMVVNURVJfVFlQRQogICAgICAgICAgICAgIHZhbHVlOiAiazhzLGJncCIKICAgICAgICAgICAgLSBuYW1lOiBEQVRBU1RPUkVfVFlQRQogICAgICAgICAgICAgIHZhbHVlOiAia3ViZXJuZXRlcyIKICAgICAgICAgICAgLSBuYW1lOiBXQUlUX0ZPUl9EQVRBU1RPUkUKICAgICAgICAgICAgICB2YWx1ZTogInRydWUiCiAgICAgICAgICAgIC0gbmFtZTogRkVMSVhfREVGQVVMVEVORFBPSU5UVE9IT1NUQUNUSU9OCiAgICAgICAgICAgICAgdmFsdWU6ICJBQ0NFUFQiCiAgICAgICAgICAgIC0gbmFtZTogRkVMSVhfSEVBTFRIRU5BQkxFRAogICAgICAgICAgICAgIHZhbHVlOiAidHJ1ZSIKICAgICAgICAgICAgLSBuYW1lOiBGRUxJWF9JUFY2U1VQUE9SVAogICAgICAgICAgICAgIHZhbHVlOiAiZmFsc2UiCiAgICAgICAgICAgIC0gbmFtZTogRkVMSVhfSVBJTklQTVRVCiAgICAgICAgICAgICAgdmFsdWVGcm9tOgogICAgICAgICAgICAgICAgY29uZmlnTWFwS2V5UmVmOgogICAgICAgICAgICAgICAgICBuYW1lOiBjYWxpY28tY29uZmlnCiAgICAgICAgICAgICAgICAgIGtleTogdmV0aF9tdHUKICAgICAgICAgICAgLSBuYW1lOiBGRUxJWF9JUElOSVBFTkFCTEVECiAgICAgICAgICAgICAgdmFsdWU6ICJ0cnVlIgogICAgICAgICAgICAtIG5hbWU6IEZFTElYX0xPR1NFVkVSSVRZU0NSRUVOCiAgICAgICAgICAgICAgdmFsdWU6ICJpbmZvIgogICAgICAgICAgICAtIG5hbWU6IEZFTElYX1RZUEhBSzhTU0VSVklDRU5BTUUKICAgICAgICAgICAgICB2YWx1ZUZyb206CiAgICAgICAgICAgICAgICBjb25maWdNYXBLZXlSZWY6CiAgICAgICAgICAgICAgICAgIG5hbWU6IGNhbGljby1jb25maWcKICAgICAgICAgICAgICAgICAga2V5OiB0eXBoYV9zZXJ2aWNlX25hbWUKICAgICAgICAgICAgLSBuYW1lOiBJUAogICAgICAgICAgICAgIHZhbHVlOiAiYXV0b2RldGVjdCIKICAgICAgICAgICAgLSBuYW1lOiBOT0RFTkFNRQogICAgICAgICAgICAgIHZhbHVlRnJvbToKICAgICAgICAgICAgICAgIGZpZWxkUmVmOgogICAgICAgICAgICAgICAgICBmaWVsZFBhdGg6IHNwZWMubm9kZU5hbWUKICAgICAgICAgICAgLSBuYW1lOiBXQUlUX0ZPUl9EQVRBU1RPUkUKICAgICAgICAgICAgICB2YWx1ZTogInRydWUiCiAgICAgICAgICBzZWN1cml0eUNvbnRleHQ6CiAgICAgICAgICAgIHByaXZpbGVnZWQ6IHRydWUKICAgICAgICAgIHJlc291cmNlczoKICAgICAgICAgICAgcmVxdWVzdHM6CiAgICAgICAgICAgICAgY3B1OiAyNTBtCiAgICAgICAgICBsaXZlbmVzc1Byb2JlOgogICAgICAgICAgICBleGVjOgogICAgICAgICAgICAgIGNvbW1hbmQ6CiAgICAgICAgICAgICAgLSAvYmluL2NhbGljby1ub2RlCiAgICAgICAgICAgICAgLSAtZmVsaXgtbGl2ZQogICAgICAgICAgICBwZXJpb2RTZWNvbmRzOiAxMAogICAgICAgICAgICBpbml0aWFsRGVsYXlTZWNvbmRzOiAxMAogICAgICAgICAgICBmYWlsdXJlVGhyZXNob2xkOiA2CiAgICAgICAgICByZWFkaW5lc3NQcm9iZToKICAgICAgICAgICAgZXhlYzoKICAgICAgICAgICAgICBjb21tYW5kOgogICAgICAgICAgICAgIC0gL2Jpbi9jYWxpY28tbm9kZQogICAgICAgICAgICAgIC0gLWZlbGl4LXJlYWR5CiAgICAgICAgICAgICAgLSAtYmlyZC1yZWFkeQogICAgICAgICAgICBwZXJpb2RTZWNvbmRzOiAxMAogICAgICAgICAgdm9sdW1lTW91bnRzOgogICAgICAgICAgICAtIG1vdW50UGF0aDogL2xpYi9tb2R1bGVzCiAgICAgICAgICAgICAgbmFtZTogbGliLW1vZHVsZXMKICAgICAgICAgICAgICByZWFkT25seTogdHJ1ZQogICAgICAgICAgICAtIG1vdW50UGF0aDogL3J1bi94dGFibGVzLmxvY2sKICAgICAgICAgICAgICBuYW1lOiB4dGFibGVzLWxvY2sKICAgICAgICAgICAgICByZWFkT25seTogZmFsc2UKICAgICAgICAgICAgLSBtb3VudFBhdGg6IC92YXIvcnVuL2NhbGljbwogICAgICAgICAgICAgIG5hbWU6IHZhci1ydW4tY2FsaWNvCiAgICAgICAgICAgICAgcmVhZE9ubHk6IGZhbHNlCiAgICAgICAgICAgIC0gbW91bnRQYXRoOiAvdmFyL2xpYi9jYWxpY28KICAgICAgICAgICAgICBuYW1lOiB2YXItbGliLWNhbGljbwogICAgICAgICAgICAgIHJlYWRPbmx5OiBmYWxzZQogICAgICAgICAgICAtIG5hbWU6IHBvbGljeXN5bmMKICAgICAgICAgICAgICBtb3VudFBhdGg6IC92YXIvcnVuL25vZGVhZ2VudAogICAgICB2b2x1bWVzOgogICAgICAgIC0gbmFtZTogbGliLW1vZHVsZXMKICAgICAgICAgIGhvc3RQYXRoOgogICAgICAgICAgICBwYXRoOiAvbGliL21vZHVsZXMKICAgICAgICAtIG5hbWU6IHZhci1ydW4tY2FsaWNvCiAgICAgICAgICBob3N0UGF0aDoKICAgICAgICAgICAgcGF0aDogL3Zhci9ydW4vY2FsaWNvCiAgICAgICAgLSBuYW1lOiB2YXItbGliLWNhbGljbwogICAgICAgICAgaG9zdFBhdGg6CiAgICAgICAgICAgIHBhdGg6IC92YXIvbGliL2NhbGljbwogICAgICAgIC0gbmFtZTogeHRhYmxlcy1sb2NrCiAgICAgICAgICBob3N0UGF0aDoKICAgICAgICAgICAgcGF0aDogL3J1bi94dGFibGVzLmxvY2sKICAgICAgICAgICAgdHlwZTogRmlsZU9yQ3JlYXRlCiAgICAgICAgLSBuYW1lOiBjbmktYmluLWRpcgogICAgICAgICAgaG9zdFBhdGg6CiAgICAgICAgICAgIHBhdGg6IHt7LkNOSUJpbmFyaWVzRGlyZWN0b3J5fX0KICAgICAgICAtIG5hbWU6IGNuaS1uZXQtZGlyCiAgICAgICAgICBob3N0UGF0aDoKICAgICAgICAgICAgcGF0aDoge3suQ05JQ29uZmlnRGlyZWN0b3J5fX0KICAgICAgICAtIG5hbWU6IGhvc3QtbG9jYWwtbmV0LWRpcgogICAgICAgICAgaG9zdFBhdGg6CiAgICAgICAgICAgIHBhdGg6IC92YXIvbGliL2NuaS9uZXR3b3JrcwogICAgICAgIC0gbmFtZTogcG9saWN5c3luYwogICAgICAgICAgaG9zdFBhdGg6CiAgICAgICAgICAgIHR5cGU6IERpcmVjdG9yeU9yQ3JlYXRlCiAgICAgICAgICAgIHBhdGg6IC92YXIvcnVuL25vZGVhZ2VudAotLS0KYXBpVmVyc2lvbjogdjEKa2luZDogU2VydmljZUFjY291bnQKbWV0YWRhdGE6CiAgbmFtZTogY2FsaWNvLW5vZGUKICBuYW1lc3BhY2U6IG5ldHdvcmtpbmcKLS0tCmFwaVZlcnNpb246IGFwcHMvdjEKa2luZDogRGVwbG95bWVudAptZXRhZGF0YToKICBuYW1lOiBjYWxpY28ta3ViZS1jb250cm9sbGVycwogIG5hbWVzcGFjZTogbmV0d29ya2luZwogIGxhYmVsczoKICAgIGs4cy1hcHA6IGNhbGljby1rdWJlLWNvbnRyb2xsZXJzCiAgYW5ub3RhdGlvbnM6CiAgICBzY2hlZHVsZXIuYWxwaGEua3ViZXJuZXRlcy5pby9jcml0aWNhbC1wb2Q6ICcnCnNwZWM6CiAgc2VsZWN0b3I6CiAgICBtYXRjaExhYmVsczoKICAgICAgazhzLWFwcDogY2FsaWNvLWt1YmUtY29udHJvbGxlcnMKICByZXBsaWNhczogMQogIHN0cmF0ZWd5OgogICAgdHlwZTogUmVjcmVhdGUKICB0ZW1wbGF0ZToKICAgIG1ldGFkYXRhOgogICAgICBuYW1lOiBjYWxpY28ta3ViZS1jb250cm9sbGVycwogICAgICBuYW1lc3BhY2U6IG5ldHdvcmtpbmcKICAgICAgbGFiZWxzOgogICAgICAgIGs4cy1hcHA6IGNhbGljby1rdWJlLWNvbnRyb2xsZXJzCiAgICAgIGFubm90YXRpb25zOgogICAgICAgIHNjaGVkdWxlci5hbHBoYS5rdWJlcm5ldGVzLmlvL2NyaXRpY2FsLXBvZDogJycKICAgIHNwZWM6CiAgICAgIG5vZGVTZWxlY3RvcjoKICAgICAgICBiZXRhLmt1YmVybmV0ZXMuaW8vb3M6IGxpbnV4CiAgICAgIHRvbGVyYXRpb25zOgogICAgICAgIC0ga2V5OiBDcml0aWNhbEFkZG9uc09ubHkKICAgICAgICAgIG9wZXJhdG9yOiBFeGlzdHMKICAgICAgICAtIGtleTogbm9kZS1yb2xlLmt1YmVybmV0ZXMuaW8vbWFzdGVyCiAgICAgICAgICBlZmZlY3Q6IE5vU2NoZWR1bGUKICAgICAgc2VydmljZUFjY291bnROYW1lOiBjYWxpY28ta3ViZS1jb250cm9sbGVycwogICAgICBjb250YWluZXJzOgogICAgICAgIC0gbmFtZTogY2FsaWNvLWt1YmUtY29udHJvbGxlcnMKICAgICAgICAgIGltYWdlOiB7ey5DYWxpY29LdWJlQ29udHJvbGxlcnNJbWFnZX19CiAgICAgICAgICBlbnY6CiAgICAgICAgICAgIC0gbmFtZTogRU5BQkxFRF9DT05UUk9MTEVSUwogICAgICAgICAgICAgIHZhbHVlOiBub2RlCiAgICAgICAgICAgIC0gbmFtZTogREFUQVNUT1JFX1RZUEUKICAgICAgICAgICAgICB2YWx1ZToga3ViZXJuZXRlcwogICAgICAgICAgcmVhZGluZXNzUHJvYmU6CiAgICAgICAgICAgIGV4ZWM6CiAgICAgICAgICAgICAgY29tbWFuZDoKICAgICAgICAgICAgICAtIC91c3IvYmluL2NoZWNrLXN0YXR1cwogICAgICAgICAgICAgIC0gLXIKLS0tCmFwaVZlcnNpb246IHYxCmtpbmQ6IFNlcnZpY2VBY2NvdW50Cm1ldGFkYXRhOgogIG5hbWU6IGNhbGljby1rdWJlLWNvbnRyb2xsZXJzCiAgbmFtZXNwYWNlOiBuZXR3b3JraW5nCi0tLQphcGlWZXJzaW9uOiB2MQpraW5kOiBTZXJ2aWNlCm1ldGFkYXRhOgogIG5hbWU6IGNhbGljby10eXBoYQogIG5hbWVzcGFjZTogbmV0d29ya2luZwogIGxhYmVsczoKICAgIGs4cy1hcHA6IGNhbGljby10eXBoYQpzcGVjOgogIGNsdXN0ZXJJUDoge3suQ2FsaWNvVHlwaGFJUH19CiAgcG9ydHM6CiAgICAtIHBvcnQ6IDU0NzMKICAgICAgcHJvdG9jb2w6IFRDUAogICAgICB0YXJnZXRQb3J0OiBjYWxpY28tdHlwaGEKICAgICAgbmFtZTogY2FsaWNvLXR5cGhhCiAgc2VsZWN0b3I6CiAgICBrOHMtYXBwOiBjYWxpY28tdHlwaGEKLS0tCmFwaVZlcnNpb246IGFwcHMvdjEKa2luZDogRGVwbG95bWVudAptZXRhZGF0YToKICBuYW1lOiBjYWxpY28tdHlwaGEKICBuYW1lc3BhY2U6IG5ldHdvcmtpbmcKICBsYWJlbHM6CiAgICBrOHMtYXBwOiBjYWxpY28tdHlwaGEKc3BlYzoKICBzZWxlY3RvcjoKICAgIG1hdGNoTGFiZWxzOgogICAgICBrOHMtYXBwOiBjYWxpY28tdHlwaGEKICByZXBsaWNhczogMAogIHJldmlzaW9uSGlzdG9yeUxpbWl0OiAyCiAgdGVtcGxhdGU6CiAgICBtZXRhZGF0YToKICAgICAgbGFiZWxzOgogICAgICAgIGs4cy1hcHA6IGNhbGljby10eXBoYQogICAgICBhbm5vdGF0aW9uczoKICAgICAgICBzY2hlZHVsZXIuYWxwaGEua3ViZXJuZXRlcy5pby9jcml0aWNhbC1wb2Q6ICcnCiAgICBzcGVjOgogICAgICBub2RlU2VsZWN0b3I6CiAgICAgICAgYmV0YS5rdWJlcm5ldGVzLmlvL29zOiBsaW51eAogICAgICBob3N0TmV0d29yazogdHJ1ZQogICAgICB0b2xlcmF0aW9uczoKICAgICAgICAtIGtleTogQ3JpdGljYWxBZGRvbnNPbmx5CiAgICAgICAgICBvcGVyYXRvcjogRXhpc3RzCiAgICAgIHNlcnZpY2VBY2NvdW50TmFtZTogY2FsaWNvLW5vZGUKICAgICAgY29udGFpbmVyczoKICAgICAgLSBpbWFnZToge3suQ2FsaWNvVHlwaGFJbWFnZX19CiAgICAgICAgbmFtZTogY2FsaWNvLXR5cGhhCiAgICAgICAgcG9ydHM6CiAgICAgICAgLSBjb250YWluZXJQb3J0OiA1NDczCiAgICAgICAgICBuYW1lOiBjYWxpY28tdHlwaGEKICAgICAgICAgIHByb3RvY29sOiBUQ1AKICAgICAgICBlbnY6CiAgICAgICAgICAtIG5hbWU6IFRZUEhBX0xPR1NFVkVSSVRZU0NSRUVOCiAgICAgICAgICAgIHZhbHVlOiAiaW5mbyIKICAgICAgICAgIC0gbmFtZTogVFlQSEFfTE9HRklMRVBBVEgKICAgICAgICAgICAgdmFsdWU6ICJub25lIgogICAgICAgICAgLSBuYW1lOiBUWVBIQV9MT0dTRVZFUklUWVNZUwogICAgICAgICAgICB2YWx1ZTogIm5vbmUiCiAgICAgICAgICAtIG5hbWU6IFRZUEhBX0NPTk5FQ1RJT05SRUJBTEFOQ0lOR01PREUKICAgICAgICAgICAgdmFsdWU6ICJrdWJlcm5ldGVzIgogICAgICAgICAgLSBuYW1lOiBUWVBIQV9EQVRBU1RPUkVUWVBFCiAgICAgICAgICAgIHZhbHVlOiAia3ViZXJuZXRlcyIKICAgICAgICAgIC0gbmFtZTogVFlQSEFfSEVBTFRIRU5BQkxFRAogICAgICAgICAgICB2YWx1ZTogInRydWUiCiAgICAgICAgICAtIG5hbWU6IFRZUEhBX1BST01FVEhFVVNNRVRSSUNTRU5BQkxFRAogICAgICAgICAgICB2YWx1ZTogInRydWUiCiAgICAgICAgICAtIG5hbWU6IFRZUEhBX1BST01FVEhFVVNNRVRSSUNTUE9SVAogICAgICAgICAgICB2YWx1ZTogIjkwOTMiCiAgICAgICAgbGl2ZW5lc3NQcm9iZToKICAgICAgICAgIGh0dHBHZXQ6CiAgICAgICAgICAgIHBhdGg6IC9saXZlbmVzcwogICAgICAgICAgICBwb3J0OiA5MDk4CiAgICAgICAgICBwZXJpb2RTZWNvbmRzOiAzMAogICAgICAgICAgaW5pdGlhbERlbGF5U2Vjb25kczogMzAKICAgICAgICByZWFkaW5lc3NQcm9iZToKICAgICAgICAgIGh0dHBHZXQ6CiAgICAgICAgICAgIHBhdGg6IC9yZWFkaW5lc3MKICAgICAgICAgICAgcG9ydDogOTA5OAogICAgICAgICAgcGVyaW9kU2Vjb25kczogMTAKLS0tCmtpbmQ6IFBvZERpc3J1cHRpb25CdWRnZXQKYXBpVmVyc2lvbjogcG9saWN5L3YxYmV0YTEKbWV0YWRhdGE6CiAgbmFtZTogY2FsaWNvLXR5cGhhCiAgbmFtZXNwYWNlOiBrdWJlLXN5c3RlbQogIGxhYmVsczoKICAgIGs4cy1hcHA6IGNhbGljby10eXBoYQpzcGVjOgogIG1heFVuYXZhaWxhYmxlOiAxCiAgc2VsZWN0b3I6CiAgICBtYXRjaExhYmVsczoKICAgICAgazhzLWFwcDogY2FsaWNvLXR5cGhhCg==\"")
	packr.PackJSONBytes("../../templates", "k8s/setup/networking/cert-manager.yaml", "\"\"")
	packr.PackJSONBytes("../../templates", "k8s/setup/networking/metallb.yaml", "\"YXBpVmVyc2lvbjogdjEKa2luZDogU2VydmljZUFjY291bnQKbWV0YWRhdGE6CiAgbmFtZXNwYWNlOiBuZXR3b3JraW5nCiAgbmFtZTogbWV0YWxsYi1jb250cm9sbGVyCiAgbGFiZWxzOgogICAgYXBwOiBtZXRhbGxiCgotLS0KYXBpVmVyc2lvbjogdjEKa2luZDogU2VydmljZUFjY291bnQKbWV0YWRhdGE6CiAgbmFtZXNwYWNlOiBuZXR3b3JraW5nCiAgbmFtZTogbWV0YWxsYi1zcGVha2VyCiAgbGFiZWxzOgogICAgYXBwOiBtZXRhbGxiCgotLS0KYXBpVmVyc2lvbjogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MQpraW5kOiBDbHVzdGVyUm9sZQptZXRhZGF0YToKICBuYW1lOiBuZXR3b3JraW5nOm1ldGFsbGItY29udHJvbGxlcgogIGxhYmVsczoKICAgIGFwcDogbWV0YWxsYgpydWxlczoKLSBhcGlHcm91cHM6IFsiIl0KICByZXNvdXJjZXM6IFsic2VydmljZXMiXQogIHZlcmJzOiBbImdldCIsICJsaXN0IiwgIndhdGNoIiwgInVwZGF0ZSJdCi0gYXBpR3JvdXBzOiBbIiJdCiAgcmVzb3VyY2VzOiBbInNlcnZpY2VzL3N0YXR1cyJdCiAgdmVyYnM6IFsidXBkYXRlIl0KLSBhcGlHcm91cHM6IFsiIl0KICByZXNvdXJjZXM6IFsiZXZlbnRzIl0KICB2ZXJiczogWyJjcmVhdGUiLCAicGF0Y2giXQoKLS0tCmFwaVZlcnNpb246IHJiYWMuYXV0aG9yaXphdGlvbi5rOHMuaW8vdjEKa2luZDogQ2x1c3RlclJvbGUKbWV0YWRhdGE6CiAgbmFtZTogbmV0d29ya2luZzptZXRhbGxiLXNwZWFrZXIKICBsYWJlbHM6CiAgICBhcHA6IG1ldGFsbGIKcnVsZXM6Ci0gYXBpR3JvdXBzOiBbIiJdCiAgcmVzb3VyY2VzOiBbInNlcnZpY2VzIiwgImVuZHBvaW50cyIsICJub2RlcyJdCiAgdmVyYnM6IFsiZ2V0IiwgImxpc3QiLCAid2F0Y2giXQoKLS0tCmFwaVZlcnNpb246IHJiYWMuYXV0aG9yaXphdGlvbi5rOHMuaW8vdjEKa2luZDogUm9sZQptZXRhZGF0YToKICBuYW1lc3BhY2U6IG5ldHdvcmtpbmcKICBuYW1lOiBjb25maWctd2F0Y2hlcgogIGxhYmVsczoKICAgIGFwcDogbWV0YWxsYgpydWxlczoKLSBhcGlHcm91cHM6IFsiIl0KICByZXNvdXJjZXM6IFsiY29uZmlnbWFwcyJdCiAgdmVyYnM6IFsiZ2V0IiwgImxpc3QiLCAid2F0Y2giXQotIGFwaUdyb3VwczogWyIiXQogIHJlc291cmNlczogWyJldmVudHMiXQogIHZlcmJzOiBbImNyZWF0ZSJdCgotLS0KYXBpVmVyc2lvbjogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MQpraW5kOiBDbHVzdGVyUm9sZUJpbmRpbmcKbWV0YWRhdGE6CiAgbmFtZTogbmV0d29ya2luZzptZXRhbGxiLWNvbnRyb2xsZXIKICBsYWJlbHM6CiAgICBhcHA6IG1ldGFsbGIKc3ViamVjdHM6Ci0ga2luZDogU2VydmljZUFjY291bnQKICBuYW1lOiBtZXRhbGxiLWNvbnRyb2xsZXIKICBuYW1lc3BhY2U6IG5ldHdvcmtpbmcKcm9sZVJlZjoKICBhcGlHcm91cDogcmJhYy5hdXRob3JpemF0aW9uLms4cy5pbwogIGtpbmQ6IENsdXN0ZXJSb2xlCiAgbmFtZTogbmV0d29ya2luZzptZXRhbGxiLWNvbnRyb2xsZXIKCi0tLQphcGlWZXJzaW9uOiByYmFjLmF1dGhvcml6YXRpb24uazhzLmlvL3YxCmtpbmQ6IENsdXN0ZXJSb2xlQmluZGluZwptZXRhZGF0YToKICBuYW1lOiBuZXR3b3JraW5nOm1ldGFsbGItc3BlYWtlcgogIGxhYmVsczoKICAgIGFwcDogbWV0YWxsYgpzdWJqZWN0czoKLSBraW5kOiBTZXJ2aWNlQWNjb3VudAogIG5hbWU6IG1ldGFsbGItc3BlYWtlcgogIG5hbWVzcGFjZTogbmV0d29ya2luZwpyb2xlUmVmOgogIGFwaUdyb3VwOiByYmFjLmF1dGhvcml6YXRpb24uazhzLmlvCiAga2luZDogQ2x1c3RlclJvbGUKICBuYW1lOiBuZXR3b3JraW5nOm1ldGFsbGItc3BlYWtlcgoKLS0tCmFwaVZlcnNpb246IHJiYWMuYXV0aG9yaXphdGlvbi5rOHMuaW8vdjEKa2luZDogUm9sZUJpbmRpbmcKbWV0YWRhdGE6CiAgbmFtZXNwYWNlOiBuZXR3b3JraW5nCiAgbmFtZTogY29uZmlnLXdhdGNoZXIKICBsYWJlbHM6CiAgICBhcHA6IG1ldGFsbGIKc3ViamVjdHM6Ci0ga2luZDogU2VydmljZUFjY291bnQKICBuYW1lOiBtZXRhbGxiLWNvbnRyb2xsZXIKLSBraW5kOiBTZXJ2aWNlQWNjb3VudAogIG5hbWU6IG1ldGFsbGItc3BlYWtlcgpyb2xlUmVmOgogIGFwaUdyb3VwOiByYmFjLmF1dGhvcml6YXRpb24uazhzLmlvCiAga2luZDogUm9sZQogIG5hbWU6IGNvbmZpZy13YXRjaGVyCgotLS0KYXBpVmVyc2lvbjogYXBwcy92MQpraW5kOiBEYWVtb25TZXQKbWV0YWRhdGE6CiAgbmFtZXNwYWNlOiBuZXR3b3JraW5nCiAgbmFtZTogbWV0YWxsYi1zcGVha2VyCiAgbGFiZWxzOgogICAgYXBwOiBtZXRhbGxiCiAgICBjb21wb25lbnQ6IHNwZWFrZXIKc3BlYzoKICBzZWxlY3RvcjoKICAgIG1hdGNoTGFiZWxzOgogICAgICBhcHA6IG1ldGFsbGIKICAgICAgY29tcG9uZW50OiBzcGVha2VyCiAgdGVtcGxhdGU6CiAgICBtZXRhZGF0YToKICAgICAgbGFiZWxzOgogICAgICAgIGFwcDogbWV0YWxsYgogICAgICAgIGNvbXBvbmVudDogc3BlYWtlcgogICAgICBhbm5vdGF0aW9uczoKICAgICAgICBwcm9tZXRoZXVzLmlvL3NjcmFwZTogInRydWUiCiAgICAgICAgcHJvbWV0aGV1cy5pby9wb3J0OiAiNzQ3MiIKICAgIHNwZWM6CiAgICAgIHNlcnZpY2VBY2NvdW50TmFtZTogbWV0YWxsYi1zcGVha2VyCiAgICAgIHRlcm1pbmF0aW9uR3JhY2VQZXJpb2RTZWNvbmRzOiAwCiAgICAgIGhvc3ROZXR3b3JrOiB0cnVlCiAgICAgIGNvbnRhaW5lcnM6CiAgICAgIC0gbmFtZTogc3BlYWtlcgogICAgICAgIGltYWdlOiB7ey5NZXRhbExCU3BlYWtlckltYWdlfX0gCiAgICAgICAgaW1hZ2VQdWxsUG9saWN5OiBJZk5vdFByZXNlbnQKICAgICAgICBhcmdzOgogICAgICAgIC0gLS1wb3J0PTc0NzIKICAgICAgICAtIC0tY29uZmlnPW1ldGFsbGItY29uZmlnCiAgICAgICAgZW52OgogICAgICAgIC0gbmFtZTogTUVUQUxMQl9OT0RFX05BTUUKICAgICAgICAgIHZhbHVlRnJvbToKICAgICAgICAgICAgZmllbGRSZWY6CiAgICAgICAgICAgICAgZmllbGRQYXRoOiBzcGVjLm5vZGVOYW1lCiAgICAgICAgcG9ydHM6CiAgICAgICAgLSBuYW1lOiBtb25pdG9yaW5nCiAgICAgICAgICBjb250YWluZXJQb3J0OiA3NDcyCiAgICAgICAgcmVzb3VyY2VzOgogICAgICAgICAgbGltaXRzOgogICAgICAgICAgICBjcHU6IDEwMG0KICAgICAgICAgICAgbWVtb3J5OiAxMDBNaQogICAgICAgICAgCiAgICAgICAgc2VjdXJpdHlDb250ZXh0OgogICAgICAgICAgYWxsb3dQcml2aWxlZ2VFc2NhbGF0aW9uOiBmYWxzZQogICAgICAgICAgcmVhZE9ubHlSb290RmlsZXN5c3RlbTogdHJ1ZQogICAgICAgICAgY2FwYWJpbGl0aWVzOgogICAgICAgICAgICBkcm9wOgogICAgICAgICAgICAtIGFsbAogICAgICAgICAgICBhZGQ6CiAgICAgICAgICAgIC0gbmV0X3JhdwoKLS0tCmFwaVZlcnNpb246IGFwcHMvdjEKa2luZDogRGVwbG95bWVudAptZXRhZGF0YToKICBuYW1lc3BhY2U6IG5ldHdvcmtpbmcKICBuYW1lOiBtZXRhbGxiLWNvbnRyb2xsZXIKICBsYWJlbHM6CiAgICBhcHA6IG1ldGFsbGIKICAgIGNvbXBvbmVudDogY29udHJvbGxlcgpzcGVjOgogIHJldmlzaW9uSGlzdG9yeUxpbWl0OiAzCiAgc2VsZWN0b3I6CiAgICBtYXRjaExhYmVsczoKICAgICAgYXBwOiBtZXRhbGxiCiAgICAgIGNvbXBvbmVudDogY29udHJvbGxlcgogIHRlbXBsYXRlOgogICAgbWV0YWRhdGE6CiAgICAgIGxhYmVsczoKICAgICAgICBhcHA6IG1ldGFsbGIKICAgICAgICBjb21wb25lbnQ6IGNvbnRyb2xsZXIKICAgICAgYW5ub3RhdGlvbnM6CiAgICAgICAgcHJvbWV0aGV1cy5pby9zY3JhcGU6ICJ0cnVlIgogICAgICAgIHByb21ldGhldXMuaW8vcG9ydDogIjc0NzIiCiAgICBzcGVjOgogICAgICBzZXJ2aWNlQWNjb3VudE5hbWU6IG1ldGFsbGItY29udHJvbGxlcgogICAgICB0ZXJtaW5hdGlvbkdyYWNlUGVyaW9kU2Vjb25kczogMAogICAgICBzZWN1cml0eUNvbnRleHQ6CiAgICAgICAgcnVuQXNOb25Sb290OiB0cnVlCiAgICAgICAgcnVuQXNVc2VyOiA2NTUzNCAjIG5vYm9keQogICAgICBjb250YWluZXJzOgogICAgICAtIG5hbWU6IGNvbnRyb2xsZXIKICAgICAgICBpbWFnZToge3suTWV0YWxMQkNvbnRyb2xsZXJJbWFnZX19CiAgICAgICAgaW1hZ2VQdWxsUG9saWN5OiBJZk5vdFByZXNlbnQKICAgICAgICBhcmdzOgogICAgICAgIC0gLS1wb3J0PTc0NzIKICAgICAgICAtIC0tY29uZmlnPW1ldGFsbGItY29uZmlnCiAgICAgICAgcG9ydHM6CiAgICAgICAgLSBuYW1lOiBtb25pdG9yaW5nCiAgICAgICAgICBjb250YWluZXJQb3J0OiA3NDcyCiAgICAgICAgcmVzb3VyY2VzOgogICAgICAgICAgbGltaXRzOgogICAgICAgICAgICBjcHU6IDEwMG0KICAgICAgICAgICAgbWVtb3J5OiAxMDBNaQogICAgICAgICAgCiAgICAgICAgc2VjdXJpdHlDb250ZXh0OgogICAgICAgICAgYWxsb3dQcml2aWxlZ2VFc2NhbGF0aW9uOiBmYWxzZQogICAgICAgICAgY2FwYWJpbGl0aWVzOgogICAgICAgICAgICBkcm9wOgogICAgICAgICAgICAtIGFsbAogICAgICAgICAgcmVhZE9ubHlSb290RmlsZXN5c3RlbTogdHJ1ZQoKLS0tCmFwaVZlcnNpb246IHYxCmtpbmQ6IENvbmZpZ01hcAptZXRhZGF0YToKICBuYW1lc3BhY2U6IG5ldHdvcmtpbmcKICBuYW1lOiBtZXRhbGxiLWNvbmZpZwpkYXRhOgogIGNvbmZpZzogfAogICAgYWRkcmVzcy1wb29sczoKICAgIC0gbmFtZTogazhzLXRldy1pcC1zcGFjZQogICAgICBwcm90b2NvbDogbGF5ZXIyCiAgICAgIGFkZHJlc3NlczoKICAgICAge3stIHJhbmdlIC5NZXRhbExCQWRkcmVzc2VzIH19CiAgICAgIC0ge3sgLiB9fQogICAgICB7ey0gZW5kIH19Cg==\"")
	packr.PackJSONBytes("../../templates", "k8s/setup/networking/nginx-ingress.yaml", "\"\"")
	packr.PackJSONBytes("../../templates", "k8s/setup/storage/ceph-csi.yaml", "\"\"")
	packr.PackJSONBytes("../../templates", "k8s/setup/storage/ceph-secrets.yaml", "\"YXBpVmVyc2lvbjogdjEKa2luZDogTmFtZXNwYWNlCm1ldGFkYXRhOgogIG5hbWU6IHN0b3JhZ2UKCi0tLQphcGlWZXJzaW9uOiB2MQpraW5kOiBTZWNyZXQKbWV0YWRhdGE6CiAgICBuYW1lOiBjZXBoLWFkbWluCiAgICBuYW1lc3BhY2U6IHN0b3JhZ2UKdHlwZTogImt1YmVybmV0ZXMuaW8vcmJkIgpkYXRhOgogICAga2V5OiB7ey5DbGllbnRBZG1pbktleSB8IGJhc2U2NH19CgotLS0KYXBpVmVyc2lvbjogdjEKa2luZDogU2VjcmV0Cm1ldGFkYXRhOgogICAgbmFtZTogY2VwaC1rOHMtdGV3CiAgICBuYW1lc3BhY2U6IHN0b3JhZ2UKdHlwZTogImt1YmVybmV0ZXMuaW8vcmJkIgpkYXRhOgogICAga2V5OiB7ey5DbGllbnRLOFNURVdLZXkgfCBiYXNlNjR9fQoKLS0tCmFwaVZlcnNpb246IHYxCmtpbmQ6IFNlY3JldAptZXRhZGF0YToKICAgIG5hbWU6IGNzaS1yYmQtc2VjcmV0CiAgICBuYW1lc3BhY2U6IHN0b3JhZ2UKZGF0YToKICAgIGFkbWluSUQ6IHt7ImFkbWluIiB8IGJhc2U2NH19CiAgICBhZG1pbktleToge3suQ2xpZW50QWRtaW5LZXkgfCBiYXNlNjR9fQogICAgdXNlcklEOiB7eyJrOHMtdGV3IiB8IGJhc2U2NH19CiAgICB1c2VyS2V5OiB7ey5DbGllbnRLOFNURVdLZXkgfCBiYXNlNjR9fQoKLS0tCmFwaVZlcnNpb246IHYxCmtpbmQ6IFNlY3JldAptZXRhZGF0YToKICAgIG5hbWU6IGNzaS1jZXBoZnMtc2VjcmV0CiAgICBuYW1lc3BhY2U6IHN0b3JhZ2UKZGF0YToKICAgIGFkbWluSUQ6IHt7ImFkbWluIiB8IGJhc2U2NH19CiAgICBhZG1pbktleToge3suQ2xpZW50QWRtaW5LZXkgfCBiYXNlNjR9fQoK\"")
	packr.PackJSONBytes("../../templates", "k8s/setup/storage/ceph-setup.yaml", "\"\"")
	packr.PackJSONBytes("../../templates", "system/environment.sh", "\"ZXhwb3J0IFBBVEg9e3suSzhTVEVXUGF0aH19Ont7Lks4U1BhdGh9fTp7ey5FdGNkUGF0aH19Ont7LkNSSVBhdGh9fTp7ey5DTklQYXRofX06e3suVmVsZXJvUGF0aH19Ont7Lkhvc3RQYXRofX06e3suQ3VycmVudFBhdGh9fQpleHBvcnQgS1VCRUNPTkZJRz17ey5LdWJlQ29uZmlnfX0KZXhwb3J0IENPTlRBSU5FUl9SVU5USU1FX0VORFBPSU5UPXVuaXg6Ly97ey5Db250YWluZXJkU29ja319CmV4cG9ydCBDT05UQUlORVJEX05BTUVTUEFDRT1rOHMuaW8KZXhwb3J0IEVUQ0RDVExfQVBJPTMK\"")
	packr.PackJSONBytes("../../templates", "system/k8s-tew.service", "\"W1VuaXRdCkRlc2NyaXB0aW9uPXt7LlByb2plY3RUaXRsZX19CgpbU2VydmljZV0KRXhlY1N0YXJ0PXt7LkNvbW1hbmR9fSBydW4gLS1iYXNlLWRpcmVjdG9yeT17ey5CYXNlRGlyZWN0b3J5fX0gLS1oaWRlLXByb2dyZXNzIC0ta2lsbC1jb250YWluZXJzPWZhbHNlClJlc3RhcnQ9b24tZmFpbHVyZQpLaWxsU2lnbmFsPVNJR0lOVApLaWxsTW9kZT1wcm9jZXNzClJlc3RhcnRTZWM9NQpMaW1pdE5PRklMRT0xMDAwMDAwCkRlbGVnYXRlPXllcwoKW0luc3RhbGxdCldhbnRlZEJ5PW11bHRpLXVzZXIudGFyZ2V0Cg==\"")
	packr.PackJSONBytes("../../templates", "system/k8s-tew.sh", "\"IyEvYmluL3NoCgpleHBvcnQgSzhTX1RFV19CQVNFX0RJUkVDVE9SWT17ey5CYXNlRGlyZWN0b3J5fX0KCmV2YWwgJCh7ey5CaW5hcnl9fSBlbnZpcm9ubWVudCkK\"")
}
