package utils

// Versions
const VersionConfig = "2.2.0"
const VersionK8s = "k8s.gcr.io/hyperkube:v1.13.3"
const VersionEtcd = "quay.io/coreos/etcd:v3.3.9"
const VersionContainerd = "1.2.3"
const VersionRunc = "1.0.0-rc6"
const VersionCrictl = "1.13.0"
const VersionHelm = "2.12.2"
const VersionGobetween = "docker.io/yyyar/gobetween:0.6.1"
const VersionVirtualIP = "docker.io/darxkies/virtual-ip:0.1.4"
const VersionArk = "gcr.io/heptio-images/ark:v0.9.11"
const VersionMinioServer = "docker.io/minio/minio:RELEASE.2018-08-18T03-49-57Z"
const VersionMinioClient = "docker.io/minio/mc:RELEASE.2018-08-18T02-13-04Z"
const VersionPause = "k8s.gcr.io/pause:3.1"
const VersionCoredns = "docker.io/coredns/coredns:1.2.6"
const VersionElasticsearch = "docker.io/upmcenterprises/docker-elasticsearch-kubernetes:6.1.3_0"
const VersionElasticsearchCron = "docker.io/upmcenterprises/elasticsearch-cron:0.0.3"
const VersionElasticsearchOperator = "docker.io/upmcenterprises/elasticsearch-operator:0.0.12"
const VersionKibana = "docker.elastic.co/kibana/kibana-oss:6.1.3"
const VersionCerebro = "docker.io/upmcenterprises/cerebro:0.6.8"
const VersionFluentBit = "docker.io/fluent/fluent-bit:0.13.0"
const VersionCalicoTypha = "quay.io/calico/typha:v3.3.1"
const VersionCalicoNode = "quay.io/calico/node:v3.3.1"
const VersionCalicoCni = "quay.io/calico/cni:v3.3.1"
const VersionCeph = "docker.io/ceph/daemon:v3.0.7-stable-3.0-mimic-centos-7-x86_64"
const VersionHeapster = "k8s.gcr.io/heapster:v1.3.0"
const VersionAddonResizer = "k8s.gcr.io/addon-resizer:1.7"
const VersionKubernetesDashboard = "k8s.gcr.io/kubernetes-dashboard-amd64:v1.10.1"
const VersionCertManagerController = "quay.io/jetstack/cert-manager-controller:v0.4.1"
const VersionNginxIngressDefaultBackend = "k8s.gcr.io/defaultbackend:1.4"
const VersionNginxIngressController = "quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.18.0"
const VersionMetricsServer = "gcr.io/google_containers/metrics-server-amd64:v0.2.1"
const VersionPrometheusOperator = "quay.io/coreos/prometheus-operator:v0.20.0"
const VersionPrometheusConfigReloader = "quay.io/coreos/prometheus-config-reloader:v0.20.0"
const VersionConfigmapReload = "quay.io/coreos/configmap-reload:v0.0.1"
const VersionKubeStateMetrics = "gcr.io/google_containers/kube-state-metrics:v1.2.0"
const VersionGrafana = "docker.io/grafana/grafana:5.0.0"
const VersionGrafanaWatcher = "quay.io/coreos/grafana-watcher:v0.0.8"
const VersionPrometheus = "quay.io/prometheus/prometheus:v2.2.1"
const VersionPrometheusNodeExporter = "quay.io/prometheus/node-exporter:v0.15.2"
const VersionPrometheusAlertManager = "quay.io/prometheus/alertmanager:v0.15.1"
const VersionCsiAttacher = "quay.io/k8scsi/csi-attacher:v0.3.0"
const VersionCsiProvisioner = "quay.io/k8scsi/csi-provisioner:v0.3.0"
const VersionCsiDriverRegistrar = "quay.io/k8scsi/driver-registrar:v0.3.0"
const VersionCsiCephRbdPlugin = "quay.io/cephcsi/rbdplugin:v0.3.0"
const VersionCsiCephFsPlugin = "quay.io/cephcsi/cephfsplugin:v0.3.0"
const VersionMysql = "docker.io/library/mysql:5.6"
const VersionWordpress = "docker.io/library/wordpress:4.8-apache"

// Settings
const ProjectTitle = "Kubernetes - The Easier Way"
const ClusterName = "k8s-tew"
const RsaSize = 2048
const CaValidityPeriod = 20
const ClientValidityPeriod = 15
const BaseDirectory = "assets"
const ClusterDomain = "cluster.local"
const ClusterIpRange = "10.32.0.0/24"
const CalicoTyphaIp = "10.32.0.5"
const ClusterDnsIp = "10.32.0.10"
const ClusterCidr = "10.200.0.0/16"
const ResolvConf = "/etc/resolv.conf"
const PublicNetwork = "192.168.100.0/24"
const HelmServiceAccount = "tiller"
const Email = "k8s-tew@gmail.com"
const DeploymentDirectory = "/"
const IngressDomain = "k8s-tew.net"
const IngressSubdomainWordpress = "wordpress"

// Ports
const PortVipRaftController uint16 = 16277
const PortVipRaftWorker uint16 = 16728
const PortLoadBalancer uint16 = 16443
const PortKubernetesDashboard uint16 = 32443
const PortApiServer uint16 = 6443
const PortCephManager uint16 = 30700
const PortCephRadosGateway uint16 = 30750
const PortMinio uint16 = 30800
const PortGrafana uint16 = 30900
const PortKibana uint16 = 30980
const PortCerebro uint16 = 30990
const PortWordpress uint16 = 30100

// URLs
const K8sBaseName = "kubernetes-node-linux-amd64"
const K8sDownloadUrl = "https://storage.googleapis.com/kubernetes-release/release/{{.Versions.K8S | image_tag}}/{{.Filename}}.tar.gz"
const EtcdBaseName = "etcd-{{.Versions.Etcd | image_tag}}-linux-amd64"
const EtcdDownloadUrl = "https://github.com/coreos/etcd/releases/download/{{.Versions.Etcd | image_tag}}/{{.Filename}}.tar.gz"
const CniBaseName = "cni-plugins-amd64-v{{.Versions.CNI}}"
const CniDownloadUrl = "https://github.com/containernetworking/plugins/releases/download/v{{.Versions.CNI}}/{{.Filename}}.tgz"
const ContainerdBaseName = "containerd-{{.Versions.Containerd}}.linux-amd64"
const ContainerdDownloadUrl = "https://github.com/containerd/containerd/releases/download/v{{.Versions.Containerd}}/{{.Filename}}.tar.gz"
const RuncDownloadUrl = "https://github.com/opencontainers/runc/releases/download/v{{.Versions.Runc}}/runc.amd64"
const CrictlBaseName = "crictl-v{{.Versions.CriCtl}}-linux-amd64"
const CrictlDownloadUrl = "https://github.com/kubernetes-incubator/cri-tools/releases/download/v{{.Versions.CriCtl}}/{{.Filename}}.tar.gz"
const GobetweenBaseName = "gobetween_{{.Versions.Gobetween}}_linux_amd64"
const GobetweenDownloadUrl = "https://github.com/yyyar/gobetween/releases/download/{{.Versions.Gobetween}}/{{.Filename}}.tar.gz"
const HelmBaseName = "helm-v{{.Versions.Helm}}-linux-amd64"
const HelmDownloadUrl = "https://storage.googleapis.com/kubernetes-helm/{{.Filename}}.tar.gz"
const ArkBaseName = "ark-{{.Versions.Ark | image_tag}}-linux-amd64"
const ArkDownloadUrl = "https://github.com/heptio/ark/releases/download/{{.Versions.Ark | image_tag}}/{{.Filename}}.tar.gz"

// Config
const ConfigFilename = "config.yaml"

// Node Labels
const NodeBootstrapper = "bootstrapper"
const NodeController = "controller"
const NodeWorker = "worker"
const NodeStorage = "storage"

// Features
const FeatureStorage = "storage"
const FeatureMonitoring = "monitoring"
const FeatureLogging = "logging"
const FeatureBackup = "backup"
const FeatureShowcase = "showcase"
const FeatureIngress = "ingress"
const FeaturePackaging = "packaging"

// OS
const OsUbuntu = "ubuntu"
const OsUbuntu1804 = "ubuntu/18.04"
const OsCentos = "centos"
const OsCentos75 = "centos/7.5"

// Sub-Directories
const SubdirectoryTemporary = "tmp"
const SubdirectoryConfig = "etc"
const SubdirectorySystemd = "systemd"
const SubdirectorySystem = "system"
const SubdirectoryK8sTew = "k8s-tew"
const SubdirectoryCertificates = "ssl"
const SubdirectoryOptional = "opt"
const SubdirectoryVariable = "var"
const SubdirectoryLogging = "log"
const SubdirectoryLibrary = "lib"
const SubdirectoryRun = "run"
const SubdirectoryBinary = "bin"
const SubdirectoryK8s = "k8s"
const SubdirectoryEtcd = "etcd"
const SubdirectoryCri = "cri"
const SubdirectoryCni = "cni"
const SubdirectoryKubeconfig = "kubeconfig"
const SubdirectorySecurity = "security"
const SubdirectorySetup = "setup"
const SubdirectoryContainerd = "containerd"
const SubdirectoryImages = "images"
const SubdirectoryProfileD = "profile.d"
const SubdirectoryLoadBalancer = "lb"
const SubdirectoryHelm = "helm"
const SubdirectoryKubelet = "kubelet"
const SubdirectoryPods = "pods"
const SubdirectoryManifests = "manifests"
const SubdirectoryCeph = "ceph"
const SubdirectoryCephBootstrapMds = "bootstrap-mds"
const SubdirectoryCephBootstrapOsd = "bootstrap-osd"
const SubdirectoryCephBootstrapRbd = "bootstrap-rbd"
const SubdirectoryCephBootstrapRgw = "bootstrap-rgw"
const SubdirectoryArk = "ark"
const SubdirectoryBashCompletion = "bash_completion.d"
const SubdirectoryHost = "host"
const SubdirectoryPlugins = "plugins"
const SubdirectoryCsiCephfsPlugin = "csi-cephfsplugin"
const SubdirectoryCsiRbdPlugin = "csi-rbdplugin"

// Directories
const DirectoryConfig = "config"
const DirectoryCertificates = "certificates"
const DirectoryCniConfig = "cni-config"
const DirectoryCriConfig = "cri-config"
const DirectoryK8sSecurityConfig = "security-config"
const DirectoryK8sConfig = "k8s-config"
const DirectoryK8sKubeConfig = "kube-config"
const DirectoryK8sSetupConfig = "setup-config"
const DirectoryBinaries = "binaries"
const DirectoryK8sBinaries = "k8s-binaries"
const DirectoryEtcdBinaries = "etcd-binaries"
const DirectoryCniBinaries = "cni-binaries"
const DirectoryCriBinaries = "cri-binaries"
const DirectoryDynamicData = "dynamic-data"
const DirectoryEtcdData = "etcd-data"
const DirectoryContainerdData = "containerd-data"
const DirectoryImages = "images"
const DirectoryLogging = "logging"
const DirectoryService = "service"
const DirectoryContainerdState = "containerd-state"
const DirectoryAbsoluteContainerdState = "absolute-containerd-state"
const DirectoryProfile = "profile"
const DirectoryGobetweenBinaries = "gobetween-binaries"
const DirectoryGobetweenConfig = "gobetween-config"
const DirectoryHelmData = "helm-data"
const DirectoryKubeletData = "kubelet-data"
const DirectoryPodsData = "pods-data"
const DirectoryTemporary = "temporary"
const DirectoryK8sManifests = "kubelet-manifests"
const DirectoryCeph = "ceph"
const DirectoryCephConfig = "ceph-config"
const DirectoryCephData = "ceph-data"
const DirectoryCephBootstrapMds = "bootstrap-mds"
const DirectoryCephBootstrapOsd = "bootstrap-osd"
const DirectoryCephBootstrapRbd = "bootstrap-rbd"
const DirectoryCephBootstrapRgw = "bootstrap-rgw"
const DirectoryArkBinaries = "ark"
const DirectoryBashCompletion = "bash-completion"
const DirectoryHostBinaries = "host-binaries"
const DirectoryCephRbdPlugin = "ceph-rbd-plugin"
const DirectoryCephFsPlugin = "ceph-fs-plugin"
const DirectoryKubeletPlugins = "kubelet-plugins"
const DirectoryVarRun = "var-run"
const DirectoryRun = "run"

// Binaries
const BinaryK8sTew = "k8s-tew"
const BinaryHelm = "helm"
const BinaryContainerd = "containerd"
const BinaryContainerdShim = "containerd-shim"
const BinaryCtr = "ctr"
const BinaryRunc = "runc"
const BinaryCrictl = "crictl"
const BinaryEtcd = "etcd"
const BinaryEtcdctl = "etcdctl"
const BinaryKubectl = "kubectl"
const BinaryKubelet = "kubelet"
const BinaryGobetween = "gobetween"
const BinaryArk = "ark"

// Certificates
const PemCa = "ca.pem"
const PemCaKey = "ca-key.pem"
const PemKubernetes = "kubernetes.pem"
const PemKubernetesKey = "kubernetes-key.pem"
const PemAdmin = "admin.pem"
const PemAdminKey = "admin-key.pem"
const PemProxy = "proxy.pem"
const PemProxyKey = "proxy-key.pem"
const PemControllerManager = "controller-manager.pem"
const PemControllerManagerKey = "controller-manager-key.pem"
const PemScheduler = "scheduler.pem"
const PemSchedulerKey = "scheduler-key.pem"
const PemKubelet = "kubelet-{{.Name}}.pem"
const PemKubeletKey = "kubelet-{{.Name}}-key.pem"
const PemServiceAccount = "service-account.pem"
const PemServiceAccountKey = "service-account-key.pem"
const PemVirtualIp = "virtual-ip.pem"
const PemVirtualIpKey = "virtual-ip-key.pem"
const PemAggregator = "aggregator.pem"
const PemAggregatorKey = "aggregator-key.pem"

// Kubeconfig
const KubeconfigAdmin = "admin.kubeconfig"
const KubeconfigControllerManager = "controller-manager.kubeconfig"
const KubeconfigScheduler = "scheduler.kubeconfig"
const KubeconfigProxy = "proxy.kubeconfig"
const KubeconfigKubelet = "kubelet-{{.Name}}.kubeconfig"

// Manifests
const ManifestEtcd = "etcd-{{.Name}}.yaml"
const ManifestKubeApiserver = "kube-apiserver-{{.Name}}.yaml"
const ManifestKubeControllerManager = "kube-controller-manager-{{.Name}}.yaml"
const ManifestKubeScheduler = "kube-scheduler-{{.Name}}.yaml"
const ManifestKubeProxy = "kube-proxy-{{.Name}}.yaml"
const ManifestGobetween = "gobetween-{{.Name}}.yaml"
const ManifestControllerVirtualIP = "controller-virtual-ip-{{.Name}}.yaml"
const ManifestWorkerVirtualIP = "worker-virtual-ip-{{.Name}}.yaml"

// Security
const EncryptionConfig = "encryption-config.yaml"

// Containerd
const ContainerdConfig = "config-{{.Name}}.toml"
const ContainerdSock = "containerd.sock"

// K8S Config
const K8sKubeletSetup = "kubelet-setup.yaml"
const K8sAdminUserSetup = "admin-user-setup.yaml"
const K8sHelmUserSetup = "helm-user-setup.yaml"
const K8sKubeSchedulerConfig = "kube-scheduler-config.yaml"
const K8sKubeletConfig = "kubelet-{{.Name}}-config.yaml"
const K8sCorednsSetup = "coredns-setup.yaml"
const K8sCalicoSetup = "calico-setup.yaml"
const K8sElasticsearchOperatorSetup = "elasticsearch-operator-setup.yaml"
const K8sEfkSetup = "efk-setup.yaml"
const K8sArkSetup = "ark-setup.yaml"
const K8sHeapsterSetup = "heapster-setup.yaml"
const K8sKubernetesDashboardSetup = "kubernetes-dashboard-setup.yaml"
const K8sCertManagerSetup = "cert-manager-setup.yaml"
const K8sNginxIngressSetup = "nginx-ingress-setup.yaml"
const K8sMetricsServerSetup = "metrics-server-setup.yaml"
const K8sPrometheusOperatorSetup = "prometheus-operator-setup.yaml"
const K8sKubePrometheusSetup = "kube-prometheus-setup.yaml"
const K8sKubePrometheusDatasourceSetup = "kube-prometheus-datasource-setup.yaml"
const K8sKubePrometheusKubernetesClusterStatusDashboardSetup = "kube-prometheus-kubernetes-cluster-status-dashboard-setup.yaml"
const K8sKubePrometheusPodsDashboardSetup = "kube-prometheus-pods-dashboard-setup.yaml"
const K8sKubePrometheusDeploymentDashboardSetup = "kube-prometheus-deployment-dashboard-setup.yaml"
const K8sKubePrometheusKubernetesControlPlaneStatusDashboardSetup = "kube-prometheus-kubernetes-control-plane-status-dashboard-setup.yaml"
const K8sKubePrometheusStatefulsetDashboardSetup = "kube-prometheus-statefulset-dashboard-setup.yaml"
const K8sKubePrometheusKubernetesCapacityPlanningDashboardSetup = "kube-prometheus-kubernetes-capacity-planning-dashboard-setup.yaml"
const K8sKubePrometheusKubernetesResourceRequestsDashboardSetup = "kube-prometheus-kubernetes-resource-requests-dashboard-setup.yaml"
const K8sKubePrometheusKubernetesClusterHealthDashboardSetup = "kube-prometheus-kubernetes-cluster-health-dashboard-setup.yaml"
const K8sKubePrometheusNodesDashboardSetup = "kube-prometheus-nodes-dashboard-setup.yaml"
const WordpressSetup = "wordpress-setup.yaml"

// Gobetween Config
const GobetweenConfig = "config.toml"

// Profile
const K8sTewProfile = "k8s-tew.sh"

// Bash Completion
const BashCompletionK8sTew = "k8s-tew.bash-completion"
const BashCompletionKubectl = "kubectl.bash-completion"
const BashCompletionHelm = "helm.bash-completion"
const BashCompletionArk = "ark.bash-completion"
const BashCompletionCrictl = "crictl.bash-completion"

// Logging
const AuditLog = "audit.log"

// Deployment
const DeploymentUser = "root"

// Service
const ServiceName = "k8s-tew"
const ServiceConfig = ServiceName + ".service"

// Ceph
const CephRbdPoolName = "cephrbd"
const CephFsPoolName = "cephfs"
const CephConfig = "ceph.conf"
const CephClientAdminKeyring = "ceph.client.admin.keyring"
const CephMonitorKeyring = "ceph.mon.keyring"
const CephKeyring = "ceph.keyring"
const CephBootstrapMdsKeyring = "ceph.bootstrap.mds.keyring"
const CephBootstrapOsdKeyring = "ceph.bootstrap.osd.keyring"
const CephBootstrapRbdKeyring = "ceph.bootstrap.rbd.keyring"
const CephBootstrapRgwKeyring = "ceph.bootstrap.rgw.keyring"
const CephSecrets = "ceph-secrets.yaml"
const CephSetup = "ceph-setup.yaml"
const CephCsi = "ceph-csi.yaml"

// Cluster Issuer
const LetsencryptClusterIssuer = "letsencrypt-cluster-issuer.yaml"

// Environment variables
const K8sTewBaseDirectory = "K8S_TEW_BASE_DIRECTORY"

// Virtual IP Manager
const ElectionNamespace = "/k8s-tew"
const ElectionController = "/controller-vip-manager"
const ElectionWorker = "/worker-vip-manager"

// Common Names
const CnAdmin = "admin"
const CnAggregator = "aggregator"
const CnSystemKubeControllerManager = "system:kube-controller-manager"
const CnSystemKubeScheduler = "system:kube-scheduler"
const CnSystemKubeProxy = "system:kube-proxy"
const CnSystemNodePrefix = "system:node:%s"

// Templates
const TemplateContainerdToml = "k8s/cri/containerd.toml"
const TemplateK8sTewService = "system/k8s-tew.service"
const TemplateK8sTewProfile = "system/k8s-tew.sh"
const TemplateEnvironment = "system/environment.sh"
const TemplateGobetweenToml = "k8s/lb/gobetween.toml"
const TemplateKubeSchedulerConfiguration = "k8s/kube-scheduler-configuration.yaml"
const TemplateKubeletConfiguration = "k8s/kubelet-configuration.yaml"
const TemplateEncryptionConfig = "k8s/encryption-config.yaml"
const TemplateKubeconfig = "k8s/kubeconfig.yaml"
const TemplateServiceAccount = "k8s/service-account.yaml"
const TemplateKubeletSetup = "k8s/setup/kubelet-setup.yaml"
const TemplateCephClientKeyring = "ceph/client.keyring"
const TemplateCephClientAdminKeyring = "ceph/client-admin.keyring"
const TemplateCephMonitorKeyring = "ceph/monitor.keyring"
const TemplateCephConfig = "ceph/ceph.conf"
const TemplateCephSecrets = "k8s/setup/storage/ceph-secrets.yaml"
const TemplateCephSetup = "k8s/setup/storage/ceph-setup.yaml"
const TemplateCephCsi = "k8s/setup/storage/ceph-csi.yaml"
const TemplateLetsencryptClusterIssuerSetup = "k8s/setup/ingress/letsencrypt-cluster-issuer.yaml"
const TemplateCorednsSetup = "k8s/setup/dns/coredns.yaml"
const TemplateCalicoSetup = "k8s/setup/networking/calico.yaml"
const TemplateElasticsearchOperatorSetup = "k8s/setup/logging/elasticsearch-operator.yaml"
const TemplateEfkSetup = "k8s/setup/logging/efk.yaml"
const TemplateArkSetup = "k8s/setup/backup/ark.yaml"
const TemplateHeapsterSetup = "k8s/setup/monitoring/heapster.yaml"
const TemplateKubernetesDashboardSetup = "k8s/setup/management/kubernetes-dashboard.yaml"
const TemplateCertManagerSetup = "k8s/setup/networking/cert-manager.yaml"
const TemplateNginxIngressSetup = "k8s/setup/networking/nginx-ingress.yaml"
const TemplateMetricsServerSetup = "k8s/setup/monitoring/metrics-server.yaml"
const TemplatePrometheusOperatorSetup = "k8s/setup/monitoring/prometheus-operator.yaml"
const TemplateKubePrometheusSetup = "k8s/setup/monitoring/kube-prometheus.yaml"
const TemplateKubePrometheusDatasourceSetup = "k8s/setup/monitoring/kube-prometheus-datasource.yaml"
const TemplateKubePrometheusKubernetesClusterStatusDashboardSetup = "k8s/setup/monitoring/kube-prometheus-kubernetes-cluster-status-dashboard.yaml"
const TemplateKubePrometheusPodsDashboardSetup = "k8s/setup/monitoring/kube-prometheus-pods-dashboard.yaml"
const TemplateKubePrometheusDeploymentDashboardSetup = "k8s/setup/monitoring/kube-prometheus-deployment-dashboard.yaml"
const TemplateKubePrometheusKubernetesControlPlaneStatusDashboardSetup = "k8s/setup/monitoring/kube-prometheus-kubernetes-control-plane-status-dashboard.yaml"
const TemplateKubePrometheusStatefulsetDashboardSetup = "k8s/setup/monitoring/kube-prometheus-statefulset-dashboard.yaml"
const TemplateKubePrometheusKubernetesCapacityPlanningDashboardSetup = "k8s/setup/monitoring/kube-prometheus-kubernetes-capacity-planning-dashboard.yaml"
const TemplateKubePrometheusKubernetesResourceRequestsDashboardSetup = "k8s/setup/monitoring/kube-prometheus-kubernetes-resource-requests-dashboard.yaml"
const TemplateKubePrometheusKubernetesClusterHealthDashboardSetup = "k8s/setup/monitoring/kube-prometheus-kubernetes-cluster-health-dashboard.yaml"
const TemplateKubePrometheusNodesDashboardSetup = "k8s/setup/monitoring/kube-prometheus-nodes-dashboard.yaml"
const TemplateWordpressSetup = "k8s/setup/miscellaneous/wordpress.yaml"
const TemplateManifestEtcd = "k8s/manifests/etcd.yaml"
const TemplateManifestKubeApiserver = "k8s/manifests/kube-apiserver.yaml"
const TemplateManifestKubeControllerManager = "k8s/manifests/kube-controller-manager.yaml"
const TemplateManifestKubeScheduler = "k8s/manifests/kube-scheduler.yaml"
const TemplateManifestKubeProxy = "k8s/manifests/kube-proxy.yaml"
const TemplateManifestGobetween = "k8s/manifests/gobetween.yaml"
const TemplateManifestVirtualIP = "k8s/manifests/virtual-ip.yaml"

const ControllerOnlyTaintKey = "node-role.kubernetes.io/master"
const WorkerOnlyTaintKey = "node-role.kubernetes.io/worker"
const StorageOnlyTaintKey = "node-role.kubernetes.io/storage"
const ConcurrentSshConnectionsLimit = 10
