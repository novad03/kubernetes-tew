package utils

// Versions
const VersionConfig = "2.1.0"
const VersionK8s = "1.12.1"
const VersionEtcd = "3.3.9"
const VersionContainerd = "1.1.4"
const VersionRunc = "1.0.0-rc5"
const VersionCrictl = "1.12.0"
const VersionGobetween = "0.6.0"
const VersionHelm = "2.11.0"
const VersionArk = "gcr.io/heptio-images/ark:v0.9.7"
const VersionMinioServer = "docker.io/minio/minio:RELEASE.2018-08-18T03-49-57Z"
const VersionMinioClient = "docker.io/minio/mc:RELEASE.2018-08-18T02-13-04Z"
const VersionPause = "k8s.gcr.io/pause:3.1"
const VersionCoredns = "docker.io/coredns/coredns:1.2.0"
const VersionElasticsearch = "docker.io/upmcenterprises/docker-elasticsearch-kubernetes:6.1.3_0"
const VersionElasticsearchCron = "docker.io/upmcenterprises/elasticsearch-cron:0.0.3"
const VersionElasticsearchOperator = "docker.io/upmcenterprises/elasticsearch-operator:0.0.12"
const VersionKibana = "docker.elastic.co/kibana/kibana-oss:6.1.3"
const VersionCerebro = "docker.io/upmcenterprises/cerebro:0.6.8"
const VersionFluentBit = "docker.io/fluent/fluent-bit:0.13.0"
const VersionCalicoTypha = "quay.io/calico/typha:v0.7.4"
const VersionCalicoNode = "quay.io/calico/node:v3.1.3"
const VersionCalicoCni = "quay.io/calico/cni:v3.1.3"
const VersionCeph = "docker.io/ceph/daemon:v3.0.7-stable-3.0-mimic-centos-7-x86_64"
const VersionHeapster = "k8s.gcr.io/heapster:v1.3.0"
const VersionAddonResizer = "k8s.gcr.io/addon-resizer:1.7"
const VersionKubernetesDashboard = "k8s.gcr.io/kubernetes-dashboard-amd64:v1.10.0"
const VersionCertManagerController = "quay.io/jetstack/cert-manager-controller:v0.4.1"
const VersionNginxIngressDefaultBackend = "k8s.gcr.io/defaultbackend:1.4"
const VersionNginxIngressController = "quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.18.0"
const VersionMetricsServer = "gcr.io/google_containers/metrics-server-amd64:v0.2.1"
const VersionPrometheusOperator = "quay.io/coreos/prometheus-operator:v0.20.0"
const VersionPrometheusConfigReloader = "quay.io/coreos/prometheus-config-reloader:v0.20.0"
const VersionConfigmapReload = "quay.io/coreos/configmap-reload:v0.0.1"
const VersionKubeStateMetrics = "gcr.io/google_containers/kube-state-metrics:v1.2.0"
const VersionGrafana = "docker.io/grafana/grafana:5.0.0"
const VersionGrafanaWatcher = "quay.io/coreos/grafana-watcher:v0.0.8"
const VersionPrometheus = "quay.io/prometheus/prometheus:v2.2.1"
const VersionPrometheusNodeExporter = "quay.io/prometheus/node-exporter:v0.15.2"
const VersionPrometheusAlertManager = "quay.io/prometheus/alertmanager:v0.15.1"
const VersionCsiAttacher = "quay.io/k8scsi/csi-attacher:v0.3.0"
const VersionCsiProvisioner = "quay.io/k8scsi/csi-provisioner:v0.3.0"
const VersionCsiDriverRegistrar = "quay.io/k8scsi/driver-registrar:v0.3.0"
const VersionCsiCephRbdPlugin = "quay.io/cephcsi/rbdplugin:v0.3.0"
const VersionCsiCephFsPlugin = "quay.io/cephcsi/cephfsplugin:v0.3.0"
const VersionMysql = "docker.io/library/mysql:5.6"
const VersionWordpress = "docker.io/library/wordpress:4.8-apache"

// Settings
const ProjectTitle = "Kubernetes - The Easier Way"
const ClusterName = "k8s-tew"
const RsaSize = 2048
const CaValidityPeriod = 20
const ClientValidityPeriod = 15
const BaseDirectory = "assets"
const ClusterDomain = "cluster.local"
const ClusterIpRange = "10.32.0.0/24"
const CalicoTyphaIp = "10.32.0.5"
const ClusterDnsIp = "10.32.0.10"
const ClusterCidr = "10.200.0.0/16"
const ResolvConf = "/etc/resolv.conf"
const PublicNetwork = "192.168.100.0/24"
const HelmServiceAccount = "tiller"
const Email = "k8s-tew@gmail.com"
const DeploymentDirectory = "/"
const IngressDomain = "k8s-tew.net"
const IngressSubdomainWordpress = "wordpress"

// Ports
const PortVipRaftController uint16 = 16277
const PortVipRaftWorker uint16 = 16728
const PortLoadBalancer uint16 = 16443
const PortKubernetesDashboard uint16 = 32443
const PortApiServer uint16 = 6443
const PortCephManager uint16 = 30700
const PortCephRadosGateway uint16 = 30750
const PortMinio uint16 = 30800
const PortGrafana uint16 = 30900
const PortKibana uint16 = 30980
const PortCerebro uint16 = 30990
const PortWordpress uint16 = 30100

// URLs
const K8sBaseName = "kubernetes-server-linux-amd64"
const K8sDownloadUrl = "https://storage.googleapis.com/kubernetes-release/release/v{{.Versions.K8S}}/{{.Filename}}.tar.gz"
const EtcdBaseName = "etcd-v{{.Versions.Etcd}}-linux-amd64"
const EtcdDownloadUrl = "https://github.com/coreos/etcd/releases/download/v{{.Versions.Etcd}}/{{.Filename}}.tar.gz"
const CniBaseName = "cni-plugins-amd64-v{{.Versions.CNI}}"
const CniDownloadUrl = "https://github.com/containernetworking/plugins/releases/download/v{{.Versions.CNI}}/{{.Filename}}.tgz"
const ContainerdBaseName = "containerd-{{.Versions.Containerd}}.linux-amd64"
const ContainerdDownloadUrl = "https://github.com/containerd/containerd/releases/download/v{{.Versions.Containerd}}/{{.Filename}}.tar.gz"
const RuncDownloadUrl = "https://github.com/opencontainers/runc/releases/download/v{{.Versions.Runc}}/runc.amd64"
const CrictlBaseName = "crictl-v{{.Versions.CriCtl}}-linux-amd64"
const CrictlDownloadUrl = "https://github.com/kubernetes-incubator/cri-tools/releases/download/v{{.Versions.CriCtl}}/{{.Filename}}.tar.gz"
const GobetweenBaseName = "gobetween_{{.Versions.Gobetween}}_linux_amd64"
const GobetweenDownloadUrl = "https://github.com/yyyar/gobetween/releases/download/{{.Versions.Gobetween}}/{{.Filename}}.tar.gz"
const HelmBaseName = "helm-v{{.Versions.Helm}}-linux-amd64"
const HelmDownloadUrl = "https://storage.googleapis.com/kubernetes-helm/{{.Filename}}.tar.gz"
const ArkBaseName = "ark-{{.Versions.Ark | image_tag}}-linux-amd64"
const ArkDownloadUrl = "https://github.com/heptio/ark/releases/download/{{.Versions.Ark | image_tag}}/{{.Filename}}.tar.gz"

// Config
const ConfigFilename = "config.yaml"

// Node Labels
const NodeBootstrapper = "bootstrapper"
const NodeController = "controller"
const NodeWorker = "worker"
const NodeStorage = "storage"

// Features
const FeatureStorage = "storage"
const FeatureMonitoring = "monitoring"
const FeatureLogging = "logging"
const FeatureBackup = "backup"
const FeatureShowcase = "showcase"
const FeatureIngress = "ingress"
const FeaturePackaging = "packaging"

// OS
const OsUbuntu = "ubuntu"
const OsUbuntu1804 = "ubuntu/18.04"
const OsCentos = "centos"
const OsCentos75 = "centos/7.5"

// Sub-Directories
const SubdirectoryTemporary = "tmp"
const SubdirectoryConfig = "etc"
const SubdirectorySystemd = "systemd"
const SubdirectorySystem = "system"
const SubdirectoryK8sTew = "k8s-tew"
const SubdirectoryCertificates = "ssl"
const SubdirectoryOptional = "opt"
const SubdirectoryVariable = "var"
const SubdirectoryLogging = "log"
const SubdirectoryLibrary = "lib"
const SubdirectoryRun = "run"
const SubdirectoryBinary = "bin"
const SubdirectoryK8s = "k8s"
const SubdirectoryEtcd = "etcd"
const SubdirectoryCri = "cri"
const SubdirectoryCni = "cni"
const SubdirectoryKubeconfig = "kubeconfig"
const SubdirectorySecurity = "security"
const SubdirectorySetup = "setup"
const SubdirectoryContainerd = "containerd"
const SubdirectoryProfileD = "profile.d"
const SubdirectoryLoadBalancer = "lb"
const SubdirectoryHelm = "helm"
const SubdirectoryKubelet = "kubelet"
const SubdirectoryPods = "pods"
const SubdirectoryManifests = "manifests"
const SubdirectoryCeph = "ceph"
const SubdirectoryCephBootstrapMds = "bootstrap-mds"
const SubdirectoryCephBootstrapOsd = "bootstrap-osd"
const SubdirectoryCephBootstrapRbd = "bootstrap-rbd"
const SubdirectoryCephBootstrapRgw = "bootstrap-rgw"
const SubdirectoryArk = "ark"
const SubdirectoryBashCompletion = "bash_completion.d"
const SubdirectoryHost = "host"
const SubdirectoryPlugins = "plugins"
const SubdirectoryCsiCephfsPlugin = "csi-cephfsplugin"
const SubdirectoryCsiRbdPlugin = "csi-rbdplugin"

// Directories
const DirectoryConfig = "config"
const DirectoryCertificates = "certificates"
const DirectoryCniConfig = "cni-config"
const DirectoryCriConfig = "cri-config"
const DirectoryK8sSecurityConfig = "security-config"
const DirectoryK8sConfig = "k8s-config"
const DirectoryK8sKubeConfig = "kube-config"
const DirectoryK8sSetupConfig = "setup-config"
const DirectoryBinaries = "binaries"
const DirectoryK8sBinaries = "k8s-binaries"
const DirectoryEtcdBinaries = "etcd-binaries"
const DirectoryCniBinaries = "cni-binaries"
const DirectoryCriBinaries = "cri-binaries"
const DirectoryDynamicData = "dynamic-data"
const DirectoryEtcdData = "etcd-data"
const DirectoryContainerdData = "containerd-data"
const DirectoryLogging = "logging"
const DirectoryService = "service"
const DirectoryContainerdState = "containerd-state"
const DirectoryAbsoluteContainerdState = "absolute-containerd-state"
const DirectoryProfile = "profile"
const DirectoryGobetweenBinaries = "gobetween-binaries"
const DirectoryGobetweenConfig = "gobetween-config"
const DirectoryHelmData = "helm-data"
const DirectoryKubeletData = "kubelet-data"
const DirectoryPodsData = "pods-data"
const DirectoryTemporary = "temporary"
const DirectoryK8sManifests = "kubelet-manifests"
const DirectoryCeph = "ceph"
const DirectoryCephConfig = "ceph-config"
const DirectoryCephData = "ceph-data"
const DirectoryCephBootstrapMds = "bootstrap-mds"
const DirectoryCephBootstrapOsd = "bootstrap-osd"
const DirectoryCephBootstrapRbd = "bootstrap-rbd"
const DirectoryCephBootstrapRgw = "bootstrap-rgw"
const DirectoryArkBinaries = "ark"
const DirectoryBashCompletion = "bash-completion"
const DirectoryHostBinaries = "host-binaries"
const DirectoryCephRbdPlugin = "ceph-rbd-plugin"
const DirectoryCephFsPlugin = "ceph-fs-plugin"
const DirectoryKubeletPlugins = "kubelet-plugins"

// Binaries
const BinaryK8sTew = "k8s-tew"
const BinaryHelm = "helm"
const BinaryContainerd = "containerd"
const BinaryContainerdShim = "containerd-shim"
const BinaryCtr = "ctr"
const BinaryRunc = "runc"
const BinaryCrictl = "crictl"
const BinaryEtcd = "etcd"
const BinaryEtcdctl = "etcdctl"
const BinaryKubectl = "kubectl"
const BinaryKubeApiserver = "kube-apiserver"
const BinaryKubeControllerManager = "kube-controller-manager"
const BinaryKubelet = "kubelet"
const BinaryKubeProxy = "kube-proxy"
const BinaryKubeScheduler = "kube-scheduler"
const BinaryGobetween = "gobetween"
const BinaryArk = "ark"

// Certificates
const CA_PEM = "ca.pem"
const CA_KEY_PEM = "ca-key.pem"
const KUBERNETES_PEM = "kubernetes.pem"
const KUBERNETES_KEY_PEM = "kubernetes-key.pem"
const ADMIN_PEM = "admin.pem"
const ADMIN_KEY_PEM = "admin-key.pem"
const PROXY_PEM = "proxy.pem"
const PROXY_KEY_PEM = "proxy-key.pem"
const CONTROLLER_MANAGER_PEM = "controller-manager.pem"
const CONTROLLER_MANAGER_KEY_PEM = "controller-manager-key.pem"
const SCHEDULER_PEM = "scheduler.pem"
const SCHEDULER_KEY_PEM = "scheduler-key.pem"
const KUBELET_PEM = "kubelet-{{.Name}}.pem"
const KUBELET_KEY_PEM = "kubelet-{{.Name}}-key.pem"
const SERVICE_ACCOUNT_PEM = "service-account.pem"
const SERVICE_ACCOUNT_KEY_PEM = "service-account-key.pem"
const FLANNELD_PEM = "flanneld.pem"
const FLANNELD_KEY_PEM = "flanneld-key.pem"
const VIRTUAL_IP_PEM = "virtual-ip.pem"
const VIRTUAL_IP_KEY_PEM = "virtual-ip-key.pem"
const AGGREGATOR_PEM = "aggregator.pem"
const AGGREGATOR_KEY_PEM = "aggregator-key.pem"

// Kubeconfig
const ADMIN_KUBECONFIG = "admin.kubeconfig"
const CONTROLLER_MANAGER_KUBECONFIG = "controller-manager.kubeconfig"
const SCHEDULER_KUBECONFIG = "scheduler.kubeconfig"
const PROXY_KUBECONFIG = "proxy.kubeconfig"
const KUBELET_KUBECONFIG = "kubelet-{{.Name}}.kubeconfig"

// Security
const ENCRYPTION_CONFIG = "encryption-config.yaml"

// Containerd
const CONTAINERD_CONFIG = "config-{{.Name}}.toml"
const CONTAINERD_SOCK = "containerd.sock"

// K8S Config
const K8S_KUBELET_SETUP = "kubelet-setup.yaml"
const K8S_ADMIN_USER_SETUP = "admin-user-setup.yaml"
const K8S_HELM_USER_SETUP = "helm-user-setup.yaml"
const K8S_KUBE_SCHEDULER_CONFIG = "kube-scheduler-config.yaml"
const K8S_KUBELET_CONFIG = "kubelet-{{.Name}}-config.yaml"
const K8S_COREDNS_SETUP = "coredns-setup.yaml"
const K8S_CALICO_SETUP = "calico-setup.yaml"
const K8S_ELASTICSEARCH_OPERATOR_SETUP = "elasticsearch-operator-setup.yaml"
const K8S_EFK_SETUP = "efk-setup.yaml"
const K8S_ARK_SETUP = "ark-setup.yaml"
const K8S_HEAPSTER_SETUP = "heapster-setup.yaml"
const K8S_KUBERNETES_DASHBOARD_SETUP = "kubernetes-dashboard-setup.yaml"
const K8S_CERT_MANAGER_SETUP = "cert-manager-setup.yaml"
const K8S_NGINX_INGRESS_SETUP = "nginx-ingress-setup.yaml"
const K8S_METRICS_SERVER_SETUP = "metrics-server-setup.yaml"
const K8S_PROMETHEUS_OPERATOR_SETUP = "prometheus-operator-setup.yaml"
const K8S_KUBE_PROMETHEUS_SETUP = "kube-prometheus-setup.yaml"
const K8S_KUBE_PROMETHEUS_DATASOURCE_SETUP = "kube-prometheus-datasource-setup.yaml"
const K8S_KUBE_PROMETHEUS_KUBERNETES_CLUSTER_STATUS_DASHBOARD_SETUP = "kube-prometheus-kubernetes-cluster-status-dashboard-setup.yaml"
const K8S_KUBE_PROMETHEUS_PODS_DASHBOARD_SETUP = "kube-prometheus-pods-dashboard-setup.yaml"
const K8S_KUBE_PROMETHEUS_DEPLOYMENT_DASHBOARD_SETUP = "kube-prometheus-deployment-dashboard-setup.yaml"
const K8S_KUBE_PROMETHEUS_KUBERNETES_CONTROL_PLANE_STATUS_DASHBOARD_SETUP = "kube-prometheus-kubernetes-control-plane-status-dashboard-setup.yaml"
const K8S_KUBE_PROMETHEUS_STATEFULSET_DASHBOARD_SETUP = "kube-prometheus-statefulset-dashboard-setup.yaml"
const K8S_KUBE_PROMETHEUS_KUBERNETES_CAPACITY_PLANNING_DASHBOARD_SETUP = "kube-prometheus-kubernetes-capacity-planning-dashboard-setup.yaml"
const K8S_KUBE_PROMETHEUS_KUBERNETES_RESOURCE_REQUESTS_DASHBOARD_SETUP = "kube-prometheus-kubernetes-resource-requests-dashboard-setup.yaml"
const K8S_KUBE_PROMETHEUS_KUBERNETES_CLUSTER_HEALTH_DASHBOARD_SETUP = "kube-prometheus-kubernetes-cluster-health-dashboard-setup.yaml"
const K8S_KUBE_PROMETHEUS_NODES_DASHBOARD_SETUP = "kube-prometheus-nodes-dashboard-setup.yaml"
const WORDPRESS_SETUP = "wordpress-setup.yaml"

// Gobetween Config
const GOBETWEEN_CONFIG = "config.toml"

// Profile
const K8S_TEW_PROFILE = "k8s-tew.sh"

// Bash Completion
const BASH_COMPLETION_K8S_TEW = "k8s-tew.bash-completion"
const BASH_COMPLETION_KUBECTL = "kubectl.bash-completion"
const BASH_COMPLETION_HELM = "helm.bash-completion"
const BASH_COMPLETION_ARK = "ark.bash-completion"
const BASH_COMPLETION_CRICTL = "crictl.bash-completion"

// Logging
const AUDIT_LOG = "audit.log"

// Deployment
const DEPLOYMENT_USER = "root"

// Service
const SERVICE_NAME = "k8s-tew"
const SERVICE_CONFIG = SERVICE_NAME + ".service"

// Ceph
const CEPH_RBD_POOL_NAME = "cephrbd"
const CEPH_FS_POOL_NAME = "cephfs"
const CEPH_CONFIG = "ceph.conf"
const CEPH_CLIENT_ADMIN_KEYRING = "ceph.client.admin.keyring"
const CEPH_MONITOR_KEYRING = "ceph.mon.keyring"
const CEPH_KEYRING = "ceph.keyring"
const CEPH_BOOTSTRAP_MDS_KEYRING = "ceph.bootstrap.mds.keyring"
const CEPH_BOOTSTRAP_OSD_KEYRING = "ceph.bootstrap.osd.keyring"
const CEPH_BOOTSTRAP_RBD_KEYRING = "ceph.bootstrap.rbd.keyring"
const CEPH_BOOTSTRAP_RGW_KEYRING = "ceph.bootstrap.rgw.keyring"
const CEPH_SECRETS = "ceph-secrets.yaml"
const CEPH_SETUP = "ceph-setup.yaml"
const CEPH_CSI = "ceph-csi.yaml"

// Cluster Issuer
const LETSENCRYPT_CLUSTER_ISSUER = "letsencrypt-cluster-issuer.yaml"

// Environment variables
const K8S_TEW_BASE_DIRECTORY = "K8S_TEW_BASE_DIRECTORY"

// Virtual IP Manager
const ELECTION_NAMESPACE = "/k8s-tew"
const ELECTION_CONTROLLER = "/controller-vip-manager"
const ELECTION_WORKER = "/worker-vip-manager"

// Common Names
const CN_ADMIN = "admin"
const CN_AGGREGATOR = "aggregator"
const CN_SYSTEM_KUBE_CONTROLLER_MANAGER = "system:kube-controller-manager"
const CN_SYSTEM_KUBE_SCHEDULER = "system:kube-scheduler"
const CN_SYSTEM_KUBE_PROXY = "system:kube-proxy"
const CN_SYSTEM_NODE_PREFIX = "system:node:%s"

// Templates
const TEMPLATE_CONTAINERD_TOML = "k8s/cri/containerd.toml"
const TEMPLATE_K8S_TEW_SERVICE = "system/k8s-tew.service"
const TEMPLATE_K8S_TEW_PROFILE = "system/k8s-tew.sh"
const TEMPLATE_ENVIRONMENT = "system/environment.sh"
const TEMPLATE_GOBETWEEN_TOML = "k8s/lb/gobetween.toml"
const TEMPLATE_KUBE_SCHEDULER_CONFIGURATION = "k8s/kube-scheduler-configuration.yaml"
const TEMPLATE_KUBELET_CONFIGURATION = "k8s/kubelet-configuration.yaml"
const TEMPLATE_ENCRYPTION_CONFIG = "k8s/encryption-config.yaml"
const TEMPLATE_KUBECONFIG = "k8s/kubeconfig.yaml"
const TEMPLATE_SERVICE_ACCOUNT = "k8s/service-account.yaml"
const TEMPLATE_KUBELET_SETUP = "k8s/setup/kubelet-setup.yaml"
const TEMPLATE_CEPH_CLIENT_KEYRING = "ceph/client.keyring"
const TEMPLATE_CEPH_CLIENT_ADMIN_KEYRING = "ceph/client-admin.keyring"
const TEMPLATE_CEPH_MONITOR_KEYRING = "ceph/monitor.keyring"
const TEMPLATE_CEPH_CONFIG = "ceph/ceph.conf"
const TEMPLATE_CEPH_SECRETS = "k8s/setup/storage/ceph-secrets.yaml"
const TEMPLATE_CEPH_SETUP = "k8s/setup/storage/ceph-setup.yaml"
const TEMPLATE_CEPH_CSI = "k8s/setup/storage/ceph-csi.yaml"
const TEMPLATE_LETSENCRYPT_CLUSTER_ISSUER_SETUP = "k8s/setup/ingress/letsencrypt-cluster-issuer.yaml"
const TEMPLATE_COREDNS_SETUP = "k8s/setup/dns/coredns.yaml"
const TEMPLATE_CALICO_SETUP = "k8s/setup/networking/calico.yaml"
const TEMPLATE_ELASTICSEARCH_OPERATOR_SETUP = "k8s/setup/logging/elasticsearch-operator.yaml"
const TEMPLATE_EFK_SETUP = "k8s/setup/logging/efk.yaml"
const TEMPLATE_ARK_SETUP = "k8s/setup/backup/ark.yaml"
const TEMPLATE_HEAPSTER_SETUP = "k8s/setup/monitoring/heapster.yaml"
const TEMPLATE_KUBERNETES_DASHBOARD_SETUP = "k8s/setup/management/kubernetes-dashboard.yaml"
const TEMPLATE_CERT_MANAGER_SETUP = "k8s/setup/networking/cert-manager.yaml"
const TEMPLATE_NGINX_INGRESS_SETUP = "k8s/setup/networking/nginx-ingress.yaml"
const TEMPLATE_METRICS_SERVER_SETUP = "k8s/setup/monitoring/metrics-server.yaml"
const TEMPLATE_PROMETHEUS_OPERATOR_SETUP = "k8s/setup/monitoring/prometheus-operator.yaml"
const TEMPLATE_KUBE_PROMETHEUS_SETUP = "k8s/setup/monitoring/kube-prometheus.yaml"
const TEMPLATE_KUBE_PROMETHEUS_DATASOURCE_SETUP = "k8s/setup/monitoring/kube-prometheus-datasource.yaml"
const TEMPLATE_KUBE_PROMETHEUS_KUBERNETES_CLUSTER_STATUS_DASHBOARD_SETUP = "k8s/setup/monitoring/kube-prometheus-kubernetes-cluster-status-dashboard.yaml"
const TEMPLATE_KUBE_PROMETHEUS_PODS_DASHBOARD_SETUP = "k8s/setup/monitoring/kube-prometheus-pods-dashboard.yaml"
const TEMPLATE_KUBE_PROMETHEUS_DEPLOYMENT_DASHBOARD_SETUP = "k8s/setup/monitoring/kube-prometheus-deployment-dashboard.yaml"
const TEMPLATE_KUBE_PROMETHEUS_KUBERNETES_CONTROL_PLANE_STATUS_DASHBOARD_SETUP = "k8s/setup/monitoring/kube-prometheus-kubernetes-control-plane-status-dashboard.yaml"
const TEMPLATE_KUBE_PROMETHEUS_STATEFULSET_DASHBOARD_SETUP = "k8s/setup/monitoring/kube-prometheus-statefulset-dashboard.yaml"
const TEMPLATE_KUBE_PROMETHEUS_KUBERNETES_CAPACITY_PLANNING_DASHBOARD_SETUP = "k8s/setup/monitoring/kube-prometheus-kubernetes-capacity-planning-dashboard.yaml"
const TEMPLATE_KUBE_PROMETHEUS_KUBERNETES_RESOURCE_REQUESTS_DASHBOARD_SETUP = "k8s/setup/monitoring/kube-prometheus-kubernetes-resource-requests-dashboard.yaml"
const TEMPLATE_KUBE_PROMETHEUS_KUBERNETES_CLUSTER_HEALTH_DASHBOARD_SETUP = "k8s/setup/monitoring/kube-prometheus-kubernetes-cluster-health-dashboard.yaml"
const TEMPLATE_KUBE_PROMETHEUS_NODES_DASHBOARD_SETUP = "k8s/setup/monitoring/kube-prometheus-nodes-dashboard.yaml"
const TEMPLATE_WORDPRESS_SETUP = "k8s/setup/miscellaneous/wordpress.yaml"
